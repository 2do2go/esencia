{"version":3,"sources":["esencia.js","lib/classes/collection.js","lib/classes/componentsManager.js","lib/classes/model.js","lib/classes/router.js","lib/classes/view.js","lib/esencia.js","lib/utils/componentsManager.js","lib/utils/exec.js","lib/utils/extend.js"],"names":["factory","define","amd","exports","module","require","this","Esencia","_","Backbone","__external__","__external_Backbone","_require","id","cache","modules","call","backbone","execUtils","Collection","sync","method","collection","options","prepareOptions","getFakeBaseMethod","prototype","exec","extend","parse","success","resp","fetch","reset","context","trigger","wrapError","isTreeNodeChanged","oldNode","node","Boolean","component","name","view","View","isWaiting","attached","isUnchanged","ComponentsManager","pick","componentManagerOptions","components","tree","currentNames","autoAddRoot","_addRoot","initialize","apply","arguments","componentOptions","Events","rootEl","defaultParent","undefined","RootView","el","add","parent","defaults","load","hasName","has","hasContainer","hasParent","isString","isRoot","isNull","hasDefaultParent","Error","isUndefined","container","uniqueId","get","remove","names","callback","isFunction","noop","isArray","length","_buildTree","oldTree","_applyTree","children","self","buildHashedTree","parentNames","nodes","chain","uniq","map","push","compact","value","each","find","child","isEmpty","filter","some","params","afterCallback","after","iterate","oldChildren","setData","setView","renderViews","include","attachViews","exclude","union","render","index","detach","result","componentsManager","listenToOnce","Model","model","serverAttrs","set","Router","namedParameters","autoloadModules","modulesPath","defaultModuleName","onModuleError","routerOptions","constructor","route","isObject","componentNames","pluck","join","namedParam","splatParam","namesPattern","_routeToRegExp","splatMatch","namedMatch","paramNames","match","replace","substring","_extractParameters","fragment","namedParams","console","log","i","loadModule","history","moduleName","getModuleName","moduleInit","loadUrl","split","identity","isContainerSkipped","contains","$","splice","Array","delegateEventSplitter","templateHelpers","waitsCounter","waitAvailable","nestedEntityTypes","nestedEventTypes","resultableOptions","viewOptions","data","key","_prepareNestedEvents","_prepareModels","_prepareCollections","_prepareViews","views","viewsGroup","delegateNestedEvents","omit","wait","collections","models","once","defer","_render","template","force","getTemplateData","html","renderTemplate","$el","setElement","_ensureElement","$container","attach","first","containerEl","domChanged","$els","append","_updateViews","setViews","appendView","_insertViews","appendViews","prependView","prependViews","insertView","insertViews","removeView","getView","_removeViews","removeViews","getViews","clone","concat","oldViews","all","oldView","viewObjs","indexOf","viewObj","sortBy","undelegateNestedEvents","element","$previousEl","_setElement","replaceWith","ensureUI","$ui","ui","mapObject","selector","delegateTriggers","triggers","undelegateTriggers","event","toArray","delegateTrigger","eventName","listener","on","cid","off","undelegateTrigger","type","entities","listeners","_nestedEvents","entity","listenTo","handler","stopListening","entityType","eventType","entityEventsHash","entityNames","bind","entityName","afterAttach","previousView","attr","delegateEvents","detachViews","beforeDetach","removeData","removeAttr","undelegateEvents","getClosestView","$selector","is","closest","backboneFields","DEFAULT_EXEC_TYPE","urlError","error","dataType","contentType","processData","url","JSON","stringify","baseMethodsMap","POST","PUT","PATCH","DELETE","GET","toUpperCase"],"mappings":"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","file":"esencia.min.js","sourcesContent":["(function (factory) {\n    if (typeof define === 'function' && define.amd) {\n        define([\n            'underscore',\n            'backbone'\n        ], factory);\n    } else if (typeof exports === 'object') {\n        module.exports = factory(require('underscore'), require('backbone'));\n    } else {\n        this.Esencia = factory(_, Backbone);\n    }\n}(function (__external__, __external_Backbone) {\n    var global = this, define;\n    function _require(id) {\n        var module = _require.cache[id];\n        if (!module) {\n            var exports = {};\n            module = _require.cache[id] = {\n                id: id,\n                exports: exports\n            };\n            _require.modules[id].call(exports, module, exports);\n        }\n        return module.exports;\n    }\n    _require.cache = [];\n    _require.modules = [\n        function (module, exports) {\n            'use strict';\n            var _ = _require(10);\n            var backbone = _require(9);\n            var execUtils = _require(7);\n            var Collection = {};\n            Collection.sync = function (method, collection, options) {\n                options = execUtils.prepareOptions(method, collection, options);\n                method = execUtils.getFakeBaseMethod(options);\n                return backbone.Collection.prototype.sync.call(this, method, collection, options);\n            };\n            Collection.exec = function (method, options) {\n                options = _.extend({ parse: true }, options);\n                var collection = this;\n                var success = options.success;\n                options.success = function (resp) {\n                    if (options.fetch)\n                        collection[options.reset ? 'reset' : 'set'](resp, options);\n                    if (success)\n                        success.call(options.context, collection, resp, options);\n                    collection.trigger('exec:' + method, collection, resp, options);\n                };\n                execUtils.wrapError(this, options);\n                return this.sync(method, this, options);\n            };\n            module.exports = backbone.Collection.extend(Collection);\n        },\n        function (module, exports) {\n            'use strict';\n            var _ = _require(10);\n            var backbone = _require(9);\n            var View = _require(4);\n            var extend = _require(8);\n            function isTreeNodeChanged(oldNode, node) {\n                return Boolean(!oldNode || oldNode.component.name !== node.component.name || !oldNode.view || oldNode.view instanceof node.component.View === false || oldNode.view.isWaiting() || !oldNode.view.attached || !oldNode.view.isUnchanged());\n            }\n            var ComponentsManager = function (options) {\n                options = options || {};\n                _.extend(this, _.pick(options, componentManagerOptions));\n                this.options = options;\n                this.components = {};\n                this.tree = [];\n                this.currentNames = [];\n                if (this.autoAddRoot)\n                    this._addRoot();\n                this.initialize.apply(this, arguments);\n            };\n            var componentManagerOptions = [\n                    'rootEl',\n                    'autoAddRoot'\n                ];\n            var componentOptions = [\n                    'name',\n                    'parent',\n                    'container',\n                    'View',\n                    'model',\n                    'models',\n                    'collection',\n                    'collections',\n                    'viewOptions'\n                ];\n            _.extend(ComponentsManager.prototype, backbone.Events, {\n                rootEl: 'html',\n                autoAddRoot: true,\n                defaultParent: undefined,\n                initialize: function () {\n                },\n                _addRoot: function () {\n                    var RootView = View.extend({ el: this.rootEl });\n                    this.add({\n                        parent: null,\n                        View: RootView\n                    });\n                },\n                add: function (options) {\n                    options = _.defaults({}, options, {\n                        parent: this.defaultParent,\n                        load: false\n                    });\n                    var component = _.pick(options, componentOptions);\n                    var hasName = _.has(component, 'name');\n                    var hasContainer = _.has(component, 'container');\n                    var hasParent = _.isString(component.parent);\n                    var isRoot = _.isNull(component.parent);\n                    var hasDefaultParent = _.isString(this.defaultParent);\n                    if (hasName && !_.isString(component.name)) {\n                        throw new Error('Component `name` option should be a string');\n                    }\n                    if (hasName && _.has(this.components, component.name)) {\n                        throw new Error('Duplicate component with name \"' + component.name + '\"');\n                    }\n                    if (!_.has(component, 'View')) {\n                        throw new Error('Component `View` option is required');\n                    }\n                    if (!hasDefaultParent && _.isUndefined(component.parent)) {\n                        throw new Error('Default root component is not set, add root component first');\n                    }\n                    if (!hasParent && !isRoot) {\n                        throw new Error('Component `parent` option should be a string or null');\n                    }\n                    if (isRoot && hasContainer) {\n                        throw new Error('Root component could not have a container');\n                    }\n                    if (hasParent && !hasContainer) {\n                        throw new Error('Component `container` option is required for components with parent');\n                    }\n                    if (hasContainer && !_.isString(component.container)) {\n                        throw new Error('Component `container` option should be a string selector');\n                    }\n                    if (!hasName) {\n                        component.name = _.uniqueId('__COMPONENT_') + '__';\n                    }\n                    this.components[component.name] = component;\n                    if (isRoot && (!hasDefaultParent || options.default)) {\n                        this.defaultParent = component.name;\n                    }\n                    if (options.load) {\n                        this.load(component.name);\n                    }\n                    return component;\n                },\n                get: function (name) {\n                    var component = this.components[name];\n                    if (!component) {\n                        throw new Error('Component with name \"' + name + '\" does not exist');\n                    }\n                    return component;\n                },\n                remove: function (name) {\n                    delete this.components[name];\n                },\n                load: function (names, options, callback) {\n                    if (_.isFunction(names)) {\n                        callback = names;\n                        names = undefined;\n                        options = undefined;\n                    }\n                    if (_.isFunction(options)) {\n                        callback = options;\n                        options = undefined;\n                    }\n                    names = names || this.currentNames;\n                    options = options || {};\n                    callback = callback || _.noop;\n                    if (!_.isArray(names))\n                        names = [names];\n                    if (!names.length) {\n                        throw new Error('Component name or names to load should be set');\n                    }\n                    var tree = this._buildTree(names);\n                    var oldTree = this.tree;\n                    this.tree = [];\n                    this.currentNames = names;\n                    this._applyTree({\n                        parent: { children: this.tree },\n                        oldTree: oldTree,\n                        tree: tree\n                    }, callback);\n                },\n                _buildTree: function (names) {\n                    var self = this;\n                    var buildHashedTree = function (names, tree) {\n                        if (!names.length)\n                            return tree;\n                        var parentNames = [];\n                        var nodes = _(names).chain().uniq().map(function (name) {\n                                var component = self.get(name);\n                                if (_.has(tree, component.name))\n                                    return null;\n                                var node = {\n                                        component: component,\n                                        children: []\n                                    };\n                                if (_.isString(component.parent)) {\n                                    parentNames.push(component.parent);\n                                }\n                                tree[component.name] = node;\n                                return node;\n                            }).compact().value();\n                        tree = buildHashedTree(parentNames, tree);\n                        _(nodes).each(function (node) {\n                            if (_.isString(node.component.parent)) {\n                                if (node.component.container && _(tree[node.component.parent].children).find(function (child) {\n                                        return child.component.container === node.component.container;\n                                    })) {\n                                    throw new Error('Components could not have same container and parent in one tree');\n                                }\n                                tree[node.component.parent].children.push(node);\n                            }\n                        });\n                        return tree;\n                    };\n                    var tree = buildHashedTree(names, {});\n                    if (_.isEmpty(tree)) {\n                        throw new Error('Components tree is empty');\n                    }\n                    tree = _(tree).filter(function (node) {\n                        return _.isNull(node.component.parent);\n                    });\n                    if (!tree.length) {\n                        throw new Error('Components tree should have at least one root node');\n                    }\n                    if (_(tree).some(function (node) {\n                            return node.component.container;\n                        })) {\n                        throw new Error('Root component could not have a container');\n                    }\n                    return tree;\n                },\n                _applyTree: function (params, callback) {\n                    var self = this;\n                    var parent = params.parent;\n                    var afterCallback = _.after(params.tree.length, callback);\n                    var iterate = function (oldNode, node) {\n                        var container = node.component.container;\n                        var children = node.children;\n                        var oldChildren = oldNode ? oldNode.children : [];\n                        node.view.setData();\n                        if (!node.view.attached && container) {\n                            parent.view.setView(node.view, container).renderViews({ include: [container] }).attachViews({ include: [container] });\n                        } else {\n                            var exclude = _.union(_(children).chain().map(function (child) {\n                                    return child.component.container;\n                                }).compact().value(), _(oldChildren).chain().map(function (child) {\n                                    return child.component.container;\n                                }).compact().value());\n                            node.view.render({ exclude: exclude });\n                        }\n                        node.children = [];\n                        parent.children.push(node);\n                        self._applyTree({\n                            parent: node,\n                            oldTree: oldChildren,\n                            tree: children\n                        }, afterCallback);\n                    };\n                    _(params.tree).each(function (node, index) {\n                        var oldNode = params.oldTree[index] || null;\n                        if (isTreeNodeChanged(oldNode, node)) {\n                            if (oldNode && oldNode.view) {\n                                if (oldNode.component.container) {\n                                    if (oldNode.component.container !== node.component.container) {\n                                        oldNode.view.remove();\n                                    }\n                                } else {\n                                    oldNode.view.detach();\n                                }\n                            }\n                            node.view = new node.component.View(_(node.component).chain().pick('model', 'models', 'collection', 'collections').extend(_.result(node.component, 'viewOptions'), { componentsManager: this }).value());\n                            if (node.view.isWaiting()) {\n                                self.listenToOnce(node.view, 'esencia:resolve', function () {\n                                    iterate(null, node);\n                                });\n                            } else {\n                                iterate(null, node);\n                            }\n                        } else {\n                            node.view = oldNode.view;\n                            iterate(oldNode, node);\n                        }\n                    });\n                }\n            });\n            ComponentsManager.extend = extend;\n            module.exports = ComponentsManager;\n        },\n        function (module, exports) {\n            'use strict';\n            var _ = _require(10);\n            var backbone = _require(9);\n            var execUtils = _require(7);\n            var Model = {};\n            Model.sync = function (method, model, options) {\n                options = execUtils.prepareOptions(method, model, options);\n                method = execUtils.getFakeBaseMethod(options);\n                return backbone.Model.prototype.sync.call(this, method, model, options);\n            };\n            Model.exec = function (method, options) {\n                options = _.extend({ parse: true }, options);\n                var model = this;\n                var success = options.success;\n                options.success = function (resp) {\n                    if (options.fetch) {\n                        var serverAttrs = options.parse ? model.parse(resp, options) : resp;\n                        if (!model.set(serverAttrs, options))\n                            return false;\n                    }\n                    if (success)\n                        success.call(options.context, model, resp, options);\n                    model.trigger('exec:' + method, model, resp, options);\n                };\n                execUtils.wrapError(this, options);\n                return this.sync(method, this, options);\n            };\n            module.exports = backbone.Model.extend(Model);\n        },\n        function (module, exports) {\n            'use strict';\n            var _ = _require(10);\n            var backbone = _require(9);\n            var componentsManager = _require(6);\n            var Router = {\n                    componentsManager: componentsManager,\n                    namedParameters: true,\n                    autoloadModules: true,\n                    modulesPath: 'modules/',\n                    defaultModuleName: 'main',\n                    onModuleError: function () {\n                    }\n                };\n            var routerOptions = [\n                    'componentsManager',\n                    'namedParameters',\n                    'autoloadModules',\n                    'modulesPath',\n                    'defaultModuleName',\n                    'onModuleError'\n                ];\n            Router.constructor = function (options) {\n                options = options || {};\n                _.extend(this, _.pick(options, routerOptions));\n                this.options = options;\n                this.modules = {};\n                backbone.Router.apply(this, arguments);\n            };\n            Router.component = function (options) {\n                return this.componentsManager.add(options);\n            };\n            Router.route = function (route, options, callback) {\n                var self = this;\n                if (_.isFunction(options)) {\n                    callback = options;\n                    options = {};\n                }\n                if (!_.isObject(options)) {\n                    options = { name: options };\n                }\n                var name = '';\n                if (_.has(options, 'components') || _.has(options, 'component')) {\n                    var components = _(options.components || [options.component]).map(function (componentOptions) {\n                            if (_.isString(componentOptions)) {\n                                return self.componentsManager.get(componentOptions);\n                            } else {\n                                return self.component(componentOptions);\n                            }\n                        });\n                    var componentNames = _.pluck(components, 'name');\n                    name = componentNames.join(',');\n                    callback = function () {\n                        self.componentsManager.load(componentNames);\n                    };\n                }\n                name = options.name || name;\n                backbone.Router.prototype.route.call(this, route, name, callback);\n            };\n            var namedParam = /(\\(\\?)?:\\w+/g, splatParam = /\\*\\w+/g, namesPattern = /[\\:\\*]([^\\:\\?\\/]+)/g;\n            Router._routeToRegExp = function (route) {\n                var splatMatch = splatParam.exec(route) || { index: -1 }, namedMatch = namedParam.exec(route) || { index: -1 }, paramNames = route.match(namesPattern) || [];\n                route = backbone.Router.prototype._routeToRegExp.call(this, route);\n                if (splatMatch.index >= 0) {\n                    if (namedMatch >= 0) {\n                        route.splatMatch = splatMatch.index - namedMatch.index;\n                    } else {\n                        route.splatMatch = -1;\n                    }\n                }\n                route.paramNames = _(paramNames).map(function (name) {\n                    return name.replace(/\\)$/, '').substring(1);\n                });\n                return route;\n            };\n            Router._extractParameters = function (route, fragment) {\n                var params = backbone.Router.prototype._extractParameters.call(this, route, fragment);\n                var namedParams = {};\n                var length = params.length;\n                if (route.splatMatch) {\n                    if (route.splatMatch < 0) {\n                        return params;\n                    } else {\n                        length = length - 1;\n                    }\n                }\n                console.log('>>>>>>>>', length, route.paramNames);\n                for (var i = 0; i < length; i++) {\n                    if (_.isString(params[i])) {\n                        if (route.paramNames && route.paramNames.length >= i - 1) {\n                            namedParams[route.paramNames[i]] = params[i];\n                        }\n                    }\n                }\n                console.log('>>>>>>>>', namedParams);\n                return this.namedParameters ? [namedParams] : params;\n            };\n            Router.loadModule = function (fragment) {\n                var self = this;\n                fragment = fragment || backbone.history.fragment;\n                var moduleName = this.getModuleName(fragment);\n                require([this.modulesPath + moduleName], function (moduleInit) {\n                    if (!self.modules[moduleName]) {\n                        moduleInit(self);\n                        self.modules[moduleName] = true;\n                        backbone.history.loadUrl(fragment);\n                    }\n                }, this.onModuleError);\n            };\n            Router.getModuleName = function (fragment) {\n                return _(fragment.split('/')).find(_.identity) || this.defaultModuleName;\n            };\n            module.exports = backbone.Router.extend(Router);\n        },\n        function (module, exports) {\n            'use strict';\n            var _ = _require(10);\n            var backbone = _require(9);\n            var $ = backbone.$;\n            var splice = Array.prototype.splice;\n            var delegateEventSplitter = /^(\\S+)\\s*(.*)$/;\n            function isContainerSkipped(container, options) {\n                var exclude = options.exclude;\n                var include = options.include;\n                return Boolean(exclude && _.contains(_.isArray(exclude) ? exclude : [exclude], container) || include && !_.contains(_.isArray(include) ? include : [include], container));\n            }\n            var View = {\n                    templateHelpers: {},\n                    waitsCounter: 0,\n                    waitAvailable: true,\n                    attached: false\n                };\n            var nestedEntityTypes = [\n                    'views',\n                    'models',\n                    'collections'\n                ];\n            var nestedEventTypes = [\n                    'viewEvents',\n                    'modelEvents',\n                    'collectionEvents'\n                ];\n            var resultableOptions = _.union(nestedEntityTypes, nestedEventTypes, [\n                    'ui',\n                    'triggers'\n                ]);\n            var viewOptions = _.union(resultableOptions, [\n                    'model',\n                    'collection',\n                    'data',\n                    'componentsManager',\n                    'template',\n                    'templateHelpers'\n                ]);\n            View.constructor = function (options) {\n                var self = this;\n                options = options || {};\n                this.data = {};\n                _.extend(this, _.pick(options, viewOptions));\n                this.options = options;\n                _(resultableOptions).each(function (key) {\n                    self[key] = _.result(self, key, {});\n                });\n                this._prepareNestedEvents();\n                this._prepareModels();\n                this._prepareCollections();\n                this._prepareViews();\n                _(this.views).each(function (viewsGroup, container) {\n                    self.delegateNestedEvents('views', container, viewsGroup);\n                });\n                backbone.View.call(this, _.omit(options, 'model', 'collection'));\n                _(this.views).each(function (views) {\n                    _(views).each(function (view) {\n                        if (view.isWaiting()) {\n                            self.listenToOnce(view, 'esencia:resolve', self.wait());\n                        }\n                    });\n                });\n                this.waitAvailable = false;\n                _(this.collections).each(function (collection, name) {\n                    self.delegateNestedEvents('collections', name, collection);\n                });\n                _(this.models).each(function (model, name) {\n                    self.delegateNestedEvents('models', name, model);\n                });\n            };\n            View.setData = function (data) {\n                if (data)\n                    this.data = data;\n                return this;\n            };\n            View.isUnchanged = function () {\n                return true;\n            };\n            View.wait = function () {\n                if (!this.waitAvailable) {\n                    throw new Error('Method .wait() is available only in the constructor');\n                }\n                var self = this;\n                this.waitsCounter++;\n                this.trigger('esencia:wait');\n                return _.once(function () {\n                    _.defer(function () {\n                        self.waitsCounter--;\n                        if (!self.isWaiting()) {\n                            self.trigger('esencia:resolve');\n                        }\n                    });\n                });\n            };\n            View.isWaiting = function () {\n                return this.waitsCounter > 0;\n            };\n            View._render = function (options) {\n                if (this.isWaiting())\n                    return this;\n                options = options || {};\n                if (this.template) {\n                    if (options.force || !this.attached || !this.isUnchanged()) {\n                        this.detach();\n                        var data = _(this).chain().result('templateHelpers').extend(this.getTemplateData()).value();\n                        var html = this.renderTemplate(this.template, data);\n                        if (!_.isString(html)) {\n                            throw new Error('`renderTemplate` method should return a HTML string');\n                        }\n                        var $el = $(html);\n                        if (!$el.length) {\n                            throw new Error('View template produces empty html');\n                        }\n                        if ($el.length > 1) {\n                            throw new Error('View template produces html with more than one root elements');\n                        }\n                        this.setElement($el);\n                    }\n                } else {\n                    if (!this.$el.length)\n                        this._ensureElement();\n                }\n                this.trigger('esencia:render');\n                this.renderViews(options);\n                if (!this.parent || this.$container) {\n                    this.attachViews(options);\n                    this.attach();\n                }\n                return this;\n            };\n            View.render = function (options) {\n                return this._render(options);\n            };\n            View.getTemplateData = function () {\n                return this.data;\n            };\n            View.renderTemplate = function (template, data) {\n                if (!_.isFunction(template)) {\n                    throw new Error('View `template` should be a function');\n                }\n                return template(data);\n            };\n            View.renderViews = function (options) {\n                var self = this;\n                _(this.views).each(function (viewsGroup, container) {\n                    if (isContainerSkipped(container, options))\n                        return;\n                    if (!viewsGroup.length)\n                        return;\n                    _(viewsGroup).each(function (view) {\n                        view.render(_.omit(options, 'include', 'exclude'));\n                    });\n                    var $container = container ? self.$(container).first() : self.$el;\n                    if (!$container.length) {\n                        throw new Error('Container \"' + container + '\" is not found');\n                    }\n                    var containerEl = $container.get(0);\n                    var domChanged = _(viewsGroup).some(function (view) {\n                            return !view.attached || !view.$container || view.$container.get(0) !== containerEl;\n                        });\n                    if (domChanged) {\n                        var $els = [];\n                        _(viewsGroup).each(function (view) {\n                            view.$container = $container;\n                            $els.push(view.$el);\n                        });\n                        $container.append($els);\n                    }\n                });\n                return this;\n            };\n            View.setView = function (view, container, index) {\n                return this._updateViews([view], container, index);\n            };\n            View.setViews = function (views, container, index) {\n                return this._updateViews(views, container, index);\n            };\n            View.appendView = function (view, container) {\n                return this._insertViews([view], container);\n            };\n            View.appendViews = function (views, container) {\n                return this._insertViews(views, container);\n            };\n            View.prependView = function (view, container) {\n                return this._insertViews([view], container, 0);\n            };\n            View.prependViews = function (views, container) {\n                return this._insertViews(views, container, 0);\n            };\n            View.insertView = function (view, container, index) {\n                return this._insertViews([view], container, index);\n            };\n            View.insertViews = function (views, container, index) {\n                return this._insertViews(views, container, index);\n            };\n            View.removeView = function (view, container, index) {\n                if (arguments.length < 2) {\n                    throw new Error('\"view\" or \"index\" arguments must be specified');\n                }\n                if (_.isString(view)) {\n                    index = container;\n                    container = view;\n                    view = this.getView(container, index);\n                    if (!view)\n                        return this;\n                }\n                return this._removeViews([view], container);\n            };\n            View.removeViews = function (views, container) {\n                if (_.isString(views)) {\n                    container = views;\n                    views = this.getViews(container);\n                }\n                return this._removeViews(views, container);\n            };\n            View.getView = function (container, index) {\n                return this.getViews(container)[index || 0] || null;\n            };\n            View.getViews = function (container) {\n                return _.clone(this.views[container]) || [];\n            };\n            View._insertViews = function (views, container, index) {\n                var self = this;\n                var viewsGroup = this.getViews(container);\n                _(views).each(function (view) {\n                    if (view.parent) {\n                        view.parent.removeView(view, view.container);\n                    }\n                });\n                if (viewsGroup.length) {\n                    if (typeof index === 'undefined') {\n                        index = viewsGroup.length;\n                    }\n                    splice.apply(this.views[container], [\n                        index,\n                        0\n                    ].concat(views));\n                } else {\n                    this.views[container] = views;\n                }\n                _(views).each(function (view) {\n                    view.parent = self;\n                    view.container = container;\n                });\n                this.delegateNestedEvents('views', container, views);\n                return this;\n            };\n            View._updateViews = function (views, container, index) {\n                var oldViews;\n                if (typeof index === 'undefined') {\n                    oldViews = this.getViews(container);\n                } else {\n                    oldViews = this.getView(container, index);\n                    oldViews = oldViews ? [oldViews] : [];\n                }\n                if (oldViews.length === views.length && _(oldViews).all(function (oldView, index) {\n                        return oldView === views[index];\n                    }))\n                    return this;\n                if (oldViews.length) {\n                    this._removeViews(oldViews, container);\n                    _(oldViews).each(function (view) {\n                        view.remove();\n                    });\n                }\n                return this._insertViews(views, container, index);\n            };\n            View._removeViews = function (views, container) {\n                var self = this;\n                var viewsGroup = this.getViews(container);\n                if (!viewsGroup.length)\n                    return this;\n                var viewObjs = _(views).chain().uniq().map(function (view) {\n                        return {\n                            view: view,\n                            index: _.indexOf(viewsGroup, view)\n                        };\n                    }).filter(function (viewObj) {\n                        return viewObj.index >= 0;\n                    }).sortBy(function (viewObj) {\n                        return -viewObj.index;\n                    }).value();\n                if (!viewObjs.length)\n                    return this;\n                _(viewObjs).each(function (viewObj) {\n                    var view = viewObj.view;\n                    splice.call(self.views[container], viewObj.index, 1);\n                    self.undelegateNestedEvents(view);\n                    delete view.parent;\n                });\n                return this;\n            };\n            View.setElement = function (element) {\n                var $previousEl = this.$el;\n                this._setElement(element);\n                if ($previousEl && this.$container) {\n                    $previousEl.replaceWith(this.$el);\n                }\n                this.ensureUI();\n                return this;\n            };\n            View.ensureUI = function () {\n                var self = this;\n                this.$ui = _(this.ui).mapObject(function (selector) {\n                    return self.$(selector);\n                });\n                return this;\n            };\n            View.delegateTriggers = function (triggers) {\n                triggers = triggers || _.result(this, 'triggers');\n                if (!triggers)\n                    return this;\n                var self = this;\n                this.undelegateTriggers();\n                _(triggers).each(function (event, key) {\n                    var method = function () {\n                        self.trigger.apply(self, [event].concat(_.toArray(arguments)));\n                    };\n                    var match = key.match(delegateEventSplitter);\n                    self.delegateTrigger(match[1], match[2], method);\n                });\n                return this;\n            };\n            View.delegateTrigger = function (eventName, selector, listener) {\n                this.$el.on(eventName + '.delegateTriggers' + this.cid, selector, listener);\n                return this;\n            };\n            View.undelegateTriggers = function () {\n                if (this.$el)\n                    this.$el.off('.delegateTriggers' + this.cid);\n                return this;\n            };\n            View.undelegateTrigger = function (eventName, selector, listener) {\n                this.$el.off(eventName + '.delegateTriggers' + this.cid, selector, listener);\n                return this;\n            };\n            View.delegateNestedEvents = function (type, name, entities) {\n                if (!_.contains(nestedEntityTypes, type)) {\n                    throw new Error('Wrong entity type \"' + type + '\", available values: ' + nestedEntityTypes.join(', '));\n                }\n                var self = this;\n                if (!entities)\n                    entities = this[type][name];\n                if (!entities)\n                    return this;\n                if (!_.isArray(entities))\n                    entities = [entities];\n                var listeners = this._nestedEvents[type][name];\n                if (listeners) {\n                    this.undelegateNestedEvents(entities);\n                    _(listeners).each(function (listener) {\n                        _(entities).each(function (entity) {\n                            self.listenTo(entity, listener.eventName, listener.handler);\n                        });\n                    });\n                }\n                return this;\n            };\n            View.undelegateNestedEvents = function (entities) {\n                var self = this;\n                if (!_.isArray(entities))\n                    entities = [entities];\n                _(entities).each(function (entity) {\n                    self.stopListening(entity);\n                });\n                return this;\n            };\n            View._prepareNestedEvents = function () {\n                var self = this;\n                this._nestedEvents = {};\n                _(nestedEntityTypes).each(function (entityType) {\n                    self._nestedEvents[entityType] = {};\n                });\n                _(nestedEventTypes).each(function (eventType, index) {\n                    var entityType = nestedEntityTypes[index];\n                    var entityEventsHash = self._nestedEvents[entityType];\n                    _(self[eventType]).each(function (method, key) {\n                        if (!_.isFunction(method))\n                            method = self[method];\n                        if (!method)\n                            return;\n                        var match = key.match(delegateEventSplitter);\n                        var eventName = match[1];\n                        var entityNames = match[2].replace(/ *, */g, ',').split(',');\n                        method = _.bind(method, self);\n                        _(entityNames).each(function (entityName) {\n                            entityEventsHash[entityName] = entityEventsHash[entityName] || [];\n                            entityEventsHash[entityName].push({\n                                eventName: eventName,\n                                handler: method\n                            });\n                        });\n                    });\n                });\n            };\n            View._prepareViews = function () {\n                var self = this;\n                _(this.views).each(function (views, container) {\n                    if (!_.isArray(views))\n                        views = [views];\n                    self.views[container] = views = _(views).map(function (view) {\n                        if (_.isFunction(view))\n                            view = new view();\n                        return view;\n                    });\n                });\n            };\n            View._prepareModels = function () {\n                var self = this;\n                _(this.models).each(function (model, name) {\n                    if (_.isFunction(model))\n                        self.models[name] = new model();\n                });\n                if (this.model) {\n                    if (_.isFunction(this.model))\n                        this.model = new this.model();\n                    this.models[''] = this.model;\n                }\n            };\n            View._prepareCollections = function () {\n                var self = this;\n                _(this.collections).each(function (collection, name) {\n                    if (_.isFunction(collection))\n                        self.collections[name] = new collection();\n                });\n                if (this.collection) {\n                    if (_.isFunction(this.collection))\n                        this.collection = new this.collection();\n                    this.collections[''] = this.collection;\n                }\n            };\n            View.attachViews = function (options) {\n                options = options || {};\n                _(this.views).each(function (viewsGroup, container) {\n                    if (isContainerSkipped(container, options))\n                        return;\n                    if (!viewsGroup.length)\n                        return;\n                    _(viewsGroup).each(function (view) {\n                        view.attachViews(_.omit(options, 'include', 'exclude'));\n                        view.attach();\n                    });\n                });\n                return this;\n            };\n            View.afterAttach = function () {\n                return this;\n            };\n            View.attach = function () {\n                if (this.attached)\n                    return this;\n                var previousView = this.$el.data('esencia-view');\n                if (previousView)\n                    previousView.detach();\n                this.$el.data('esencia-view', this).attr('esencia-view', this.cid);\n                this.delegateEvents();\n                this.delegateTriggers();\n                this.attached = true;\n                this.afterAttach();\n                this.trigger('esencia:attach');\n                return this;\n            };\n            View.detachViews = function () {\n                _(this.views).each(function (viewsGroup) {\n                    if (!viewsGroup.length)\n                        return;\n                    _(viewsGroup).each(function (view) {\n                        view.detachViews();\n                        view.detach();\n                    });\n                });\n                return this;\n            };\n            View.beforeDetach = function () {\n                return this;\n            };\n            View.detach = function () {\n                if (!this.attached)\n                    return this;\n                this.trigger('esencia:detach');\n                this.beforeDetach();\n                this.$el.removeData('esencia-view').removeAttr('esencia-view');\n                this.undelegateEvents();\n                this.undelegateTriggers();\n                this.attached = false;\n                return this;\n            };\n            View.remove = function () {\n                if (this.parent) {\n                    this.parent.removeView(this, this.container);\n                }\n                this.detachViews();\n                this.detach();\n                return backbone.View.prototype.remove.call(this);\n            };\n            View.getClosestView = function (selector) {\n                var $selector = $(selector);\n                if (!$selector.is('[esencia-view]')) {\n                    $selector = $selector.closest('[esencia-view]');\n                }\n                return $selector.length ? $selector.data('esencia-view') : null;\n            };\n            module.exports = backbone.View.extend(View);\n        },\n        function (module, exports) {\n            'use strict';\n            var backbone = _require(9);\n            var _ = _require(10);\n            var Router = _require(3);\n            var Collection = _require(0);\n            var Model = _require(2);\n            var View = _require(4);\n            var ComponentsManager = _require(1);\n            var componentsManager = _require(6);\n            var extend = _require(8);\n            var Esencia = exports;\n            _.extend(Esencia, backbone.Events);\n            var backboneFields = [\n                    'Events',\n                    'History',\n                    'history'\n                ];\n            _.extend(Esencia, _.pick(backbone, backboneFields));\n            _.extend(Esencia, {\n                Router: Router,\n                Collection: Collection,\n                Model: Model,\n                View: View,\n                ComponentsManager: ComponentsManager\n            });\n            Esencia.componentsManager = componentsManager;\n            Esencia.extend = extend;\n        },\n        function (module, exports) {\n            'use strict';\n            var ComponentsManager = _require(1);\n            module.exports = new ComponentsManager();\n        },\n        function (module, exports) {\n            'use strict';\n            var _ = _require(10);\n            var DEFAULT_EXEC_TYPE = 'PUT';\n            var urlError = function () {\n                throw new Error('A `url` property or function must be specified');\n            };\n            exports.wrapError = function (model, options) {\n                var error = options.error;\n                options.error = function (resp) {\n                    if (error)\n                        error.call(options.context, model, resp, options);\n                    model.trigger('error', model, resp, options);\n                };\n            };\n            exports.prepareOptions = function (method, model, options) {\n                options = _.extend({\n                    type: DEFAULT_EXEC_TYPE,\n                    dataType: 'json',\n                    contentType: 'application/json',\n                    processData: false\n                }, options);\n                if (!options.url) {\n                    var url = _.result(model, 'url') || urlError();\n                    options.url = url.replace(/[^\\/]$/, '$&/') + method;\n                }\n                if (options.data && _.isObject(options.data) && !options.processData) {\n                    options.data = JSON.stringify(options.data);\n                }\n                return options;\n            };\n            var baseMethodsMap = {\n                    'POST': 'create',\n                    'PUT': 'update',\n                    'PATCH': 'patch',\n                    'DELETE': 'delete',\n                    'GET': 'read'\n                };\n            exports.getFakeBaseMethod = function (options) {\n                return baseMethodsMap[options.type.toUpperCase()];\n            };\n        },\n        function (module, exports) {\n            'use strict';\n            var backbone = _require(9);\n            module.exports = backbone.View.extend;\n        },\n        function (module, exports) {\n            module.exports = __external_Backbone;\n        },\n        function (module, exports) {\n            module.exports = __external__;\n        }\n    ];\n    return _require(5);\n}));\n//# sourceMappingURL=esencia.js.map\n","'use strict';\n\nvar _ = require('underscore');\nvar backbone = require('backbone');\nvar execUtils = require('../utils/exec');\n\n/**\n * @class Esencia.Collection\n * @extend Backbone.Collection\n */\n\nvar Collection = {};\n\n/**\n * Override `sync` to add exec custom method functionality\n *\n * @override\n */\n\nCollection.sync = function(method, collection, options) {\n\toptions = execUtils.prepareOptions(method, collection, options);\n\tmethod = execUtils.getFakeBaseMethod(options);\n\treturn backbone.Collection.prototype.sync.call(\n\t\tthis, method, collection, options\n\t);\n};\n\n/**\n * Exec custom non-REST method on collection\n * It trigger `exec:[method]` event after success method exec\n *\n * @param {String} method\n * @param {Object} options\n */\n\nCollection.exec = function(method, options) {\n\toptions = _.extend({parse: true}, options);\n\tvar collection = this;\n\tvar success = options.success;\n\toptions.success = function(resp) {\n\t\tif (options.fetch) collection[options.reset ? 'reset' : 'set'](resp, options);\n\t\tif (success) success.call(options.context, collection, resp, options);\n\t\tcollection.trigger('exec:' + method, collection, resp, options);\n\t};\n\texecUtils.wrapError(this, options);\n\treturn this.sync(method, this, options);\n};\n\nmodule.exports = backbone.Collection.extend(Collection);\n","'use strict';\n\nvar _ = require('underscore');\nvar backbone = require('backbone');\nvar View = require('./view');\nvar extend = require('../utils/extend');\n\nfunction isTreeNodeChanged(oldNode, node) {\n\treturn Boolean(\n\t\t!oldNode ||\n\t\toldNode.component.name !== node.component.name ||\n\t\t!oldNode.view ||\n\t\toldNode.view instanceof node.component.View === false ||\n\t\toldNode.view.isWaiting() ||\n\t\t!oldNode.view.attached ||\n\t\t!oldNode.view.isUnchanged()\n\t);\n}\n\n/**\n * @class Esencia.ComponentsManager\n */\n\nvar ComponentsManager = function(options) {\n\toptions = options || {};\n\n\t// populate ComponentsManager instance with fields from options\n\t_.extend(this, _.pick(options, componentManagerOptions));\n\t// save original options, it is sometimes usefull\n\tthis.options = options;\n\n\t// all components hash\n\tthis.components = {};\n\n\t// current components tree that loaded at this moment\n\tthis.tree = [];\n\n\t// component names of the loaded tree at this moment\n\tthis.currentNames = [];\n\n\t// add default root component, in most cases this is what you need\n\tif (this.autoAddRoot) this._addRoot();\n\n\tthis.initialize.apply(this, arguments);\n};\n\nvar componentManagerOptions = [\n\t'rootEl', 'autoAddRoot'\n];\n\n var componentOptions = [\n\t'name', 'parent', 'container', 'View', 'model', 'models',\n\t'collection', 'collections', 'viewOptions'\n];\n\n_.extend(ComponentsManager.prototype, backbone.Events, {\n\t// You can set selector of any element at the page if you want restrict\n\t// specific page area that component manager will process\n\trootEl: 'html',\n\n\t// Add default root component, in most cases this is what you need\n\tautoAddRoot: true,\n\n\t// Default parent component name is undefined until any root component will\n\t// added\n\t// When root component is added, it name will set as value of this field\n\tdefaultParent: undefined,\n\n\t/**\n\t * Initialize is an empty function by default. Override it with your own\n\t * initialization logic.\n\t */\n\n\tinitialize: function() {},\n\n\t/**\n\t * Add default root component to the components list\n\t */\n\n\t_addRoot: function() {\n\t\tvar RootView = View.extend({\n\t\t\tel: this.rootEl\n\t\t});\n\n\t\tthis.add({\n\t\t\tparent: null,\n\t\t\tView: RootView\n\t\t});\n\t},\n\n\t/**\n\t * Add component to the components list\n\t *\n\t * @param {Object} options\n\t * @param {String} options.name - component name\n\t * @param {View} options.View - component view constructor\n\t * @param {String|Null} [options.parent] - component parent name or null\n\t * for roots\n\t * @param {String} [options.container] - view container, required if parent\n\t * is string\n\t * @param {Boolean} [options.load] - load component after add\n\t */\n\n\tadd: function(options) {\n\t\toptions = _.defaults({}, options, {\n\t\t\tparent: this.defaultParent,\n\t\t\tload: false\n\t\t});\n\n\t\tvar component = _.pick(options, componentOptions);\n\n\t\tvar hasName = _.has(component, 'name');\n\t\tvar hasContainer = _.has(component, 'container');\n\t\tvar hasParent = _.isString(component.parent);\n\t\tvar isRoot = _.isNull(component.parent);\n\t\tvar hasDefaultParent = _.isString(this.defaultParent);\n\n\t\tif (hasName && !_.isString(component.name)) {\n\t\t\tthrow new Error('Component `name` option should be a string');\n\t\t}\n\n\t\tif (hasName && _.has(this.components, component.name)) {\n\t\t\tthrow new Error('Duplicate component with name \"' + component.name + '\"');\n\t\t}\n\n\t\tif (!_.has(component, 'View')) {\n\t\t\tthrow new Error('Component `View` option is required');\n\t\t}\n\n\t\tif (!hasDefaultParent && _.isUndefined(component.parent)) {\n\t\t\tthrow new Error(\n\t\t\t\t'Default root component is not set, add root component first'\n\t\t\t);\n\t\t}\n\n\t\tif (!hasParent && !isRoot) {\n\t\t\tthrow new Error('Component `parent` option should be a string or null');\n\t\t}\n\n\t\tif (isRoot && hasContainer) {\n\t\t\tthrow new Error('Root component could not have a container');\n\t\t}\n\n\t\tif (hasParent && !hasContainer) {\n\t\t\tthrow new Error(\n\t\t\t\t'Component `container` option is required for components with parent'\n\t\t\t);\n\t\t}\n\n\t\tif (hasContainer && !_.isString(component.container)) {\n\t\t\tthrow new Error('Component `container` option should be a string selector');\n\t\t}\n\n\t\t// generate uniq component name if compoent has not a name\n\t\tif (!hasName) {\n\t\t\tcomponent.name = _.uniqueId('__COMPONENT_') + '__';\n\t\t}\n\n\t\tthis.components[component.name] = component;\n\n\t\tif (isRoot && (!hasDefaultParent || options.default)) {\n\t\t\tthis.defaultParent = component.name;\n\t\t}\n\n\t\t// process components tree in force mode\n\t\tif (options.load) {\n\t\t\tthis.load(component.name);\n\t\t}\n\n\t\treturn component;\n\t},\n\n\t/**\n\t * Get component by name\n\t *\n\t * @param {String} name - component name\n\t * @return {Object} component\n\t */\n\n\tget: function(name) {\n\t\tvar component = this.components[name];\n\n\t\tif (!component) {\n\t\t\tthrow new Error('Component with name \"' + name + '\" does not exist');\n\t\t}\n\n\t\treturn component;\n\t},\n\n\t/**\n\t * Remove component by name\n\t *\n\t * @param {String} name - component name\n\t */\n\n\tremove: function(name) {\n\t\tdelete this.components[name];\n\t},\n\n\t/**\n\t * Load components tree by name(s) and call a callback on done\n\t *\n\t * @param {String|String[]} [names] - component name or names list\n\t * @param {Object} [options]\n\t * @params {Function} [callback]\n\t */\n\n\tload: function(names, options, callback) {\n\t\tif (_.isFunction(names)) {\n\t\t\tcallback = names;\n\t\t\tnames = undefined;\n\t\t\toptions = undefined;\n\t\t}\n\n\t\tif (_.isFunction(options)) {\n\t\t\tcallback = options;\n\t\t\toptions = undefined;\n\t\t}\n\n\t\tnames = names || this.currentNames;\n\t\toptions = options || {};\n\t\tcallback = callback || _.noop;\n\n\t\tif (!_.isArray(names)) names = [names];\n\t\tif (!names.length) {\n\t\t\tthrow new Error('Component name or names to load should be set');\n\t\t}\n\n\t\tvar tree = this._buildTree(names);\n\t\tvar oldTree = this.tree;\n\t\tthis.tree = [];\n\n\t\tthis.currentNames = names;\n\n\t\tthis._applyTree({\n\t\t\tparent: {children: this.tree},\n\t\t\toldTree: oldTree,\n\t\t\ttree: tree\n\t\t}, callback);\n\t},\n\n\t_buildTree: function(names) {\n\t\tvar self = this;\n\n\t\t// internal function for recursion\n\t\tvar buildHashedTree = function(names, tree) {\n\t\t\t// exit with empty tree if names list is empty\n\t\t\tif (!names.length) return tree;\n\n\t\t\tvar parentNames = [];\n\n\t\t\t// create component nodes\n\t\t\tvar nodes = _(names)\n\t\t\t\t.chain()\n\t\t\t\t.uniq()\n\t\t\t\t.map(function(name) {\n\t\t\t\t\tvar component = self.get(name);\n\n\t\t\t\t\t// skip component if it is already in the tree\n\t\t\t\t\tif (_.has(tree, component.name)) return null;\n\n\t\t\t\t\t// create node\n\t\t\t\t\tvar node = {\n\t\t\t\t\t\tcomponent: component,\n\t\t\t\t\t\tchildren: []\n\t\t\t\t\t};\n\n\t\t\t\t\t// add parent name to the list\n\t\t\t\t\tif (_.isString(component.parent)) {\n\t\t\t\t\t\tparentNames.push(component.parent);\n\t\t\t\t\t}\n\n\t\t\t\t\t// add nodes to the hashed tree first to prevent cycles\n\t\t\t\t\ttree[component.name] = node;\n\n\t\t\t\t\treturn node;\n\t\t\t\t})\n\t\t\t\t.compact()\n\t\t\t\t.value();\n\n\t\t\t// build new tree for parent components\n\t\t\ttree = buildHashedTree(parentNames, tree);\n\n\t\t\t// add each node to the parent children list if component has a parent\n\t\t\t_(nodes).each(function(node) {\n\t\t\t\tif (_.isString(node.component.parent)) {\n\t\t\t\t\tif (\n\t\t\t\t\t\tnode.component.container &&\n\t\t\t\t\t\t_(tree[node.component.parent].children).find(function(child) {\n\t\t\t\t\t\t\treturn child.component.container === node.component.container;\n\t\t\t\t\t\t})\n\t\t\t\t\t) {\n\t\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t\t'Components could not have same container and parent in one tree'\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\ttree[node.component.parent].children.push(node);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\treturn tree;\n\t\t};\n\n\t\tvar tree = buildHashedTree(names, {});\n\n\t\tif (_.isEmpty(tree)) {\n\t\t\tthrow new Error('Components tree is empty');\n\t\t}\n\n\t\t// filter root components\n\t\ttree = _(tree).filter(function(node) {\n\t\t\treturn _.isNull(node.component.parent);\n\t\t});\n\n\t\tif (!tree.length) {\n\t\t\tthrow new Error('Components tree should have at least one root node');\n\t\t}\n\n\t\tif (\n\t\t\t_(tree).some(function(node) {\n\t\t\t\treturn node.component.container;\n\t\t\t})\n\t\t) {\n\t\t\tthrow new Error('Root component could not have a container');\n\t\t}\n\n\t\treturn tree;\n\t},\n\n\t_applyTree: function(params, callback) {\n\t\tvar self = this;\n\n\t\tvar parent = params.parent;\n\n\t\tvar afterCallback = _.after(params.tree.length, callback);\n\n\t\tvar iterate = function(oldNode, node) {\n\t\t\tvar container = node.component.container;\n\n\t\t\tvar children = node.children;\n\t\t\tvar oldChildren = oldNode ? oldNode.children : [];\n\n\t\t\t// set view data\n\t\t\tnode.view.setData();\n\n\t\t\tif (!node.view.attached && container) {\n\t\t\t\t// render view with container from parent view\n\t\t\t\tparent.view\n\t\t\t\t\t.setView(node.view, container)\n\t\t\t\t\t.renderViews({include: [container]})\n\t\t\t\t\t.attachViews({include: [container]});\n\t\t\t} else {\n\t\t\t\t// exclude list is an union of old and new children\n\t\t\t\tvar exclude = _.union(\n\t\t\t\t\t_(children).chain().map(function(child) {\n\t\t\t\t\t\treturn child.component.container;\n\t\t\t\t\t}).compact().value(),\n\t\t\t\t\t_(oldChildren).chain().map(function(child) {\n\t\t\t\t\t\treturn child.component.container;\n\t\t\t\t\t}).compact().value()\n\t\t\t\t);\n\n\t\t\t\t// render view without container directly\n\t\t\t\tnode.view.render({exclude: exclude});\n\t\t\t}\n\n\t\t\t// clear children field in new node because it will set recursive\n\t\t\t// and should be empty in error case\n\t\t\tnode.children = [];\n\n\t\t\t// save node to the parent children\n\t\t\tparent.children.push(node);\n\n\t\t\t// recursive call for children nodes\n\t\t\tself._applyTree({\n\t\t\t\tparent: node,\n\t\t\t\toldTree: oldChildren,\n\t\t\t\ttree: children\n\t\t\t}, afterCallback);\n\t\t};\n\n\t\t_(params.tree).each(function(node, index) {\n\t\t\t// TODO get oldNode in better way\n\t\t\tvar oldNode = params.oldTree[index] || null;\n\n\t\t\tif (isTreeNodeChanged(oldNode, node)) {\n\t\t\t\tif (oldNode && oldNode.view) {\n\t\t\t\t\tif (oldNode.component.container) {\n\t\t\t\t\t\t// remove old view if container for new view dirrent\n\t\t\t\t\t\tif (oldNode.component.container !== node.component.container) {\n\t\t\t\t\t\t\toldNode.view.remove();\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// detach old view if it has not a container\n\t\t\t\t\t\toldNode.view.detach();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// create new view\n\t\t\t\tnode.view = new (node.component.View)(\n\t\t\t\t\t_(node.component)\n\t\t\t\t\t\t.chain()\n\t\t\t\t\t\t.pick('model', 'models', 'collection', 'collections')\n\t\t\t\t\t\t.extend(_.result(node.component, 'viewOptions'), {\n\t\t\t\t\t\t\tcomponentsManager: this\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.value()\n\t\t\t\t);\n\n\t\t\t\t// stop processing old components tree by passing null as oldNode\n\t\t\t\tif (node.view.isWaiting()) {\n\t\t\t\t\t// wait when view will be resolved\n\t\t\t\t\tself.listenToOnce(node.view, 'esencia:resolve', function() {\n\t\t\t\t\t\titerate(null, node);\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\titerate(null, node);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// save old view to new node\n\t\t\t\tnode.view = oldNode.view;\n\n\t\t\t\t// process old components tree\n\t\t\t\titerate(oldNode, node);\n\t\t\t}\n\t\t});\n\t}\n});\n\nComponentsManager.extend = extend;\n\nmodule.exports = ComponentsManager;\n","'use strict';\n\nvar _ = require('underscore');\nvar backbone = require('backbone');\nvar execUtils = require('../utils/exec');\n\n/**\n * @class Esencia.Model\n * @extend Backbone.Model\n */\n\nvar Model = {};\n\n/**\n * Override `sync` to add exec custom method functionality\n *\n * @override\n */\n\nModel.sync = function(method, model, options) {\n\toptions = execUtils.prepareOptions(method, model, options);\n\tmethod = execUtils.getFakeBaseMethod(options);\n\treturn backbone.Model.prototype.sync.call(this, method, model, options);\n};\n\n/**\n * Exec custom non-REST method on model\n * It trigger `exec:[method]` event after success method exec\n *\n * @param {String} method\n * @param {Object} options\n */\n\nModel.exec = function(method, options) {\n\toptions = _.extend({parse: true}, options);\n\tvar model = this;\n\tvar success = options.success;\n\toptions.success = function(resp) {\n\t\tif (options.fetch) {\n\t\t\tvar serverAttrs = options.parse ? model.parse(resp, options) : resp;\n\t\t\tif (!model.set(serverAttrs, options)) return false;\n\t\t}\n\t\tif (success) success.call(options.context, model, resp, options);\n\t\tmodel.trigger('exec:' + method, model, resp, options);\n\t};\n\texecUtils.wrapError(this, options);\n\treturn this.sync(method, this, options);\n};\n\nmodule.exports = backbone.Model.extend(Model);\n","'use strict';\n\nvar _ = require('underscore');\nvar backbone = require('backbone');\nvar componentsManager = require('../utils/componentsManager');\n\n/**\n * @class Esencia.Router\n * @extend Backbone.Router\n */\n\nvar Router = {\n\tcomponentsManager: componentsManager,\n\tnamedParameters: true,\n\tautoloadModules: true,\n\tmodulesPath: 'modules/',\n\tdefaultModuleName: 'main',\n\tonModuleError: function() {}\n};\n\nvar routerOptions = [\n\t'componentsManager', 'namedParameters',\n\t'autoloadModules', 'modulesPath', 'defaultModuleName', 'onModuleError'\n];\n\n/**\n * @constructor\n * @param {Object} [options]\n */\n\nRouter.constructor = function(options) {\n\toptions = options || {};\n\n\t// populate Router instance with fields from options\n\t_.extend(this, _.pick(options, routerOptions));\n\t// save original options, it is sometimes usefull\n\tthis.options = options;\n\n\tthis.modules = {};\n\n\tbackbone.Router.apply(this, arguments);\n};\n\n/**\n * Add new component to components manager\n *\n * @param {Object} options - component options\n */\n\nRouter.component = function(options) {\n\treturn this.componentsManager.add(options);\n};\n\n/**\n * Override `route` to add components processing functionality\n *\n * @override\n */\n\nRouter.route = function(route, options, callback) {\n\tvar self = this;\n\n\tif (_.isFunction(options)) {\n\t\tcallback = options;\n\t\toptions = {};\n\t}\n\n\tif (!_.isObject(options)) {\n\t\toptions = {name: options};\n\t}\n\n\tvar name = '';\n\n\tif (_.has(options, 'components') || _.has(options, 'component')) {\n\t\tvar components = _(options.components || [options.component])\n\t\t\t.map(function(componentOptions) {\n\t\t\t\tif (_.isString(componentOptions)) {\n\t\t\t\t\treturn self.componentsManager.get(componentOptions);\n\t\t\t\t} else {\n\t\t\t\t\treturn self.component(componentOptions);\n\t\t\t\t}\n\t\t\t});\n\n\t\tvar componentNames = _.pluck(components, 'name');\n\n\t\tname = componentNames.join(',');\n\n\t\t// create callback to load components tree\n\t\tcallback = function() {\n\t\t\tself.componentsManager.load(componentNames);\n\t\t};\n\t}\n\n\tname = options.name || name;\n\n\t// bind component to route\n\tbackbone.Router.prototype.route.call(this, route, name, callback);\n};\n\nvar namedParam = /(\\(\\?)?:\\w+/g,\n\tsplatParam = /\\*\\w+/g,\n\tnamesPattern = /[\\:\\*]([^\\:\\?\\/]+)/g;\n\nRouter._routeToRegExp = function(route) {\n\tvar splatMatch = (splatParam.exec(route) || {index: -1}),\n\t\tnamedMatch = (namedParam.exec(route) || {index: -1}),\n\t\tparamNames = route.match(namesPattern) || [];\n\n\troute = backbone.Router.prototype._routeToRegExp.call(this, route);\n\n\t// use the rtn value to hold some parameter data\n\tif (splatMatch.index >= 0) {\n\t\t// there is a splat\n\t\tif (namedMatch >= 0) {\n\t\t\t// negative value will indicate there is a splat match before any named matches\n\t\t\troute.splatMatch = splatMatch.index - namedMatch.index;\n\t\t} else {\n\t\t\troute.splatMatch = -1;\n\t\t}\n\t}\n\n\t// Map and remove any trailing ')' character that has been caught up in regex matching\n\troute.paramNames = _(paramNames).map(function(name) {\n\t\treturn name.replace(/\\)$/, '').substring(1);\n\t});\n\n\treturn route;\n};\n\nRouter._extractParameters = function(route, fragment) {\n\tvar params = backbone.Router.prototype._extractParameters.call(\n\t\tthis, route, fragment\n\t);\n\tvar namedParams = {};\n\n\t// decode params\n\tvar length = params.length;\n\tif (route.splatMatch) {\n\t\tif (route.splatMatch < 0) {\n\t\t\t// splat param is first\n\t\t\treturn params;\n\t\t} else {\n\t\t\tlength = length - 1;\n\t\t}\n\t}\n\n\tconsole.log('>>>>>>>>', length, route.paramNames)\n\n\tfor (var i = 0; i < length; i++) {\n\t\tif (_.isString(params[i])) {\n\t\t\tif (route.paramNames && route.paramNames.length >= i - 1) {\n\t\t\t\tnamedParams[route.paramNames[i]] = params[i];\n\t\t\t}\n\t\t}\n\t}\n\n\tconsole.log('>>>>>>>>', namedParams)\n\n\treturn this.namedParameters ? [namedParams] : params;\n\n\n\t// return backbone.Router.prototype._extractParameters\n\t// \t.call(this, route, fragment);\n};\n\n/**\n * Load module file and init it\n *\n * @param {Object} fragment\n */\n\nRouter.loadModule = function(fragment) {\n\tvar self = this;\n\n\tfragment = fragment || backbone.history.fragment;\n\n\tvar moduleName = this.getModuleName(fragment);\n\n\t// require module file\n\trequire([this.modulesPath + moduleName], function(moduleInit) {\n\t\t// if module is loaded first time\n\t\tif (!self.modules[moduleName]) {\n\t\t\t// init it\n\t\t\tmoduleInit(self);\n\n\t\t\t// set module init flag to true\n\t\t\tself.modules[moduleName] = true;\n\n\t\t\t// and navigate again with force flag\n\t\t\tbackbone.history.loadUrl(fragment);\n\t\t}\n\t}, this.onModuleError);\n};\n\nRouter.getModuleName = function(fragment) {\n\treturn _(fragment.split('/')).find(_.identity) || this.defaultModuleName;\n};\n\nmodule.exports = backbone.Router.extend(Router);\n","'use strict';\n\nvar _ = require('underscore');\nvar backbone = require('backbone');\n\n// Take jquery or other selectors lib from backbone\nvar $ = backbone.$;\n\nvar splice = Array.prototype.splice;\n\n// Cached regex to split keys for `delegate`.\nvar delegateEventSplitter = /^(\\S+)\\s*(.*)$/;\n\nfunction isContainerSkipped(container, options) {\n\tvar exclude = options.exclude;\n\tvar include = options.include;\n\treturn Boolean(\n\t\texclude && _.contains(_.isArray(exclude) ? exclude : [exclude], container) ||\n\t\tinclude && !_.contains(_.isArray(include) ? include : [include], container)\n\t);\n}\n\n/**\n * @class Esencia.View\n * @extend Backbone.View\n */\n\nvar View = {\n\t// Helpers (Object|Fuction) which will be passed to the template\n\ttemplateHelpers: {},\n\n\t// Views are in the resolved state by default\n\twaitsCounter: 0,\n\n\t// This flag is used to check that .wait() is called\n\t// in the constructor/initialize\n\twaitAvailable: true,\n\n\t// Views are not attached by default\n\tattached: false\n};\n\nvar nestedEntityTypes = ['views', 'models', 'collections'];\nvar nestedEventTypes = ['viewEvents', 'modelEvents', 'collectionEvents'];\nvar resultableOptions = _.union(\n\tnestedEntityTypes, nestedEventTypes, ['ui', 'triggers']\n);\nvar viewOptions = _.union(resultableOptions, [\n\t'model', 'collection', 'data', 'componentsManager',\n\t'template', 'templateHelpers'\n]);\n\n/**\n * @constructor\n * @param {Object} [options]\n */\n\nView.constructor = function(options) {\n\tvar self = this;\n\n\toptions = options || {};\n\n\t// data is empty object by default\n\tthis.data = {};\n\n\t// populate View instance with fields from options\n\t_.extend(this, _.pick(options, viewOptions));\n\t// save original options, it is sometimes usefull\n\tthis.options = options;\n\n\t// initialize properties with _.result call and default empty-object value\n\t_(resultableOptions).each(function(key) {\n\t\tself[key] = _.result(self, key, {});\n\t});\n\n\t// create special hash object for all nested events for fast search\n\tthis._prepareNestedEvents();\n\n\t// create instances of nested models\n\tthis._prepareModels();\n\n\t// create instances of nested collections\n\tthis._prepareCollections();\n\n\t// prepare nested views: create instances and wrap to arrays\n\tthis._prepareViews();\n\n\t// delegate events for each views group before constructor\n\t_(this.views).each(function(viewsGroup, container) {\n\t\tself.delegateNestedEvents('views', container, viewsGroup);\n\t});\n\n\t// apply default backbone.View constructor\n\t// omit model and collection because we alredy processed this options\n\tbackbone.View.call(this, _.omit(options, 'model', 'collection'));\n\n\t// set waiting state for current view if some nested view is in waiting state\n\t_(this.views).each(function(views) {\n\t\t_(views).each(function(view) {\n\t\t\tif (view.isWaiting()) {\n\t\t\t\tself.listenToOnce(view, 'esencia:resolve', self.wait());\n\t\t\t}\n\t\t});\n\t});\n\n\t// disable .wait(), it available only in the constructor/initialize\n\tthis.waitAvailable = false;\n\n\t// we should delegate events after parent constructor call because\n\t// collections and models could be created in the initialize method\n\n\t// delegate events for each collection\n\t_(this.collections).each(function(collection, name) {\n\t\tself.delegateNestedEvents('collections', name, collection);\n\t});\n\n\t// delegate events for each model\n\t_(this.models).each(function(model, name) {\n\t\tself.delegateNestedEvents('models', name, model);\n\t});\n};\n\n/**\n * Update view data\n * Method is used to update view state, could be overriden to modify nested\n * views state\n *\n * @param {Object} [data] - new data object\n * @return {Esencia.View} - view instance for chaining\n */\n\nView.setData = function(data) {\n\tif (data) this.data = data;\n\treturn this;\n};\n\n/**\n * Check that view is changed and should be re-rendered\n * Method returns true by default (always unchanged), could be overriden\n * for specific logic\n *\n * @return {Boolean}\n */\n\nView.isUnchanged = function() {\n\treturn true;\n};\n\n/**\n * Switch view to the waiting state\n *\n * @return {Function} - callback function, should be called to resolve view\n */\n\nView.wait = function() {\n\tif (!this.waitAvailable) {\n\t\tthrow new Error('Method .wait() is available only in the constructor');\n\t}\n\n\tvar self = this;\n\n\tthis.waitsCounter++;\n\n\tthis.trigger('esencia:wait');\n\n\t// TODO: think about promises\n\treturn _.once(function() {\n\t\t_.defer(function() {\n\t\t\tself.waitsCounter--;\n\t\t\tif (!self.isWaiting()) {\n\t\t\t\tself.trigger('esencia:resolve');\n\t\t\t}\n\t\t});\n\t});\n};\n\n/**\n * Check view waiting state\n *\n * @return {Boolean}\n */\n\nView.isWaiting = function() {\n\treturn this.waitsCounter > 0;\n};\n\n/**\n * Render view\n *\n * @param {Object} options\n * @param {Boolean} options.force\n * @return {Esencia.View} - view instance for chaining\n */\n\nView._render = function(options) {\n\t// stop rendering if view in `waiting` state, resolve it first\n\tif (this.isWaiting()) return this;\n\n\toptions = options || {};\n\n\tif (this.template) {\n\t\t// re-render template only if it exists and if it is necessary\n\t\tif (options.force || !this.attached || !this.isUnchanged()) {\n\t\t\t// detach view from DOM element\n\t\t\tthis.detach();\n\n\t\t\t// render template with data\n\t\t\tvar data = _(this)\n\t\t\t\t.chain()\n\t\t\t\t.result('templateHelpers')\n\t\t\t\t.extend(this.getTemplateData())\n\t\t\t\t.value();\n\t\t\tvar html = this.renderTemplate(this.template, data);\n\n\t\t\tif (!_.isString(html)) {\n\t\t\t\tthrow new Error('`renderTemplate` method should return a HTML string');\n\t\t\t}\n\n\t\t\t// render html with jqeury (or other lib) call\n\t\t\tvar $el = $(html);\n\n\t\t\tif (!$el.length) {\n\t\t\t\tthrow new Error('View template produces empty html');\n\t\t\t}\n\n\t\t\tif ($el.length > 1) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t'View template produces html with more than one root elements'\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tthis.setElement($el);\n\t\t}\n\t} else {\n\t\t// re-ensure element if it is not ensured\n\t\tif (!this.$el.length) this._ensureElement();\n\t}\n\n\t// trigger event\n\tthis.trigger('esencia:render');\n\n\t// render nested views\n\tthis.renderViews(options);\n\n\tif (!this.parent || this.$container) {\n\t\t// attach all nested views first\n\t\tthis.attachViews(options);\n\n\t\t// attach current view\n\t\tthis.attach();\n\t}\n\n\t// return this for chaining\n\treturn this;\n};\n\n/**\n * Render view by calling private _render method\n *\n * @override\n * @return {Esencia.View} - view instance for chaining\n */\n\nView.render = function(options) {\n\treturn this._render(options);\n};\n\n/**\n * Get data for template rendering\n * Returns data by default, could be overriden\n *\n * @return {Object}\n */\n\nView.getTemplateData = function() {\n\treturn this.data;\n};\n\n/**\n * Render template with data, return html\n * By default this method simply calls template function with data as argument\n * Override this function to change template rendering logic\n *\n * @param {Function} template - template function for rendering\n * @param {Object} data - data for rendering\n * @return {String} - rendered html\n */\n\nView.renderTemplate = function(template, data) {\n\tif (!_.isFunction(template)) {\n\t\tthrow new Error('View `template` should be a function');\n\t}\n\n\treturn template(data);\n};\n\n/**\n * Render all nested view\n *\n * @param {Object} options\n * @param {Boolean} options.force\n * @return {Esencia.View} - view instance for chaining\n*/\n\nView.renderViews = function(options) {\n\tvar self = this;\n\n\t// iterate by each views group\n\t_(this.views).each(function(viewsGroup, container) {\n\t\tif (isContainerSkipped(container, options)) return;\n\n\t\t// return if view group is empty\n\t\tif (!viewsGroup.length) return;\n\n\t\t// call render for each views from view group\n\t\t_(viewsGroup).each(function(view) {\n\t\t\tview.render(_.omit(options, 'include', 'exclude'));\n\t\t});\n\n\t\t// get first container or $el\n\t\tvar $container = container ? self.$(container).first() : self.$el;\n\n\t\tif (!$container.length) {\n\t\t\tthrow new Error('Container \"' + container + '\" is not found');\n\t\t}\n\n\t\tvar containerEl = $container.get(0);\n\n\t\t// dom is changed if some view from group is not in current container\n\t\tvar domChanged = _(viewsGroup).some(function(view) {\n\t\t\treturn (\n\t\t\t\t!view.attached ||\n\t\t\t\t!view.$container ||\n\t\t\t\tview.$container.get(0) !== containerEl\n\t\t\t);\n\t\t});\n\n\t\tif (domChanged) {\n\t\t\t// re-append views group to container\n\t\t\tvar $els = [];\n\n\t\t\t_(viewsGroup).each(function(view) {\n\t\t\t\tview.$container = $container;\n\t\t\t\t$els.push(view.$el);\n\t\t\t});\n\n\t\t\t// TODO: add some rendering optimizations here\n\n\t\t\t// put all views to $container\n\t\t\t$container.append($els);\n\t\t}\n\t});\n\n\t// return this for chaining\n\treturn this;\n};\n\n/**\n * Set view to views group or replace some view in specified position\n * If index is passed it replace only one view with index in views group\n *\n * @param {Esencia.View} view - view to set\n * @param {String} container - container to set\n * @param {Number} [index] - index of view to replace\n * @return {Esencia.View} - view instance for chaining\n */\n\nView.setView = function(view, container, index) {\n\treturn this._updateViews([view], container, index);\n};\n\n/**\n * Set views to views group or replace some view in specified position\n * If index is passed it replace only one view with index in views group\n *\n * @param {Esencia.View[]} views - views to set\n * @param {String} container - container to set\n * @param {Number} [index] - index of view to replace\n * @return {Esencia.View} - view instance for chaining\n */\n\nView.setViews = function(views, container, index) {\n\treturn this._updateViews(views, container, index);\n};\n\n/**\n * Append view to end of views group\n * This method is alias for insertView without index argument\n *\n * @param {Esencia.View} view - view to append\n * @param {String} container - container of views group\n * @return {Esencia.View} - view instance for chaining\n */\n\nView.appendView = function(view, container) {\n\treturn this._insertViews([view], container);\n};\n\n/**\n * Append views to end of views group\n * This method is alias for insertViews without index argument\n *\n * @param {Esencia.View[]} views - views to append\n * @param {String} container - container of views group\n * @return {Esencia.View} - view instance for chaining\n */\n\nView.appendViews = function(views, container) {\n\treturn this._insertViews(views, container);\n};\n\n/**\n * Prepend view to start of views group\n * This method is alias for insertView with `0` as index argument value\n *\n * @param {Esencia.View} view - view to prepend\n * @param {String} container - container of views group\n * @return {Esencia.View} - view instance for chaining\n */\n\nView.prependView = function(view, container) {\n\treturn this._insertViews([view], container, 0);\n};\n\n/**\n * Prepend views to start of views group\n * This method is alias for insertViews with `0` as index argument value\n *\n * @param {Esencia.View[]} views - view to prepend\n * @param {String} container - container of views group\n\t* @return {Esencia.View} - view instance for chaining\n */\n\nView.prependViews = function(views, container) {\n\treturn this._insertViews(views, container, 0);\n};\n\n/**\n * Insert view to specified position of views group in the container\n * If index is not passed method inserts view to the end of views group (append)\n *\n * @param {Esencia.View} view - view to insert\n * @param {String} container - container of views group\n * @param {Number} [index] - position in views group\n * @return {Esencia.View} - view instance for chaining\n */\n\nView.insertView = function(view, container, index) {\n\treturn this._insertViews([view], container, index);\n};\n\n/**\n * Insert views to specified position of views group container\n * If index is not passed method inserts views to the end of views group\n *\n * @param {Esencia.View[]} views - views to insert\n * @param {String} container - container of views group\n * @param {Number} [index] - position in views group\n * @return {Esencia.View} - view instance for chaining\n */\n\nView.insertViews = function(views, container, index) {\n\treturn this._insertViews(views, container, index);\n};\n\n/**\n * Remove view from views group container by index or view instance\n * If index is passed it remove view in the index position\n *\n * @param {Esencia.View} [view] - view to remove\n * @param {String} container - container of views group\n * @param {Number} [index] - index of view in views group\n * @return {Esencia.View} - view instance for chaining\n */\n\nView.removeView = function(view, container, index) {\n\tif (arguments.length < 2) {\n\t\tthrow new Error('\"view\" or \"index\" arguments must be specified');\n\t}\n\n\tif (_.isString(view)) {\n\t\tindex = container;\n\t\tcontainer = view;\n\t\tview = this.getView(container, index);\n\t\tif (!view) return this;\n\t}\n\n\treturn this._removeViews([view], container);\n};\n\n/**\n * Remove views from views group container\n * If views are passed remove only these views\n * Othervise remove all views from container\n *\n * @param {Esencia.View[]} [views] - views to remove\n * @param {String} container - container of views group\n * @return {Esencia.View} - view instance for chaining\n */\n\nView.removeViews = function(views, container) {\n\tif (_.isString(views)) {\n\t\tcontainer = views;\n\t\tviews = this.getViews(container);\n\t}\n\n\treturn this._removeViews(views, container);\n};\n\n/**\n * Get single view from container by index\n *\n * @param {String} container - container of views group\n * @param {Number} [index] - index of view in views group\n * @return {Esencia.View}\n */\n\nView.getView = function(container, index) {\n\treturn this.getViews(container)[index || 0] || null;\n};\n\n/**\n * Get views group from container\n *\n * @param {String} container - container of views group\n * @return {Esencia.View[]}\n */\n\nView.getViews = function(container) {\n\treturn _.clone(this.views[container]) || [];\n};\n\nView._insertViews = function(views, container, index) {\n\tvar self = this;\n\n\tvar viewsGroup = this.getViews(container);\n\n\t_(views).each(function(view) {\n\t\tif (view.parent) {\n\t\t\tview.parent.removeView(view, view.container);\n\t\t}\n\t});\n\n\tif (viewsGroup.length) {\n\t\t// if index is not specified set it value as last index of views group\n\t\tif (typeof index === 'undefined') {\n\t\t\tindex = viewsGroup.length;\n\t\t}\n\n\t\t// insert views\n\t\tsplice.apply(this.views[container], [index, 0].concat(views));\n\t} else {\n\t\t// if group is empty - set views as whole views group value\n\t\tthis.views[container] = views;\n\t}\n\n\t// set each view parent to current\n\t_(views).each(function(view) {\n\t\tview.parent = self;\n\t\tview.container = container;\n\t});\n\n\tthis.delegateNestedEvents('views', container, views);\n\n\treturn this;\n};\n\nView._updateViews = function(views, container, index) {\n\tvar oldViews;\n\n\tif (typeof index === 'undefined') {\n\t\t// if no index - get all views from group as old\n\t\toldViews = this.getViews(container);\n\t} else {\n\t\t// if index is specified get view from specific position as old\n\t\toldViews = this.getView(container, index);\n\t\toldViews = oldViews ? [oldViews] : [];\n\t}\n\n\t// exit if views equal oldViews\n\tif (\n\t\toldViews.length === views.length &&\n\t\t_(oldViews).all(function(oldView, index) {\n\t\t\treturn oldView === views[index];\n\t\t})\n\t) return this;\n\n\tif (oldViews.length) {\n\t\t// if old views array is not empty remove them from parent view\n\t\tthis._removeViews(oldViews, container);\n\n\t\t// and remove views from DOM\n\t\t_(oldViews).each(function(view) {\n\t\t\tview.remove();\n\t\t});\n\t}\n\n\t// insert new views\n\treturn this._insertViews(views, container, index);\n};\n\nView._removeViews = function(views, container) {\n\tvar self = this;\n\n\tvar viewsGroup = this.getViews(container);\n\n\tif (!viewsGroup.length) return this;\n\n\tvar viewObjs = _(views)\n\t\t.chain()\n\t\t.uniq()\n\t\t.map(function(view) {\n\t\t\treturn {\n\t\t\t\tview: view,\n\t\t\t\tindex: _.indexOf(viewsGroup, view)\n\t\t\t};\n\t\t})\n\t\t.filter(function(viewObj) {\n\t\t\treturn viewObj.index >= 0;\n\t\t})\n\t\t.sortBy(function(viewObj) {\n\t\t\treturn -viewObj.index;\n\t\t})\n\t\t.value();\n\n\tif (!viewObjs.length) return this;\n\n\t_(viewObjs).each(function(viewObj) {\n\t\tvar view = viewObj.view;\n\n\t\t// remove item from group\n\t\tsplice.call(self.views[container], viewObj.index, 1);\n\n\t\t// undelegate all nested entity events\n\t\tself.undelegateNestedEvents(view);\n\n\t\t// unset view parent\n\t\tdelete view.parent;\n\t});\n\n\treturn this;\n};\n\n/**\n * Original setElement do undelegateEvents/delegateEvents, we remove it\n * because we have special detach/attach methods for this purpose\n *\n * @override\n * @return {Esencia.View} - view instance for chaining\n */\n\nView.setElement = function(element) {\n\tvar $previousEl = this.$el;\n\n\tthis._setElement(element);\n\n\t// insert html to $el\n\tif ($previousEl && this.$container) {\n\t\t$previousEl.replaceWith(this.$el);\n\t}\n\n\tthis.ensureUI();\n\n\treturn this;\n};\n\nView.ensureUI = function() {\n\tvar self = this;\n\n\tthis.$ui = _(this.ui).mapObject(function(selector) {\n\t\treturn self.$(selector);\n\t});\n\n\treturn this;\n};\n\nView.delegateTriggers = function(triggers) {\n\ttriggers = triggers || _.result(this, 'triggers');\n\tif (!triggers) return this;\n\tvar self = this;\n\tthis.undelegateTriggers();\n\t_(triggers).each(function(event, key) {\n\t\tvar method = function() {\n\t\t\tself.trigger.apply(self, [event].concat(_.toArray(arguments)));\n\t\t};\n\t\tvar match = key.match(delegateEventSplitter);\n\t\tself.delegateTrigger(match[1], match[2], method);\n\t});\n\treturn this;\n};\n\nView.delegateTrigger = function(eventName, selector, listener) {\n\tthis.$el.on(eventName + '.delegateTriggers' + this.cid, selector, listener);\n\treturn this;\n};\n\nView.undelegateTriggers = function() {\n\tif (this.$el) this.$el.off('.delegateTriggers' + this.cid);\n\treturn this;\n};\n\nView.undelegateTrigger = function(eventName, selector, listener) {\n\tthis.$el.off(eventName + '.delegateTriggers' + this.cid, selector, listener);\n\treturn this;\n};\n\nView.delegateNestedEvents = function(type, name, entities) {\n\tif (!_.contains(nestedEntityTypes, type)) {\n\t\tthrow new Error(\n\t\t\t'Wrong entity type \"' + type + '\", available values: ' +\n\t\t\tnestedEntityTypes.join(', ')\n\t\t);\n\t}\n\n\tvar self = this;\n\n\tif (!entities) entities = this[type][name];\n\tif (!entities) return this;\n\tif (!_.isArray(entities)) entities = [entities];\n\tvar listeners = this._nestedEvents[type][name];\n\tif (listeners) {\n\t\tthis.undelegateNestedEvents(entities);\n\n\t\t_(listeners).each(function(listener) {\n\t\t\t_(entities).each(function(entity) {\n\t\t\t\tself.listenTo(entity, listener.eventName, listener.handler);\n\t\t\t});\n\t\t});\n\t}\n\n\treturn this;\n};\n\nView.undelegateNestedEvents = function(entities) {\n\tvar self = this;\n\n\tif (!_.isArray(entities)) entities = [entities];\n\t_(entities).each(function(entity) {\n\t\tself.stopListening(entity);\n\t});\n\n\treturn this;\n};\n\nView._prepareNestedEvents = function() {\n\tvar self = this;\n\n\t// Hash for nested events fast search\n\tthis._nestedEvents = {};\n\t_(nestedEntityTypes).each(function(entityType) {\n\t\tself._nestedEvents[entityType] = {};\n\t});\n\n\t// bind all prefixed events to view then call native delegate events\n\t_(nestedEventTypes).each(function(eventType, index) {\n\t\tvar entityType = nestedEntityTypes[index];\n\t\tvar entityEventsHash = self._nestedEvents[entityType];\n\n\t\t_(self[eventType]).each(function(method, key) {\n\t\t\tif (!_.isFunction(method)) method = self[method];\n\t\t\tif (!method) return;\n\t\t\tvar match = key.match(delegateEventSplitter);\n\t\t\tvar eventName = match[1];\n\t\t\tvar entityNames = match[2].replace(/ *, */g, ',').split(',');\n\t\t\tmethod = _.bind(method, self);\n\n\t\t\t// fill _nestedEvents\n\t\t\t_(entityNames).each(function(entityName) {\n\t\t\t\tentityEventsHash[entityName] = entityEventsHash[entityName] || [];\n\t\t\t\tentityEventsHash[entityName].push({\n\t\t\t\t\teventName: eventName,\n\t\t\t\t\thandler: method\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t});\n};\n\n/**\n * Wrap all non-array view groups to arrays with one element and delegate events\n */\n\nView._prepareViews = function() {\n\tvar self = this;\n\n\t_(this.views).each(function(views, container) {\n\t\tif (!_.isArray(views)) views = [views];\n\n\t\tself.views[container] = views = _(views).map(function(view) {\n\t\t\tif (_.isFunction(view)) view = new view();\n\t\t\treturn view;\n\t\t});\n\t});\n};\n\nView._prepareModels = function() {\n\tvar self = this;\n\n\t_(this.models).each(function(model, name) {\n\t\tif (_.isFunction(model)) self.models[name] = new model();\n\t});\n\n\tif (this.model) {\n\t\tif (_.isFunction(this.model)) this.model = new this.model();\n\t\tthis.models[''] = this.model;\n\t}\n};\n\nView._prepareCollections = function() {\n\tvar self = this;\n\n\t_(this.collections).each(function(collection, name) {\n\t\tif (_.isFunction(collection)) self.collections[name] = new collection();\n\t});\n\n\tif (this.collection) {\n\t\tif (_.isFunction(this.collection)) this.collection = new this.collection();\n\t\tthis.collections[''] = this.collection;\n\t}\n};\n\n/**\n * Attach all nested views\n *\n * @return {Esencia.View} - view instance for chaining\n */\n\nView.attachViews = function(options) {\n\toptions = options || {};\n\n\t// iterate by each nested views groups\n\t_(this.views).each(function(viewsGroup, container) {\n\t\tif (isContainerSkipped(container, options)) return;\n\n\t\t// return if views group is empty\n\t\tif (!viewsGroup.length) return;\n\n\t\t// call attach method for each nested view from views group\n\t\t_(viewsGroup).each(function(view) {\n\t\t\t// recursive attach all nested views\n\t\t\tview.attachViews(_.omit(options, 'include', 'exclude'));\n\n\t\t\t// attach current view\n\t\t\tview.attach();\n\t\t});\n\t});\n\n\t// return this for chaining\n\treturn this;\n};\n\n/**\n * afterAttach is empty by default\n * It called after attach call, could be verriden to add some specific logic\n * for DOM manipulations\n *\n * @return {Esencia.View} - view instance for chaining\n */\n\nView.afterAttach = function() {\n\treturn this;\n};\n\n/**\n * Attach new view to current view $el\n *\n * @return {Esencia.View} - view instance for chaining\n */\n\nView.attach = function() {\n\t// return if current view is already attached\n\tif (this.attached) return this;\n\n\t// detach previous view\n\tvar previousView = this.$el.data('esencia-view');\n\tif (previousView) previousView.detach();\n\n\t// attach current view and set attr\n\tthis.$el.data('esencia-view', this).attr('esencia-view', this.cid);\n\n\t// enable all DOM events\n\tthis.delegateEvents();\n\n\tthis.delegateTriggers();\n\n\tthis.attached = true;\n\n\t// do some user afterAttach actions\n\tthis.afterAttach();\n\n\t// trigger attach event\n\tthis.trigger('esencia:attach');\n\n\treturn this;\n};\n\n/**\n * Detach all nested views\n *\n * @return {Esencia.View} - view instance for chaining\n */\n\nView.detachViews = function() {\n\t// iterate by each views groups\n\t_(this.views).each(function(viewsGroup) {\n\t\t// return if views group is empty\n\t\tif (!viewsGroup.length) return;\n\n\t\t// call detach method for each nested view from views group\n\t\t_(viewsGroup).each(function(view) {\n\t\t\t// recursive detach all nested views\n\t\t\tview.detachViews();\n\n\t\t\t// detach current view\n\t\t\tview.detach();\n\t\t});\n\t});\n\n\t// return this for chaining\n\treturn this;\n};\n\n/**\n * beforeDetach is empty by default\n * It called before detach method call, could be overriden to add some specific\n * logic before view detach from dom\n *\n * @return {Esencia.View} - view instance for chaining\n */\n\nView.beforeDetach = function() {\n\treturn this;\n};\n\n/**\n * Detach view from current view $el\n *\n * @return {Esencia.View} - view instance for chaining\n */\n\nView.detach = function() {\n\t// return if current view is not already attached\n\tif (!this.attached) return this;\n\n\t// trigger detach event\n\tthis.trigger('esencia:detach');\n\n\t// do some user beforeDetach actions\n\tthis.beforeDetach();\n\n\t// remove attr and data from $el\n\tthis.$el.removeData('esencia-view').removeAttr('esencia-view');\n\n\t// disable all DOM events\n\tthis.undelegateEvents();\n\n\tthis.undelegateTriggers();\n\n\tthis.attached = false;\n\n\t// return this for chaining\n\treturn this;\n};\n\n/**\n * Remove view from parent container and remove element from DOM\n */\n\nView.remove = function() {\n\t// remove current view from parent view container\n\tif (this.parent) {\n\t\tthis.parent.removeView(this, this.container);\n\t}\n\n\t// detach all nested views first\n\tthis.detachViews();\n\n\t// detach current view\n\tthis.detach();\n\n\t// remove DOM element\n\treturn backbone.View.prototype.remove.call(this);\n};\n\n/**\n * Get view, that attached to closest element with attr `esencia-view`\n *\n * @param {String | $} selector\n * @return {Esencia.View | Null}\n */\n\nView.getClosestView = function(selector) {\n\tvar $selector = $(selector);\n\n\tif (!$selector.is('[esencia-view]')) {\n\t\t$selector = $selector.closest('[esencia-view]');\n\t}\n\n\treturn $selector.length ? $selector.data('esencia-view') : null;\n};\n\nmodule.exports = backbone.View.extend(View);\n","'use strict';\n\nvar backbone = require('backbone');\nvar _ = require('underscore');\nvar Router = require('./classes/router');\nvar Collection = require('./classes/collection');\nvar Model = require('./classes/model');\nvar View = require('./classes/view');\nvar ComponentsManager = require('./classes/componentsManager');\nvar componentsManager = require('./utils/componentsManager');\nvar extend = require('./utils/extend');\n\nvar Esencia = exports;\n\n// Allow the `Esencia` object to serve as a global event bus, for folks who\n// want global \"pubsub\" in a convenient place.\n_.extend(Esencia, backbone.Events);\n\n// Export some Backbone fields\nvar backboneFields = ['Events', 'History', 'history'];\n_.extend(Esencia, _.pick(backbone, backboneFields));\n\n// Export all Esencia classes\n_.extend(Esencia, {\n\tRouter: Router,\n\tCollection: Collection,\n\tModel: Model,\n\tView: View,\n\tComponentsManager: ComponentsManager\n});\n\n// Export the default Esencia.componentsManager\nEsencia.componentsManager = componentsManager;\n\n// Export extend helper for subclassing\nEsencia.extend = extend;\n","'use strict';\n\nvar ComponentsManager = require('../classes/componentsManager');\n\n// Create the default Esencia.componentsManager\nmodule.exports = new ComponentsManager();\n","'use strict';\n\nvar _ = require('underscore');\n\n// Default http method type for exec methods\nvar DEFAULT_EXEC_TYPE = 'PUT';\n\n// Throw an error when a URL is needed, and none is supplied.\nvar urlError = function() {\n\tthrow new Error('A `url` property or function must be specified');\n};\n\n// Wrap an optional error callback with a fallback error event.\nexports.wrapError = function(model, options) {\n\tvar error = options.error;\n\toptions.error = function(resp) {\n\t\tif (error) error.call(options.context, model, resp, options);\n\t\tmodel.trigger('error', model, resp, options);\n\t};\n};\n\nexports.prepareOptions = function(method, model, options) {\n\toptions = _.extend({\n\t\ttype: DEFAULT_EXEC_TYPE,\n\t\tdataType: 'json',\n\t\tcontentType: 'application/json',\n\t\tprocessData: false\n\t}, options);\n\n\t// Ensure that we have a URL and add method name to it\n\tif (!options.url) {\n\t\tvar url = _.result(model, 'url') || urlError();\n\t\toptions.url = url.replace(/[^\\/]$/, '$&/') + method;\n\t}\n\n\t// stringify data to json\n\tif (options.data && _.isObject(options.data) && !options.processData) {\n\t\toptions.data = JSON.stringify(options.data);\n\t}\n\n\treturn options;\n};\n\n// HTTP type to backbone sync methods map\nvar baseMethodsMap = {\n\t'POST': 'create',\n\t'PUT': 'update',\n\t'PATCH': 'patch',\n\t'DELETE': 'delete',\n\t'GET': 'read'\n};\n\nexports.getFakeBaseMethod = function(options) {\n\treturn baseMethodsMap[options.type.toUpperCase()];\n};\n","'use strict';\n\nvar backbone = require('backbone');\n\n// There is no good exports of extend method from backbone.\n// Take it from View because no other ways\nmodule.exports = backbone.View.extend;\n"],"sourceRoot":"."}