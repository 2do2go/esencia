{"version":3,"sources":["esencia.js","lib/classes/collection.js","lib/classes/componentsManager.js","lib/classes/model.js","lib/classes/router.js","lib/classes/view.js","lib/esencia.js","lib/utils/componentsManager.js","lib/utils/exec.js","lib/utils/extend.js"],"names":["factory","define","amd","exports","module","require","this","Esencia","_","Backbone","__external__","__external_Backbone","_require","id","cache","modules","call","backbone","execUtils","Collection","sync","method","collection","options","prepareOptions","getFakeBaseMethod","prototype","exec","extend","parse","success","resp","fetch","reset","context","trigger","wrapError","isTreeNodeChanged","oldNode","node","Boolean","component","name","view","View","isWaiting","attached","isUnchanged","ComponentsManager","pick","componentManagerOptions","components","tree","autoAddRoot","_addRoot","initialize","apply","arguments","componentOptions","Events","rootEl","defaultParent","RootView","el","add","parent","defaults","process","has","uniqueId","isString","Error","isNull","container","get","remove","names","callback","isArray","noop","_buildTree","oldTree","_applyTree","children","self","buildHashedTree","length","parentNames","nodes","chain","uniq","map","push","compact","value","each","find","child","isEmpty","filter","some","params","afterCallback","after","iterate","oldChildren","setData","setView","renderViews","include","attachViews","exclude","union","render","index","detach","result","listenToOnce","Model","model","serverAttrs","set","componentsManager","Router","namedParameters","nowhereUrl","autoloadModules","modulesPath","defaultModuleName","onModuleError","routerOptions","constructor","urlParams","route","setModule","_populateUrlParams","key","isObject","isFunction","extendOwn","url","componentNames","pluck","join","args","defaultUrlParams","_defaultMiddleware","navigate","fragment","force","replace","omit","qs","toFragment","val","undefined","next","middleware","defaultMiddleware","moduleName","split","identity","moduleInit","isContainerSkipped","contains","$","splice","Array","delegateEventSplitter","nestedEventTypes","templateHelpers","waitsCounter","waitAvailable","viewOptions","views","collections","models","data","template","_prepareEvents","_prepareViews","wait","delegateNestedEvents","once","defer","_render","html","renderTemplate","getTemplateData","$el","setElement","_ensureElement","$container","attach","viewsGroup","first","containerEl","domChanged","$els","append","_updateViews","setViews","appendView","_insertViews","appendViews","prependView","prependViews","insertView","insertViews","removeView","getView","_removeViews","removeViews","getViews","clone","concat","oldViews","all","oldView","viewObjs","indexOf","viewObj","sortBy","undelegateNestedEvents","element","$previousEl","_setElement","replaceWith","delegateEvents","events","type","entities","listeners","_nestedEventsHash","listener","entity","listenTo","eventName","handler","stopListening","typeEventsHash","match","entityKeys","bind","entityKey","afterAttach","previousView","attr","cid","detachViews","beforeDetach","removeData","removeAttr","undelegateEvents","getClosestView","selector","$selector","is","closest","backboneFields","DEFAULT_EXEC_TYPE","urlError","error","dataType","contentType","processData","JSON","stringify","baseMethodsMap","POST","PUT","PATCH","DELETE","GET","toUpperCase"],"mappings":"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","file":"esencia.min.js","sourcesContent":["(function (factory) {\n    if (typeof define === 'function' && define.amd) {\n        define([\n            'underscore',\n            'backbone'\n        ], factory);\n    } else if (typeof exports === 'object') {\n        module.exports = factory(require('underscore'), require('backbone'));\n    } else {\n        this.Esencia = factory(_, Backbone);\n    }\n}(function (__external__, __external_Backbone) {\n    var global = this, define;\n    function _require(id) {\n        var module = _require.cache[id];\n        if (!module) {\n            var exports = {};\n            module = _require.cache[id] = {\n                id: id,\n                exports: exports\n            };\n            _require.modules[id].call(exports, module, exports);\n        }\n        return module.exports;\n    }\n    _require.cache = [];\n    _require.modules = [\n        function (module, exports) {\n            'use strict';\n            var _ = _require(10);\n            var backbone = _require(9);\n            var execUtils = _require(7);\n            var Collection = {};\n            Collection.sync = function (method, collection, options) {\n                options = execUtils.prepareOptions(method, collection, options);\n                method = execUtils.getFakeBaseMethod(options);\n                return backbone.Collection.prototype.sync.call(this, method, collection, options);\n            };\n            Collection.exec = function (method, options) {\n                options = _.extend({ parse: true }, options);\n                var collection = this;\n                var success = options.success;\n                options.success = function (resp) {\n                    if (options.fetch)\n                        collection[options.reset ? 'reset' : 'set'](resp, options);\n                    if (success)\n                        success.call(options.context, collection, resp, options);\n                    collection.trigger('exec:' + method, collection, resp, options);\n                };\n                execUtils.wrapError(this, options);\n                return this.sync(method, this, options);\n            };\n            module.exports = backbone.Collection.extend(Collection);\n        },\n        function (module, exports) {\n            'use strict';\n            var _ = _require(10);\n            var backbone = _require(9);\n            var View = _require(4);\n            var extend = _require(8);\n            function isTreeNodeChanged(oldNode, node) {\n                return Boolean(!oldNode || oldNode.component.name !== node.component.name || !oldNode.view || oldNode.view instanceof node.component.View === false || oldNode.view.isWaiting() || !oldNode.view.attached || !oldNode.view.isUnchanged());\n            }\n            var ComponentsManager = function (options) {\n                _.extend(this, _.pick(options, componentManagerOptions));\n                this.options = options;\n                this.components = {};\n                this.tree = [];\n                if (this.autoAddRoot)\n                    this._addRoot();\n                this.initialize.apply(this, arguments);\n            };\n            var componentManagerOptions = [\n                    'rootEl',\n                    'autoAddRoot',\n                    'defaultParent'\n                ];\n            var componentOptions = [\n                    'name',\n                    'parent',\n                    'container',\n                    'View',\n                    'models',\n                    'collections',\n                    'viewOptions'\n                ];\n            _.extend(ComponentsManager.prototype, backbone.Events, {\n                rootEl: 'html',\n                autoAddRoot: true,\n                defaultParent: null,\n                initialize: function () {\n                },\n                _addRoot: function () {\n                    var RootView = View.extend({ el: this.rootEl });\n                    this.add({\n                        name: '__ROOT_COMPONENT__',\n                        parent: null,\n                        View: RootView\n                    });\n                },\n                add: function (options) {\n                    options = _.defaults({}, options, {\n                        parent: this.defaultParent,\n                        process: false\n                    });\n                    var component = _.pick(options, componentOptions);\n                    if (!_.has(component, 'name')) {\n                        component.name = _.uniqueId('__COMPONENT_') + '__';\n                    }\n                    if (!_.isString(component.name)) {\n                        throw new Error('Component `name` option should be a string');\n                    }\n                    if (_.has(this.components, component.name)) {\n                        throw new Error('Duplicate component with name \"' + component.name + '\"');\n                    }\n                    if (!_.has(component, 'View')) {\n                        throw new Error('Component `View` option is required');\n                    }\n                    if (!_.isString(component.parent) && !_.isNull(component.parent)) {\n                        throw new Error('Component `parent` option should be a string or null');\n                    }\n                    if (_.isNull(component.parent) && _.has(component, 'container')) {\n                        throw new Error('Root component could not have a container');\n                    }\n                    if (_.isString(component.parent) && !_.has(component, 'container')) {\n                        throw new Error('Component `container` option is required for components with parent');\n                    }\n                    if (_.has(component, 'container') && !_.isString(component.container)) {\n                        throw new Error('Component `container` option should be a string');\n                    }\n                    this.components[component.name] = component;\n                    if (_.isNull(this.defaultParent) && _.isNull(component.parent)) {\n                        this.defaultParent = component.name;\n                    }\n                    if (options.process) {\n                        this.process(component.name);\n                    }\n                    return component;\n                },\n                get: function (name) {\n                    return this.components[name] || null;\n                },\n                remove: function (name) {\n                    delete this.components[name];\n                },\n                process: function (names, callback) {\n                    if (!_.isArray(names))\n                        names = [names];\n                    callback = callback || _.noop;\n                    var tree = this._buildTree(names);\n                    var oldTree = this.tree;\n                    this.tree = [];\n                    this._applyTree({\n                        parent: { children: this.tree },\n                        oldTree: oldTree,\n                        tree: tree\n                    }, callback);\n                },\n                _buildTree: function (names) {\n                    var self = this;\n                    var buildHashedTree = function (names, tree) {\n                        if (!names.length)\n                            return tree;\n                        var parentNames = [];\n                        var nodes = _(names).chain().uniq().map(function (name) {\n                                var component = self.components[name];\n                                if (!component) {\n                                    throw new Error('Unknown component with name \"' + name + '\"');\n                                }\n                                if (_.has(tree, component.name))\n                                    return null;\n                                var node = {\n                                        component: component,\n                                        children: []\n                                    };\n                                if (_.isString(component.parent)) {\n                                    parentNames.push(component.parent);\n                                }\n                                tree[component.name] = node;\n                                return node;\n                            }).compact().value();\n                        tree = buildHashedTree(parentNames, tree);\n                        _(nodes).each(function (node) {\n                            if (_.isString(node.component.parent)) {\n                                if (node.component.container && _(tree[node.component.parent].children).find(function (child) {\n                                        return child.component.container === node.component.container;\n                                    })) {\n                                    throw new Error('Components could not have same container and parent in one tree');\n                                }\n                                tree[node.component.parent].children.push(node);\n                            }\n                        });\n                        return tree;\n                    };\n                    var tree = buildHashedTree(names, {});\n                    if (_.isEmpty(tree)) {\n                        throw new Error('Components tree is empty');\n                    }\n                    tree = _(tree).filter(function (node) {\n                        return _.isNull(node.component.parent);\n                    });\n                    if (!tree.length) {\n                        throw new Error('Components tree should have at least one root node');\n                    }\n                    if (_(tree).some(function (node) {\n                            return node.component.container;\n                        })) {\n                        throw new Error('Root component could not have a container');\n                    }\n                    return tree;\n                },\n                _applyTree: function (params, callback) {\n                    var self = this;\n                    var parent = params.parent;\n                    var afterCallback = _.after(params.tree.length, callback);\n                    var iterate = function (oldNode, node) {\n                        var container = node.component.container;\n                        var children = node.children;\n                        var oldChildren = oldNode ? oldNode.children : [];\n                        node.view.setData();\n                        if (!node.view.attached && container) {\n                            parent.view.setView(node.view, container).renderViews({ include: [container] }).attachViews({ include: [container] });\n                        } else {\n                            var exclude = _.union(_(children).chain().map(function (child) {\n                                    return child.component.container;\n                                }).compact().value(), _(oldChildren).chain().map(function (child) {\n                                    return child.component.container;\n                                }).compact().value());\n                            node.view.render({ exclude: exclude });\n                        }\n                        node.children = [];\n                        parent.children.push(node);\n                        self._applyTree({\n                            parent: node,\n                            oldTree: oldChildren,\n                            tree: children\n                        }, afterCallback);\n                    };\n                    _(params.tree).each(function (node, index) {\n                        var oldNode = params.oldTree[index] || null;\n                        if (isTreeNodeChanged(oldNode, node)) {\n                            if (oldNode && oldNode.view) {\n                                if (oldNode.component.container) {\n                                    if (oldNode.component.container !== node.component.container) {\n                                        oldNode.view.remove();\n                                    }\n                                } else {\n                                    oldNode.view.detach();\n                                }\n                            }\n                            node.view = new node.component.View(_(node.component).chain().pick('models', 'collections').extend(_.result(node.component, 'viewOptions')).value());\n                            if (node.view.isWaiting()) {\n                                self.listenToOnce(node.view, 'resolve', function () {\n                                    iterate(null, node);\n                                });\n                            } else {\n                                iterate(null, node);\n                            }\n                        } else {\n                            node.view = oldNode.view;\n                            iterate(oldNode, node);\n                        }\n                    });\n                }\n            });\n            ComponentsManager.extend = extend;\n            module.exports = ComponentsManager;\n        },\n        function (module, exports) {\n            'use strict';\n            var _ = _require(10);\n            var backbone = _require(9);\n            var execUtils = _require(7);\n            var Model = {};\n            Model.sync = function (method, model, options) {\n                options = execUtils.prepareOptions(method, model, options);\n                method = execUtils.getFakeBaseMethod(options);\n                return backbone.Model.prototype.sync.call(this, method, model, options);\n            };\n            Model.exec = function (method, options) {\n                options = _.extend({ parse: true }, options);\n                var model = this;\n                var success = options.success;\n                options.success = function (resp) {\n                    if (options.fetch) {\n                        var serverAttrs = options.parse ? model.parse(resp, options) : resp;\n                        if (!model.set(serverAttrs, options))\n                            return false;\n                    }\n                    if (success)\n                        success.call(options.context, model, resp, options);\n                    model.trigger('exec:' + method, model, resp, options);\n                };\n                execUtils.wrapError(this, options);\n                return this.sync(method, this, options);\n            };\n            module.exports = backbone.Model.extend(Model);\n        },\n        function (module, exports) {\n            'use strict';\n            var _ = _require(10);\n            var backbone = _require(9);\n            var componentsManager = _require(6);\n            var Router = {\n                    componentsManager: componentsManager,\n                    namedParameters: false,\n                    nowhereUrl: '___',\n                    autoloadModules: true,\n                    modulesPath: 'modules/',\n                    defaultModuleName: 'main',\n                    onModuleError: function () {\n                    }\n                };\n            var routerOptions = [\n                    'componentsManager',\n                    'namedParameters',\n                    'nowhereUrl',\n                    'autoloadModules',\n                    'modulesPath',\n                    'defaultModuleName',\n                    'onModuleError'\n                ];\n            Router.constructor = function (options) {\n                options = options || {};\n                _.extend(this, _.pick(options, routerOptions));\n                this.options = options;\n                this.urlParams = {};\n                this.modules = {};\n                backbone.Router.namedParameters = this.namedParameters;\n                backbone.Router.apply(this, arguments);\n                if (options.autoloadModules) {\n                    this.route('*url', function (params) {\n                        this.setModule(params);\n                    });\n                }\n            };\n            Router._populateUrlParams = function () {\n                var self = this;\n                var key;\n                for (key in this.urlParams) {\n                    if (_.has(this.urlParams, key)) {\n                        delete this.urlParams[key];\n                    }\n                }\n                _(arguments).chain().filter(_.isObject).each(function (params) {\n                    params = _.isFunction(params) ? params.call(self) : params;\n                    _.extendOwn(self.urlParams, params);\n                });\n                return this.urlParams;\n            };\n            Router.component = function (options) {\n                return this.componentsManager.add(options);\n            };\n            Router.route = function (url, options, callback) {\n                var self = this;\n                if (_.isFunction(options)) {\n                    callback = options;\n                    options = {};\n                }\n                if (!_.isObject(options)) {\n                    options = { name: options };\n                }\n                var name = '';\n                if (_.has(options, 'components') || _.has(options, 'component')) {\n                    var components = _(options.components || [options.component]).map(function (componentOptions) {\n                            return self.component(componentOptions);\n                        });\n                    var componentNames = _.pluck(components, 'name');\n                    name = componentNames.join(',');\n                    callback = function () {\n                        self.componentsManager.process(componentNames);\n                    };\n                }\n                name = options.name || name;\n                backbone.Router.prototype.route.call(this, url, name, function () {\n                    var args = arguments;\n                    self._populateUrlParams(options.defaultUrlParams, args[0]);\n                    self._defaultMiddleware({\n                        url: url,\n                        name: name,\n                        callback: callback\n                    }, function () {\n                        callback.apply(self, args);\n                    });\n                });\n            };\n            Router.navigate = function (fragment, options) {\n                options = options || {};\n                if (options.force) {\n                    this.navigate(this.nowhereUrl, {\n                        replace: options.replace,\n                        trigger: false\n                    });\n                    options = _(options).chain().omit('force').extend({ replace: true }).value();\n                    return this.navigate(fragment, options);\n                }\n                options = _.defaults({}, options, {\n                    trigger: true,\n                    params: {}\n                });\n                var qs = options.qs;\n                if (this.toFragment && qs) {\n                    _(qs).each(function (val, key, qs) {\n                        if (val === undefined || val === null)\n                            delete qs[key];\n                    });\n                    fragment = this.toFragment(fragment, qs);\n                    delete options.qs;\n                }\n                backbone.Router.prototype.navigate.call(this, fragment, options);\n            };\n            Router._defaultMiddleware = function (route, next) {\n                next();\n            };\n            Router.middleware = function (middleware) {\n                var self = this;\n                var defaultMiddleware = this._defaultMiddleware;\n                this._defaultMiddleware = function (route, next) {\n                    defaultMiddleware.call(self, route, function () {\n                        middleware.call(self, route, next);\n                    });\n                };\n                return this;\n            };\n            Router.setModule = function (params) {\n                var self = this;\n                var url = params.url;\n                delete params.url;\n                var moduleName = _(url.split('/')).find(_.identity) || this.defaultModuleName;\n                require([this.modulesPath + moduleName], function (moduleInit) {\n                    if (!self.modules[moduleName]) {\n                        moduleInit(self);\n                        self.modules[moduleName] = true;\n                        self.navigate(url, {\n                            replace: true,\n                            force: true,\n                            qs: params\n                        });\n                    }\n                }, this.onModuleError);\n            };\n            module.exports = backbone.Router.extend(Router);\n        },\n        function (module, exports) {\n            'use strict';\n            var _ = _require(10);\n            var backbone = _require(9);\n            var $ = backbone.$;\n            var splice = Array.prototype.splice;\n            var delegateEventSplitter = /^(\\S+)\\s*(.*)$/;\n            var nestedEventTypes = [\n                    'views',\n                    'collections',\n                    'models'\n                ];\n            function isContainerSkipped(container, options) {\n                return Boolean(options.exclude && _.contains(options.exclude, container) || options.include && !_.contains(options.include, container));\n            }\n            var View = {\n                    templateHelpers: {},\n                    waitsCounter: 0,\n                    waitAvailable: true,\n                    attached: false\n                };\n            var viewOptions = [\n                    'views',\n                    'collections',\n                    'models',\n                    'data',\n                    'events',\n                    'router',\n                    'templateHelpers'\n                ];\n            View.constructor = function (options) {\n                var self = this;\n                options = options || {};\n                this.views = {};\n                this.collections = {};\n                this.models = {};\n                this.data = {};\n                _.extend(this, _.pick(options, viewOptions));\n                this.options = options;\n                if (this.template && !_.isFunction(this.template)) {\n                    throw new Error('View `template` option should be a function');\n                }\n                this._prepareEvents();\n                this._prepareViews();\n                backbone.View.apply(this, arguments);\n                _(this.views).each(function (views) {\n                    _(views).each(function (view) {\n                        if (view.isWaiting()) {\n                            self.listenToOnce(view, 'resolve', self.wait());\n                        }\n                    });\n                });\n                this.waitAvailable = false;\n                _(this.collections).each(function (collection, key) {\n                    self.delegateNestedEvents('collections', key, collection);\n                });\n                _(this.models).each(function (model, key) {\n                    self.delegateNestedEvents('models', key, model);\n                });\n            };\n            View.setData = function (data) {\n                if (data)\n                    this.data = data;\n                return this;\n            };\n            View.isUnchanged = function () {\n                return true;\n            };\n            View.wait = function () {\n                if (!this.waitAvailable) {\n                    throw new Error('Method .wait() is available only in the constructor');\n                }\n                var self = this;\n                this.waitsCounter++;\n                return _.once(function () {\n                    _.defer(function () {\n                        self.waitsCounter--;\n                        if (!self.isWaiting()) {\n                            self.trigger('resolve');\n                        }\n                    });\n                });\n            };\n            View.isWaiting = function () {\n                return this.waitsCounter > 0;\n            };\n            View._render = function (options) {\n                if (this.isWaiting())\n                    return this;\n                options = options || {};\n                if (this.template) {\n                    if (options.force || !this.attached || !this.isUnchanged()) {\n                        this.detach();\n                        var html = this.renderTemplate(this.template, this.getTemplateData());\n                        var $el = $(html);\n                        if (!$el.length) {\n                            throw new Error('View template produces empty html');\n                        }\n                        if ($el.length > 1) {\n                            throw new Error('View template produces html with more than one root elements');\n                        }\n                        this.setElement($el);\n                    }\n                } else {\n                    if (!this.$el.length)\n                        this._ensureElement();\n                }\n                this.renderViews(options);\n                if (!this.parent || this.$container) {\n                    this.attachViews(options);\n                    this.attach();\n                }\n                return this;\n            };\n            View.render = function (options) {\n                return this._render(options);\n            };\n            View.getTemplateData = function () {\n                return this.data;\n            };\n            View.renderTemplate = function (template, data) {\n                data = _(this).chain().result('templateHelpers').extend(data).value();\n                return template(data);\n            };\n            View.renderViews = function (options) {\n                var self = this;\n                _(this.views).each(function (viewsGroup, container) {\n                    if (isContainerSkipped(container, options))\n                        return;\n                    if (!viewsGroup.length)\n                        return;\n                    _(viewsGroup).each(function (view) {\n                        view.render(_.omit(options, 'include', 'exclude'));\n                    });\n                    var $container = container ? self.$(container).first() : self.$el;\n                    if (!$container.length) {\n                        throw new Error('Container \"' + container + '\" is not found');\n                    }\n                    var containerEl = $container.get(0);\n                    var domChanged = _(viewsGroup).some(function (view) {\n                            return !view.attached || !view.$container || view.$container.get(0) !== containerEl;\n                        });\n                    if (domChanged) {\n                        var $els = [];\n                        _(viewsGroup).each(function (view) {\n                            view.$container = $container;\n                            $els.push(view.$el);\n                        });\n                        $container.append($els);\n                    }\n                });\n                return this;\n            };\n            View.setView = function (view, container, index) {\n                return this._updateViews([view], container, index);\n            };\n            View.setViews = function (views, container, index) {\n                return this._updateViews(views, container, index);\n            };\n            View.appendView = function (view, container) {\n                return this._insertViews([view], container);\n            };\n            View.appendViews = function (views, container) {\n                return this._insertViews(views, container);\n            };\n            View.prependView = function (view, container) {\n                return this._insertViews([view], container, 0);\n            };\n            View.prependViews = function (views, container) {\n                return this._insertViews(views, container, 0);\n            };\n            View.insertView = function (view, container, index) {\n                return this._insertViews([view], container, index);\n            };\n            View.insertViews = function (views, container, index) {\n                return this._insertViews(views, container, index);\n            };\n            View.removeView = function (view, container, index) {\n                if (arguments.length < 2) {\n                    throw new Error('\"view\" or \"index\" arguments must be specified');\n                }\n                if (_.isString(view)) {\n                    index = container;\n                    container = view;\n                    view = this.getView(container, index);\n                    if (!view)\n                        return this;\n                }\n                return this._removeViews([view], container);\n            };\n            View.removeViews = function (views, container) {\n                if (_.isString(views)) {\n                    container = views;\n                    views = this.getViews(container);\n                }\n                return this._removeViews(views, container);\n            };\n            View.getView = function (container, index) {\n                return this.getViews(container)[index || 0] || null;\n            };\n            View.getViews = function (container) {\n                return _.clone(this.views[container]) || [];\n            };\n            View._insertViews = function (views, container, index) {\n                var self = this;\n                var viewsGroup = this.getViews(container);\n                _(views).each(function (view) {\n                    if (view.parent) {\n                        view.parent.removeView(view, view.container);\n                    }\n                });\n                if (viewsGroup.length) {\n                    if (typeof index === 'undefined') {\n                        index = viewsGroup.length;\n                    }\n                    splice.apply(this.views[container], [\n                        index,\n                        0\n                    ].concat(views));\n                } else {\n                    this.views[container] = views;\n                }\n                _(views).each(function (view) {\n                    view.parent = self;\n                    view.container = container;\n                });\n                this.delegateNestedEvents('views', container, views);\n                return this;\n            };\n            View._updateViews = function (views, container, index) {\n                var oldViews;\n                if (typeof index === 'undefined') {\n                    oldViews = this.getViews(container);\n                } else {\n                    oldViews = this.getView(container, index);\n                    oldViews = oldViews ? [oldViews] : [];\n                }\n                if (oldViews.length === views.length && _(oldViews).all(function (oldView, index) {\n                        return oldView === views[index];\n                    }))\n                    return this;\n                if (oldViews.length) {\n                    this._removeViews(oldViews, container);\n                    _(oldViews).each(function (view) {\n                        view.remove();\n                    });\n                }\n                return this._insertViews(views, container, index);\n            };\n            View._removeViews = function (views, container) {\n                var self = this;\n                var viewsGroup = this.getViews(container);\n                if (!viewsGroup.length)\n                    return this;\n                var viewObjs = _(views).chain().uniq().map(function (view) {\n                        return {\n                            view: view,\n                            index: _.indexOf(viewsGroup, view)\n                        };\n                    }).filter(function (viewObj) {\n                        return viewObj.index >= 0;\n                    }).sortBy(function (viewObj) {\n                        return -viewObj.index;\n                    }).value();\n                if (!viewObjs.length)\n                    return this;\n                _(viewObjs).each(function (viewObj) {\n                    var view = viewObj.view;\n                    splice.call(self.views[container], viewObj.index, 1);\n                    self.undelegateNestedEvents(view);\n                    delete view.parent;\n                });\n                return this;\n            };\n            View.setElement = function (element) {\n                var $previousEl = this.$el;\n                this._setElement(element);\n                if ($previousEl && this.$container) {\n                    $previousEl.replaceWith(this.$el);\n                }\n                return this;\n            };\n            View.delegateEvents = function (events) {\n                events = events || _.result(this, 'events');\n                if (!events)\n                    return this;\n                events = _.omit(events, nestedEventTypes);\n                return backbone.View.prototype.delegateEvents.call(this, events);\n            };\n            View.delegateNestedEvents = function (type, key, entities) {\n                var self = this;\n                if (!_.isArray(entities))\n                    entities = [entities];\n                var listeners = this._nestedEventsHash[type][key];\n                if (listeners) {\n                    _(listeners).each(function (listener) {\n                        _(entities).each(function (entity) {\n                            self.listenTo(entity, listener.eventName, listener.handler);\n                        });\n                    });\n                }\n                return this;\n            };\n            View.undelegateNestedEvents = function (entities) {\n                var self = this;\n                if (!_.isArray(entities))\n                    entities = [entities];\n                _(entities).each(function (entity) {\n                    self.stopListening(entity);\n                });\n                return this;\n            };\n            View._prepareEvents = function (events) {\n                var self = this;\n                this._nestedEventsHash = {};\n                _(nestedEventTypes).each(function (type) {\n                    self._nestedEventsHash[type] = {};\n                });\n                events = events || _.result(this, 'events');\n                if (!events)\n                    return;\n                _(nestedEventTypes).each(function (type) {\n                    var typeEventsHash = self._nestedEventsHash[type];\n                    if (!_.has(events, type) || !_.isObject(events[type]))\n                        return;\n                    _(events[type]).each(function (method, key) {\n                        if (!_.isFunction(method))\n                            method = self[method];\n                        if (!method)\n                            return;\n                        var match = key.match(delegateEventSplitter);\n                        var eventName = match[1];\n                        var entityKeys = match[2].replace(/ *, */g, ',').split(',');\n                        method = _.bind(method, self);\n                        _(entityKeys).each(function (entityKey) {\n                            typeEventsHash[entityKey] = typeEventsHash[entityKey] || [];\n                            typeEventsHash[entityKey].push({\n                                eventName: eventName,\n                                handler: method\n                            });\n                        });\n                    });\n                });\n            };\n            View._prepareViews = function () {\n                var self = this;\n                _(this.views).each(function (views, container) {\n                    if (!_.isArray(views))\n                        views = [views];\n                    self.views[container] = views;\n                    self.delegateNestedEvents('views', container, views);\n                });\n            };\n            View.attachViews = function (options) {\n                options = options || {};\n                _(this.views).each(function (viewsGroup, container) {\n                    if (isContainerSkipped(container, options))\n                        return;\n                    if (!viewsGroup.length)\n                        return;\n                    _(viewsGroup).each(function (view) {\n                        view.attachViews(_.omit(options, 'include', 'exclude'));\n                        view.attach();\n                    });\n                });\n                return this;\n            };\n            View.afterAttach = function () {\n                return this;\n            };\n            View.attach = function () {\n                if (this.attached)\n                    return this;\n                var previousView = this.$el.data('esencia-view');\n                if (previousView)\n                    previousView.detach();\n                this.$el.data('esencia-view', this).attr('esencia-view', this.cid);\n                this.delegateEvents();\n                this.attached = true;\n                this.afterAttach();\n                this.trigger('attach');\n                return this;\n            };\n            View.detachViews = function () {\n                _(this.views).each(function (viewsGroup) {\n                    if (!viewsGroup.length)\n                        return;\n                    _(viewsGroup).each(function (view) {\n                        view.detachViews();\n                        view.detach();\n                    });\n                });\n                return this;\n            };\n            View.beforeDetach = function () {\n                return this;\n            };\n            View.detach = function () {\n                if (!this.attached)\n                    return this;\n                this.trigger('detach');\n                this.beforeDetach();\n                this.$el.removeData('esencia-view').removeAttr('esencia-view');\n                this.undelegateEvents();\n                this.attached = false;\n                return this;\n            };\n            View.remove = function () {\n                if (this.parent) {\n                    this.parent.removeView(this, this.container);\n                }\n                this.detachViews();\n                this.detach();\n                return backbone.View.prototype.remove.call(this);\n            };\n            View.getClosestView = function (selector) {\n                var $selector = $(selector);\n                if (!$selector.is('[esencia-view]')) {\n                    $selector = $selector.closest('[esencia-view]');\n                }\n                return $selector.length ? $selector.data('esencia-view') : null;\n            };\n            module.exports = backbone.View.extend(View);\n        },\n        function (module, exports) {\n            'use strict';\n            var backbone = _require(9);\n            var _ = _require(10);\n            var Router = _require(3);\n            var Collection = _require(0);\n            var Model = _require(2);\n            var View = _require(4);\n            var ComponentsManager = _require(1);\n            var componentsManager = _require(6);\n            var extend = _require(8);\n            var Esencia = exports;\n            _.extend(Esencia, backbone.Events);\n            var backboneFields = [\n                    'Events',\n                    'History',\n                    'history'\n                ];\n            _.extend(Esencia, _.pick(backbone, backboneFields));\n            _.extend(Esencia, {\n                Router: Router,\n                Collection: Collection,\n                Model: Model,\n                View: View,\n                ComponentsManager: ComponentsManager\n            });\n            Esencia.componentsManager = componentsManager;\n            Esencia.extend = extend;\n        },\n        function (module, exports) {\n            'use strict';\n            var ComponentsManager = _require(1);\n            module.exports = new ComponentsManager();\n        },\n        function (module, exports) {\n            'use strict';\n            var _ = _require(10);\n            var DEFAULT_EXEC_TYPE = 'PUT';\n            var urlError = function () {\n                throw new Error('A \"url\" property or function must be specified');\n            };\n            exports.wrapError = function (model, options) {\n                var error = options.error;\n                options.error = function (resp) {\n                    if (error)\n                        error.call(options.context, model, resp, options);\n                    model.trigger('error', model, resp, options);\n                };\n            };\n            exports.prepareOptions = function (method, model, options) {\n                options = _.extend({\n                    type: DEFAULT_EXEC_TYPE,\n                    dataType: 'json',\n                    contentType: 'application/json',\n                    processData: false\n                }, options);\n                if (!options.url) {\n                    var url = _.result(model, 'url') || urlError();\n                    options.url = url.replace(/[^\\/]$/, '$&/') + method;\n                }\n                if (options.data && _.isObject(options.data) && !options.processData) {\n                    options.data = JSON.stringify(options.data);\n                }\n                return options;\n            };\n            var baseMethodsMap = {\n                    'POST': 'create',\n                    'PUT': 'update',\n                    'PATCH': 'patch',\n                    'DELETE': 'delete',\n                    'GET': 'read'\n                };\n            exports.getFakeBaseMethod = function (options) {\n                return baseMethodsMap[options.type.toUpperCase()];\n            };\n        },\n        function (module, exports) {\n            'use strict';\n            var backbone = _require(9);\n            module.exports = backbone.View.extend;\n        },\n        function (module, exports) {\n            module.exports = __external_Backbone;\n        },\n        function (module, exports) {\n            module.exports = __external__;\n        }\n    ];\n    return _require(5);\n}));\n//# sourceMappingURL=esencia.js.map\n","'use strict';\n\nvar _ = require('underscore');\nvar backbone = require('backbone');\nvar execUtils = require('../utils/exec');\n\n/**\n * @class Esencia.Collection\n * @extend Backbone.Collection\n */\n\nvar Collection = {};\n\n/**\n * Override `sync` to add exec custom method functionality\n *\n * @override\n */\n\nCollection.sync = function(method, collection, options) {\n\toptions = execUtils.prepareOptions(method, collection, options);\n\tmethod = execUtils.getFakeBaseMethod(options);\n\treturn backbone.Collection.prototype.sync.call(\n\t\tthis, method, collection, options\n\t);\n};\n\n/**\n * Exec custom non-REST method on collection\n * It trigger `exec:[method]` event after success method exec\n *\n * @param {String} method\n * @param {Object} options\n */\n\nCollection.exec = function(method, options) {\n\toptions = _.extend({parse: true}, options);\n\tvar collection = this;\n\tvar success = options.success;\n\toptions.success = function(resp) {\n\t\tif (options.fetch) collection[options.reset ? 'reset' : 'set'](resp, options);\n\t\tif (success) success.call(options.context, collection, resp, options);\n\t\tcollection.trigger('exec:' + method, collection, resp, options);\n\t};\n\texecUtils.wrapError(this, options);\n\treturn this.sync(method, this, options);\n};\n\nmodule.exports = backbone.Collection.extend(Collection);\n","'use strict';\n\nvar _ = require('underscore');\nvar backbone = require('backbone');\nvar View = require('./view');\nvar extend = require('../utils/extend');\n\nfunction isTreeNodeChanged(oldNode, node) {\n\treturn Boolean(\n\t\t!oldNode ||\n\t\toldNode.component.name !== node.component.name ||\n\t\t!oldNode.view ||\n\t\toldNode.view instanceof node.component.View === false ||\n\t\toldNode.view.isWaiting() ||\n\t\t!oldNode.view.attached ||\n\t\t!oldNode.view.isUnchanged()\n\t);\n}\n\n/**\n * @class Esencia.ComponentsManager\n */\n\nvar ComponentsManager = function(options) {\n\t// populate ComponentsManager instance with fields from options\n\t_.extend(this, _.pick(options, componentManagerOptions));\n\t// save original options, it is sometimes usefull\n\tthis.options = options;\n\n\t// all components hash\n\tthis.components = {};\n\n\t// current components tree that rendered at this moment\n\tthis.tree = [];\n\n\t// add default root component, in most cases this is what you need\n\tif (this.autoAddRoot) this._addRoot();\n\n\tthis.initialize.apply(this, arguments);\n};\n\nvar componentManagerOptions = [\n\t'rootEl', 'autoAddRoot', 'defaultParent'\n];\n\n var componentOptions = [\n\t'name', 'parent', 'container', 'View', 'models', 'collections', 'viewOptions'\n];\n\n_.extend(ComponentsManager.prototype, backbone.Events, {\n\t// You can set selector of any element at the page if you want restrict\n\t// specific page area that component manager will process\n\trootEl: 'html',\n\n\t// Add default root component, in most cases this is what you need\n\tautoAddRoot: true,\n\n\t// Default parent component name, this option will set as first root\n\t// component name\n\tdefaultParent: null,\n\n\t/**\n\t * Initialize is an empty function by default. Override it with your own\n\t * initialization logic.\n\t */\n\n\tinitialize: function() {},\n\n\t/**\n\t * Add default root component to the components list\n\t */\n\n\t_addRoot: function() {\n\t\tvar RootView = View.extend({\n\t\t\tel: this.rootEl\n\t\t});\n\n\t\tthis.add({\n\t\t\tname: '__ROOT_COMPONENT__',\n\t\t\tparent: null,\n\t\t\tView: RootView\n\t\t});\n\t},\n\n\t/**\n\t * Add component to the components list\n\t *\n\t * @param {Object} options\n\t * @param {String} options.name - component name\n\t * @param {View} options.View - component view constructor\n\t * @param {String|Null} [options.parent] - component parent name or null\n\t * for roots\n\t * @param {String} [options.container] - view container, required if parent\n\t * is string\n\t * @param {Boolean} [options.process] - process component after add\n\t */\n\n\tadd: function(options) {\n\t\toptions = _.defaults({}, options, {\n\t\t\tparent: this.defaultParent,\n\t\t\tprocess: false\n\t\t});\n\n\t\tvar component = _.pick(options, componentOptions);\n\n\t\tif (!_.has(component, 'name')) {\n\t\t\tcomponent.name = _.uniqueId('__COMPONENT_') + '__';\n\t\t}\n\n\t\tif (!_.isString(component.name)) {\n\t\t\tthrow new Error('Component `name` option should be a string');\n\t\t}\n\n\t\tif (_.has(this.components, component.name)) {\n\t\t\tthrow new Error('Duplicate component with name \"' + component.name + '\"');\n\t\t}\n\n\t\tif (!_.has(component, 'View')) {\n\t\t\tthrow new Error('Component `View` option is required');\n\t\t}\n\n\t\tif (!_.isString(component.parent) && !_.isNull(component.parent)) {\n\t\t\tthrow new Error('Component `parent` option should be a string or null');\n\t\t}\n\n\t\tif (_.isNull(component.parent) && _.has(component, 'container')) {\n\t\t\tthrow new Error('Root component could not have a container');\n\t\t}\n\n\t\tif (_.isString(component.parent) && !_.has(component, 'container')) {\n\t\t\tthrow new Error(\n\t\t\t\t'Component `container` option is required for components with parent'\n\t\t\t);\n\t\t}\n\n\t\tif (_.has(component, 'container') && !_.isString(component.container)) {\n\t\t\tthrow new Error('Component `container` option should be a string');\n\t\t}\n\n\t\tthis.components[component.name] = component;\n\n\t\tif (_.isNull(this.defaultParent) && _.isNull(component.parent)) {\n\t\t\tthis.defaultParent = component.name;\n\t\t}\n\n\t\t// process components tree in force mode\n\t\tif (options.process) {\n\t\t\tthis.process(component.name);\n\t\t}\n\n\t\treturn component;\n\t},\n\n\t/**\n\t * Get component by name\n\t *\n\t * @param {String} name - component name\n\t * @return {Object} component\n\t */\n\n\tget: function(name) {\n\t\treturn this.components[name] || null;\n\t},\n\n\t/**\n\t * Remove component by name\n\t *\n\t * @param {String} name - component name\n\t */\n\n\tremove: function(name) {\n\t\tdelete this.components[name];\n\t},\n\n\t/**\n\t * Process components tree by name(s) and call a callback on done\n\t *\n\t * @param {String|String[]} names - component name or names list\n\t * @params {Function} [callback]\n\t */\n\n\tprocess: function(names, callback) {\n\t\tif (!_.isArray(names)) names = [names];\n\t\tcallback = callback || _.noop;\n\n\t\tvar tree = this._buildTree(names);\n\t\tvar oldTree = this.tree;\n\t\tthis.tree = [];\n\n\t\tthis._applyTree({\n\t\t\tparent: {children: this.tree},\n\t\t\toldTree: oldTree,\n\t\t\ttree: tree\n\t\t}, callback);\n\t},\n\n\t_buildTree: function(names) {\n\t\tvar self = this;\n\n\t\t// internal function for recursion\n\t\tvar buildHashedTree = function(names, tree) {\n\t\t\t// exit with empty tree if names list is empty\n\t\t\tif (!names.length) return tree;\n\n\t\t\tvar parentNames = [];\n\n\t\t\t// create component nodes\n\t\t\tvar nodes = _(names)\n\t\t\t\t.chain()\n\t\t\t\t.uniq()\n\t\t\t\t.map(function(name) {\n\t\t\t\t\tvar component = self.components[name];\n\n\t\t\t\t\tif (!component) {\n\t\t\t\t\t\tthrow new Error('Unknown component with name \"' + name + '\"');\n\t\t\t\t\t}\n\n\t\t\t\t\t// skip component if it is already in the tree\n\t\t\t\t\tif (_.has(tree, component.name)) return null;\n\n\t\t\t\t\t// create node\n\t\t\t\t\tvar node = {\n\t\t\t\t\t\tcomponent: component,\n\t\t\t\t\t\tchildren: []\n\t\t\t\t\t};\n\n\t\t\t\t\t// add parent name to the list\n\t\t\t\t\tif (_.isString(component.parent)) {\n\t\t\t\t\t\tparentNames.push(component.parent);\n\t\t\t\t\t}\n\n\t\t\t\t\t// add nodes to the hashed tree first to prevent cycles\n\t\t\t\t\ttree[component.name] = node;\n\n\t\t\t\t\treturn node;\n\t\t\t\t})\n\t\t\t\t.compact()\n\t\t\t\t.value();\n\n\t\t\t// build new tree for parent components\n\t\t\ttree = buildHashedTree(parentNames, tree);\n\n\t\t\t// add each node to the parent children list if component has a parent\n\t\t\t_(nodes).each(function(node) {\n\t\t\t\tif (_.isString(node.component.parent)) {\n\t\t\t\t\tif (\n\t\t\t\t\t\tnode.component.container &&\n\t\t\t\t\t\t_(tree[node.component.parent].children).find(function(child) {\n\t\t\t\t\t\t\treturn child.component.container === node.component.container;\n\t\t\t\t\t\t})\n\t\t\t\t\t) {\n\t\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t\t'Components could not have same container and parent in one tree'\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\ttree[node.component.parent].children.push(node);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\treturn tree;\n\t\t};\n\n\t\tvar tree = buildHashedTree(names, {});\n\n\t\tif (_.isEmpty(tree)) {\n\t\t\tthrow new Error('Components tree is empty');\n\t\t}\n\n\t\t// filter root components\n\t\ttree = _(tree).filter(function(node) {\n\t\t\treturn _.isNull(node.component.parent);\n\t\t});\n\n\t\tif (!tree.length) {\n\t\t\tthrow new Error('Components tree should have at least one root node');\n\t\t}\n\n\t\tif (\n\t\t\t_(tree).some(function(node) {\n\t\t\t\treturn node.component.container;\n\t\t\t})\n\t\t) {\n\t\t\tthrow new Error('Root component could not have a container');\n\t\t}\n\n\t\treturn tree;\n\t},\n\n\t_applyTree: function(params, callback) {\n\t\tvar self = this;\n\n\t\tvar parent = params.parent;\n\n\t\tvar afterCallback = _.after(params.tree.length, callback);\n\n\t\tvar iterate = function(oldNode, node) {\n\t\t\tvar container = node.component.container;\n\n\t\t\tvar children = node.children;\n\t\t\tvar oldChildren = oldNode ? oldNode.children : [];\n\n\t\t\t// set view data\n\t\t\tnode.view.setData();\n\n\t\t\tif (!node.view.attached && container) {\n\t\t\t\t// render view with container from parent view\n\t\t\t\tparent.view\n\t\t\t\t\t.setView(node.view, container)\n\t\t\t\t\t.renderViews({include: [container]})\n\t\t\t\t\t.attachViews({include: [container]});\n\t\t\t} else {\n\t\t\t\t// exclude list is an union of old and new children\n\t\t\t\tvar exclude = _.union(\n\t\t\t\t\t_(children).chain().map(function(child) {\n\t\t\t\t\t\treturn child.component.container;\n\t\t\t\t\t}).compact().value(),\n\t\t\t\t\t_(oldChildren).chain().map(function(child) {\n\t\t\t\t\t\treturn child.component.container;\n\t\t\t\t\t}).compact().value()\n\t\t\t\t);\n\n\t\t\t\t// render view without container directly\n\t\t\t\tnode.view.render({exclude: exclude});\n\t\t\t}\n\n\t\t\t// clear children field in new node because it will set recursive\n\t\t\t// and should be empty in error case\n\t\t\tnode.children = [];\n\n\t\t\t// save node to the parent children\n\t\t\tparent.children.push(node);\n\n\t\t\t// recursive call for children nodes\n\t\t\tself._applyTree({\n\t\t\t\tparent: node,\n\t\t\t\toldTree: oldChildren,\n\t\t\t\ttree: children\n\t\t\t}, afterCallback);\n\t\t};\n\n\t\t_(params.tree).each(function(node, index) {\n\t\t\t// TODO get oldNode in better way\n\t\t\tvar oldNode = params.oldTree[index] || null;\n\n\t\t\tif (isTreeNodeChanged(oldNode, node)) {\n\t\t\t\tif (oldNode && oldNode.view) {\n\t\t\t\t\tif (oldNode.component.container) {\n\t\t\t\t\t\t// remove old view if container for new view dirrent\n\t\t\t\t\t\tif (oldNode.component.container !== node.component.container) {\n\t\t\t\t\t\t\toldNode.view.remove();\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// detach old view if it has not a container\n\t\t\t\t\t\toldNode.view.detach();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// create new view\n\t\t\t\tnode.view = new (node.component.View)(\n\t\t\t\t\t_(node.component)\n\t\t\t\t\t\t.chain()\n\t\t\t\t\t\t.pick('models', 'collections')\n\t\t\t\t\t\t.extend(_.result(node.component, 'viewOptions'))\n\t\t\t\t\t\t.value()\n\t\t\t\t);\n\n\t\t\t\t// stop processing old components tree by passing null as oldNode\n\t\t\t\tif (node.view.isWaiting()) {\n\t\t\t\t\t// wait when view will be resolved\n\t\t\t\t\tself.listenToOnce(node.view, 'resolve', function() {\n\t\t\t\t\t\titerate(null, node);\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\titerate(null, node);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// save old view to new node\n\t\t\t\tnode.view = oldNode.view;\n\n\t\t\t\t// process old components tree\n\t\t\t\titerate(oldNode, node);\n\t\t\t}\n\t\t});\n\t}\n});\n\nComponentsManager.extend = extend;\n\nmodule.exports = ComponentsManager;\n","'use strict';\n\nvar _ = require('underscore');\nvar backbone = require('backbone');\nvar execUtils = require('../utils/exec');\n\n/**\n * @class Esencia.Model\n * @extend Backbone.Model\n */\n\nvar Model = {};\n\n/**\n * Override `sync` to add exec custom method functionality\n *\n * @override\n */\n\nModel.sync = function(method, model, options) {\n\toptions = execUtils.prepareOptions(method, model, options);\n\tmethod = execUtils.getFakeBaseMethod(options);\n\treturn backbone.Model.prototype.sync.call(this, method, model, options);\n};\n\n/**\n * Exec custom non-REST method on model\n * It trigger `exec:[method]` event after success method exec\n *\n * @param {String} method\n * @param {Object} options\n */\n\nModel.exec = function(method, options) {\n\toptions = _.extend({parse: true}, options);\n\tvar model = this;\n\tvar success = options.success;\n\toptions.success = function(resp) {\n\t\tif (options.fetch) {\n\t\t\tvar serverAttrs = options.parse ? model.parse(resp, options) : resp;\n\t\t\tif (!model.set(serverAttrs, options)) return false;\n\t\t}\n\t\tif (success) success.call(options.context, model, resp, options);\n\t\tmodel.trigger('exec:' + method, model, resp, options);\n\t};\n\texecUtils.wrapError(this, options);\n\treturn this.sync(method, this, options);\n};\n\nmodule.exports = backbone.Model.extend(Model);\n","'use strict';\n\nvar _ = require('underscore');\nvar backbone = require('backbone');\nvar componentsManager = require('../utils/componentsManager');\n\n/**\n * @class Esencia.Router\n * @extend Backbone.Router\n */\n\nvar Router = {\n\t// root: '/',\n\tcomponentsManager: componentsManager,\n\tnamedParameters: false,\n\tnowhereUrl: '___',\n\tautoloadModules: true,\n\tmodulesPath: 'modules/',\n\tdefaultModuleName: 'main',\n\tonModuleError: function() {}\n};\n\nvar routerOptions = [\n\t// 'root',\n\t'componentsManager', 'namedParameters', 'nowhereUrl',\n\t'autoloadModules', 'modulesPath', 'defaultModuleName', 'onModuleError'\n];\n\n/**\n * @constructor\n * @param {Object} [options]\n */\n\nRouter.constructor = function(options) {\n\toptions = options || {};\n\n\t// populate Router instance with fields from options\n\t_.extend(this, _.pick(options, routerOptions));\n\t// save original options, it is sometimes usefull\n\tthis.options = options;\n\n\tthis.urlParams = {};\n\tthis.modules = {};\n\n\t// All query parameters can be passed in a single hash using the key\n\t// referenced from the route definition (backbone queryparams will\n\t// do it for us)\n\tbackbone.Router.namedParameters = this.namedParameters;\n\n\tbackbone.Router.apply(this, arguments);\n\n\tif (options.autoloadModules) {\n\t\tthis.route('*url', function(params) {\n\t\t\tthis.setModule(params);\n\t\t});\n\t}\n};\n\n/**\n * Extend all arguments to single object and replace urlParams with it\n *\n * @param {Object | Function} params1\n * @param {Object | Function} params2\n * etc. ...\n */\n\nRouter._populateUrlParams = function(/* params1, params2, ... */) {\n\tvar self = this;\n\n\t// clean old values from urlParams object\n\tvar key;\n\tfor (key in this.urlParams) {\n\t\tif (_.has(this.urlParams, key)) {\n\t\t\tdelete this.urlParams[key];\n\t\t}\n\t}\n\n\t// populate urlParams with new params\n\t_(arguments)\n\t\t.chain()\n\t\t.filter(_.isObject)\n\t\t.each(function(params) {\n\t\t\tparams = _.isFunction(params) ? params.call(self) : params;\n\t\t\t_.extendOwn(self.urlParams, params);\n\t\t});\n\n\treturn this.urlParams;\n};\n\n/**\n * Add new component to components manager\n *\n * @param {Object} options - component options\n */\n\nRouter.component = function(options) {\n\treturn this.componentsManager.add(options);\n};\n\n/**\n * Override `route` to add middleware processing functionality\n *\n * @override\n */\n\nRouter.route = function(url, options, callback) {\n\tvar self = this;\n\n\tif (_.isFunction(options)) {\n\t\tcallback = options;\n\t\toptions = {};\n\t}\n\n\tif (!_.isObject(options)) {\n\t\toptions = {name: options};\n\t}\n\n\tvar name = '';\n\n\tif (_.has(options, 'components') || _.has(options, 'component')) {\n\t\tvar components = _(options.components || [options.component])\n\t\t\t.map(function(componentOptions) {\n\t\t\t\treturn self.component(componentOptions);\n\t\t\t});\n\n\t\tvar componentNames = _.pluck(components, 'name');\n\n\t\tname = componentNames.join(',');\n\n\t\t// create callback to process components tree\n\t\tcallback = function() {\n\t\t\tself.componentsManager.process(componentNames);\n\t\t};\n\t}\n\n\tname = options.name || name;\n\n\t// bind component to route\n\tbackbone.Router.prototype.route.call(this, url, name, function() {\n\t\tvar args = arguments;\n\n\t\tself._populateUrlParams(options.defaultUrlParams, args[0]);\n\n\t\tself._defaultMiddleware({\n\t\t\turl: url,\n\t\t\tname: name,\n\t\t\tcallback: callback\n\t\t}, function() {\n\t\t\tcallback.apply(self, args);\n\t\t});\n\t});\n};\n\n/**\n * Override `navigate` to add force mode and qs processing\n *\n * @override\n * @param {String} fragment\n * @param {Object} [options] - hash of params\n * @param {Object} [options.qs] - query string hash\n */\n\nRouter.navigate = function(fragment, options) {\n\toptions = options || {};\n\n\t// if (fragment.indexOf(this.root) === 0) {\n\t// \tfragment = fragment.substring(this.root.length);\n\t// }\n\n\t// force to go to the selected fragment even if we currently on it\n\tif (options.force) {\n\t\tthis.navigate(this.nowhereUrl, {\n\t\t\treplace: options.replace,\n\t\t\ttrigger: false\n\t\t});\n\n\t\toptions = _(options).chain().omit('force').extend({replace: true}).value();\n\n\t\treturn this.navigate(fragment, options);\n\t}\n\n\t// set `trigger` to true by default\n\toptions = _.defaults({}, options, {\n\t\ttrigger: true,\n\t\tparams: {}\n\t});\n\n\t// add support of query string using `toFragment` from backbone.queryparams\n\tvar qs = options.qs;\n\n\tif (this.toFragment && qs) {\n\t\t// reject undefined and null qs parameters\n\t\t_(qs).each(function(val, key, qs) {\n\t\t\tif (val === undefined || val === null) delete qs[key];\n\t\t});\n\n\t\tfragment = this.toFragment(fragment, qs);\n\n\t\tdelete options.qs;\n\t}\n\n\tbackbone.Router.prototype.navigate.call(this, fragment, options);\n};\n\n\n/**\n * Default middleware function\n */\n\nRouter._defaultMiddleware = function(route, next) {\n\tnext();\n};\n\n/**\n * Use passed function as `middleware`\n *\n * @param {Function} middleware - middleware function,\n * `route` and `next` will be passed as arguments.\n * context (`this`) is link to the router object.\n */\n\nRouter.middleware = function(middleware) {\n\tvar self = this;\n\n\tvar defaultMiddleware = this._defaultMiddleware;\n\n\tthis._defaultMiddleware = function(route, next) {\n\t\tdefaultMiddleware.call(self, route, function() {\n\t\t\tmiddleware.call(self, route, next);\n\t\t});\n\t};\n\n\treturn this;\n};\n\n/**\n * Require module file and init it\n *\n * @param {Object} params\n * @param {String} params.url - url without query string\n */\n\nRouter.setModule = function(params) {\n\tvar self = this;\n\n\tvar url = params.url;\n\tdelete params.url;\n\n\tvar moduleName = _(url.split('/')).find(_.identity) || this.defaultModuleName;\n\n\t// require module file\n\trequire([this.modulesPath + moduleName], function(moduleInit) {\n\t\t// if module is loaded first time\n\t\tif (!self.modules[moduleName]) {\n\t\t\t// init it\n\t\t\tmoduleInit(self);\n\n\t\t\t// set module init flag to true\n\t\t\tself.modules[moduleName] = true;\n\n\t\t\t// and navigate again with force flag\n\t\t\tself.navigate(url, {\n\t\t\t\treplace: true,\n\t\t\t\tforce: true,\n\t\t\t\tqs: params\n\t\t\t});\n\t\t}\n\t}, this.onModuleError);\n};\n\nmodule.exports = backbone.Router.extend(Router);\n","'use strict';\n\nvar _ = require('underscore');\nvar backbone = require('backbone');\n\n// Take jquery or other selectors lib from backbone\nvar $ = backbone.$;\n\nvar splice = Array.prototype.splice;\n\n// Cached regex to split keys for `delegate`.\nvar delegateEventSplitter = /^(\\S+)\\s*(.*)$/;\n\n// List of events type for nested entities processed by current view\nvar nestedEventTypes = ['views', 'collections', 'models'];\n\nfunction isContainerSkipped(container, options) {\n\treturn Boolean(\n\t\t(options.exclude && _.contains(options.exclude, container)) ||\n\t\t(options.include && !_.contains(options.include, container))\n\t);\n}\n\n/**\n * @class Esencia.View\n * @extend Backbone.View\n */\n\nvar View = {\n\t// Helpers (Object|Fuction) which will be passed to the template\n\ttemplateHelpers: {},\n\n\t// Views are in the resolved state by default\n\twaitsCounter: 0,\n\n\t// This flag is used to check that .wait() is called\n\t// in the constructor/initialize\n\twaitAvailable: true,\n\n\t// Views are not attached by default\n\tattached: false\n};\n\nvar viewOptions = [\n\t'views', 'collections', 'models', 'data', 'events', 'router', 'templateHelpers'\n];\n\n/**\n * @constructor\n * @param {Object} [options]\n */\n\nView.constructor = function(options) {\n\tvar self = this;\n\n\toptions = options || {};\n\n\t// nested views, collections, models and data are empty by default\n\tthis.views = {};\n\tthis.collections = {};\n\tthis.models = {};\n\tthis.data = {};\n\n\t// populate View instance with fields from options\n\t_.extend(this, _.pick(options, viewOptions));\n\t// save original options, it is sometimes usefull\n\tthis.options = options;\n\n\tif (this.template && !_.isFunction(this.template)) {\n\t\tthrow new Error('View `template` option should be a function');\n\t}\n\n\t// create special hash object for all events for fast search\n\tthis._prepareEvents();\n\n\t// normalize nested views hash\n\tthis._prepareViews();\n\n\t// apply default backbone.View constructor\n\tbackbone.View.apply(this, arguments);\n\n\t// set waiting state for current view if some nested view is in waiting state\n\t_(this.views).each(function(views) {\n\t\t_(views).each(function(view) {\n\t\t\tif (view.isWaiting()) {\n\t\t\t\tself.listenToOnce(view, 'resolve', self.wait());\n\t\t\t}\n\t\t});\n\t});\n\n\t// disable .wait(), it available only in the constructor/initialize\n\tthis.waitAvailable = false;\n\n\t// we should delegate events after parent constructor call because\n\t// collections and models could be created in the initialize method\n\n\t// delegate events for each collection\n\t_(this.collections).each(function(collection, key) {\n\t\tself.delegateNestedEvents('collections', key, collection);\n\t});\n\n\t// delegate events for each model\n\t_(this.models).each(function(model, key) {\n\t\tself.delegateNestedEvents('models', key, model);\n\t});\n};\n\n/**\n * Update view data\n * Method is used to update view state, could be overriden to modify nested\n * views state\n *\n * @param {Object} [data] - new data object\n * @return {Esencia.View} - view instance for chaining\n */\n\nView.setData = function(data) {\n\tif (data) this.data = data;\n\treturn this;\n};\n\n/**\n * Check that view is changed and should be re-rendered\n * Method returns true by default (always unchanged), could be overriden\n * for specific logic\n *\n * @return {Boolean}\n */\n\nView.isUnchanged = function() {\n\treturn true;\n};\n\n/**\n * Switch view to the waiting state\n *\n * @return {Function} - callback function, should be called to resolve view\n */\n\nView.wait = function() {\n\tif (!this.waitAvailable) {\n\t\tthrow new Error('Method .wait() is available only in the constructor');\n\t}\n\n\tvar self = this;\n\n\tthis.waitsCounter++;\n\n\t// TODO: think about promises\n\treturn _.once(function() {\n\t\t_.defer(function() {\n\t\t\tself.waitsCounter--;\n\t\t\tif (!self.isWaiting()) {\n\t\t\t\tself.trigger('resolve');\n\t\t\t}\n\t\t});\n\t});\n};\n\n/**\n * Check view waiting state\n *\n * @return {Boolean}\n */\n\nView.isWaiting = function() {\n\treturn this.waitsCounter > 0;\n};\n\n/**\n * Render view\n *\n * @param {Object} options\n * @param {Boolean} options.force\n * @return {Esencia.View} - view instance for chaining\n */\n\nView._render = function(options) {\n\t// stop rendering if view in `waiting` state, resolve it first\n\tif (this.isWaiting()) return this;\n\n\toptions = options || {};\n\n\tif (this.template) {\n\t\t// re-render template only if it exists and if it is necessary\n\t\tif (options.force || !this.attached || !this.isUnchanged()) {\n\t\t\t// detach view from DOM element\n\t\t\tthis.detach();\n\n\t\t\t// render template with data\n\t\t\tvar html = this.renderTemplate(this.template, this.getTemplateData());\n\n\t\t\t// render html with jqeury (or other lib) call\n\t\t\tvar $el = $(html);\n\n\t\t\tif (!$el.length) {\n\t\t\t\tthrow new Error('View template produces empty html');\n\t\t\t}\n\n\t\t\tif ($el.length > 1) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t'View template produces html with more than one root elements'\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tthis.setElement($el);\n\t\t}\n\t} else {\n\t\t// re-ensure element if it is not ensured\n\t\tif (!this.$el.length) this._ensureElement();\n\t}\n\n\t// render nested views\n\tthis.renderViews(options);\n\n\tif (!this.parent || this.$container) {\n\t\t// attach all nested views first\n\t\tthis.attachViews(options);\n\n\t\t// attach current view\n\t\tthis.attach();\n\t}\n\n\t// return this for chaining\n\treturn this;\n};\n\n/**\n * Render view by calling private _render method\n *\n * @override\n * @return {Esencia.View} - view instance for chaining\n */\n\nView.render = function(options) {\n\treturn this._render(options);\n};\n\n/**\n * Get data for template rendering\n * Returns data by default, could be overriden\n *\n * @return {Object}\n */\n\nView.getTemplateData = function() {\n\treturn this.data;\n};\n\n/**\n * Render template with data. Returns html.\n *\n * @param {Function} template - template function for rendering\n * @param {Object} data - data for rendering\n * @return {String} - rendered html\n */\n\nView.renderTemplate = function(template, data) {\n\tdata = _(this).chain().result('templateHelpers').extend(data).value();\n\n\t// get html\n\treturn template(data);\n};\n\n/**\n * Render all nested view\n *\n * @param {Object} options\n * @param {Boolean} options.force\n * @return {Esencia.View} - view instance for chaining\n*/\n\nView.renderViews = function(options) {\n\tvar self = this;\n\n\t// iterate by each views group\n\t_(this.views).each(function(viewsGroup, container) {\n\t\tif (isContainerSkipped(container, options)) return;\n\n\t\t// return if view group is empty\n\t\tif (!viewsGroup.length) return;\n\n\t\t// call render for each views from view group\n\t\t_(viewsGroup).each(function(view) {\n\t\t\tview.render(_.omit(options, 'include', 'exclude'));\n\t\t});\n\n\t\t// get first container or $el\n\t\tvar $container = container ? self.$(container).first() : self.$el;\n\n\t\tif (!$container.length) {\n\t\t\tthrow new Error('Container \"' + container + '\" is not found');\n\t\t}\n\n\t\tvar containerEl = $container.get(0);\n\n\t\t// dom is changed if some view from group is not in current container\n\t\tvar domChanged = _(viewsGroup).some(function(view) {\n\t\t\treturn (\n\t\t\t\t!view.attached ||\n\t\t\t\t!view.$container ||\n\t\t\t\tview.$container.get(0) !== containerEl\n\t\t\t);\n\t\t});\n\n\t\tif (domChanged) {\n\t\t\t// re-append views group to container\n\t\t\tvar $els = [];\n\n\t\t\t_(viewsGroup).each(function(view) {\n\t\t\t\tview.$container = $container;\n\t\t\t\t$els.push(view.$el);\n\t\t\t});\n\n\t\t\t// TODO: add some rendering optimizations here\n\n\t\t\t// put all views to $container\n\t\t\t$container.append($els);\n\t\t}\n\t});\n\n\t// return this for chaining\n\treturn this;\n};\n\n/**\n * Set view to views group or replace some view in specified position\n * If index is passed it replace only one view with index in views group\n *\n * @param {Esencia.View} view - view to set\n * @param {String} container - container to set\n * @param {Number} [index] - index of view to replace\n * @return {Esencia.View} - view instance for chaining\n */\n\nView.setView = function(view, container, index) {\n\treturn this._updateViews([view], container, index);\n};\n\n/**\n * Set views to views group or replace some view in specified position\n * If index is passed it replace only one view with index in views group\n *\n * @param {Esencia.View[]} views - views to set\n * @param {String} container - container to set\n * @param {Number} [index] - index of view to replace\n * @return {Esencia.View} - view instance for chaining\n */\n\nView.setViews = function(views, container, index) {\n\treturn this._updateViews(views, container, index);\n};\n\n/**\n * Append view to end of views group\n * This method is alias for insertView without index argument\n *\n * @param {Esencia.View} view - view to append\n * @param {String} container - container of views group\n * @return {Esencia.View} - view instance for chaining\n */\n\nView.appendView = function(view, container) {\n\treturn this._insertViews([view], container);\n};\n\n/**\n * Append views to end of views group\n * This method is alias for insertViews without index argument\n *\n * @param {Esencia.View[]} views - views to append\n * @param {String} container - container of views group\n * @return {Esencia.View} - view instance for chaining\n */\n\nView.appendViews = function(views, container) {\n\treturn this._insertViews(views, container);\n};\n\n/**\n * Prepend view to start of views group\n * This method is alias for insertView with `0` as index argument value\n *\n * @param {Esencia.View} view - view to prepend\n * @param {String} container - container of views group\n * @return {Esencia.View} - view instance for chaining\n */\n\nView.prependView = function(view, container) {\n\treturn this._insertViews([view], container, 0);\n};\n\n/**\n * Prepend views to start of views group\n * This method is alias for insertViews with `0` as index argument value\n *\n * @param {Esencia.View[]} views - view to prepend\n * @param {String} container - container of views group\n  * @return {Esencia.View} - view instance for chaining\n */\n\nView.prependViews = function(views, container) {\n\treturn this._insertViews(views, container, 0);\n};\n\n/**\n * Insert view to specified position of views group in the container\n * If index is not passed method inserts view to the end of views group (append)\n *\n * @param {Esencia.View} view - view to insert\n * @param {String} container - container of views group\n * @param {Number} [index] - position in views group\n * @return {Esencia.View} - view instance for chaining\n */\n\nView.insertView = function(view, container, index) {\n\treturn this._insertViews([view], container, index);\n};\n\n/**\n * Insert views to specified position of views group container\n * If index is not passed method inserts views to the end of views group\n *\n * @param {Esencia.View[]} views - views to insert\n * @param {String} container - container of views group\n * @param {Number} [index] - position in views group\n * @return {Esencia.View} - view instance for chaining\n */\n\nView.insertViews = function(views, container, index) {\n\treturn this._insertViews(views, container, index);\n};\n\n/**\n * Remove view from views group container by index or view instance\n * If index is passed it remove view in the index position\n *\n * @param {Esencia.View} [view] - view to remove\n * @param {String} container - container of views group\n * @param {Number} [index] - index of view in views group\n * @return {Esencia.View} - view instance for chaining\n */\n\nView.removeView = function(view, container, index) {\n\tif (arguments.length < 2) {\n\t\tthrow new Error('\"view\" or \"index\" arguments must be specified');\n\t}\n\n\tif (_.isString(view)) {\n\t\tindex = container;\n\t\tcontainer = view;\n\t\tview = this.getView(container, index);\n\t\tif (!view) return this;\n\t}\n\n\treturn this._removeViews([view], container);\n};\n\n/**\n * Remove views from views group container\n * If views are passed remove only these views\n * Othervise remove all views from container\n *\n * @param {Esencia.View[]} [views] - views to remove\n * @param {String} container - container of views group\n * @return {Esencia.View} - view instance for chaining\n */\n\nView.removeViews = function(views, container) {\n\tif (_.isString(views)) {\n\t\tcontainer = views;\n\t\tviews = this.getViews(container);\n\t}\n\n\treturn this._removeViews(views, container);\n};\n\n/**\n * Get single view from container by index\n *\n * @param {String} container - container of views group\n * @param {Number} [index] - index of view in views group\n * @return {Esencia.View}\n */\n\nView.getView = function(container, index) {\n\treturn this.getViews(container)[index || 0] || null;\n};\n\n/**\n * Get views group from container\n *\n * @param {String} container - container of views group\n * @return {Esencia.View[]}\n */\n\nView.getViews = function(container) {\n\treturn _.clone(this.views[container]) || [];\n};\n\nView._insertViews = function(views, container, index) {\n\tvar self = this;\n\n\tvar viewsGroup = this.getViews(container);\n\n\t_(views).each(function(view) {\n\t\tif (view.parent) {\n\t\t\tview.parent.removeView(view, view.container);\n\t\t}\n\t});\n\n\tif (viewsGroup.length) {\n\t\t// if index is not specified set it value as last index of views group\n\t\tif (typeof index === 'undefined') {\n\t\t\tindex = viewsGroup.length;\n\t\t}\n\n\t\t// insert views\n\t\tsplice.apply(this.views[container], [index, 0].concat(views));\n\t} else {\n\t\t// if group is empty - set views as whole views group value\n\t\tthis.views[container] = views;\n\t}\n\n\t// set each view parent to current\n\t_(views).each(function(view) {\n\t\tview.parent = self;\n\t\tview.container = container;\n\t});\n\n\tthis.delegateNestedEvents('views', container, views);\n\n\treturn this;\n};\n\nView._updateViews = function(views, container, index) {\n\tvar oldViews;\n\n\tif (typeof index === 'undefined') {\n\t\t// if no index - get all views from group as old\n\t\toldViews = this.getViews(container);\n\t} else {\n\t\t// if index is specified get view from specific position as old\n\t\toldViews = this.getView(container, index);\n\t\toldViews = oldViews ? [oldViews] : [];\n\t}\n\n\t// exit if views equal oldViews\n\tif (\n\t\toldViews.length === views.length &&\n\t\t_(oldViews).all(function(oldView, index) {\n\t\t\treturn oldView === views[index];\n\t\t})\n\t) return this;\n\n\tif (oldViews.length) {\n\t\t// if old views array is not empty remove them from parent view\n\t\tthis._removeViews(oldViews, container);\n\n\t\t// and remove views from DOM\n\t\t_(oldViews).each(function(view) {\n\t\t\tview.remove();\n\t\t});\n\t}\n\n\t// insert new views\n\treturn this._insertViews(views, container, index);\n};\n\nView._removeViews = function(views, container) {\n\tvar self = this;\n\n\tvar viewsGroup = this.getViews(container);\n\n\tif (!viewsGroup.length) return this;\n\n\tvar viewObjs = _(views)\n\t\t.chain()\n\t\t.uniq()\n\t\t.map(function(view) {\n\t\t\treturn {\n\t\t\t\tview: view,\n\t\t\t\tindex: _.indexOf(viewsGroup, view)\n\t\t\t};\n\t\t})\n\t\t.filter(function(viewObj) {\n\t\t\treturn viewObj.index >= 0;\n\t\t})\n\t\t.sortBy(function(viewObj) {\n\t\t\treturn -viewObj.index;\n\t\t})\n\t\t.value();\n\n\tif (!viewObjs.length) return this;\n\n\t_(viewObjs).each(function(viewObj) {\n\t\tvar view = viewObj.view;\n\n\t\t// remove item from group\n\t\tsplice.call(self.views[container], viewObj.index, 1);\n\n\t\t// undelegate all nested entity events\n\t\tself.undelegateNestedEvents(view);\n\n\t\t// unset view parent\n\t\tdelete view.parent;\n\t});\n\n\treturn this;\n};\n\n/**\n * Original setElement do undelegateEvents/delegateEvents, we remove it\n * because we have special detach/attach methods for this purpose\n *\n * @override\n * @return {Esencia.View} - view instance for chaining\n */\n\nView.setElement = function(element) {\n\tvar $previousEl = this.$el;\n\n\tthis._setElement(element);\n\n\t// insert html to $el\n\tif ($previousEl && this.$container) {\n\t\t$previousEl.replaceWith(this.$el);\n\t}\n\n\treturn this;\n};\n\n/**\n * @override\n */\n\nView.delegateEvents = function(events) {\n\tevents = events || _.result(this, 'events');\n\tif (!events) return this;\n\tevents = _.omit(events, nestedEventTypes);\n\treturn backbone.View.prototype.delegateEvents.call(this, events);\n};\n\nView.delegateNestedEvents = function(type, key, entities) {\n\tvar self = this;\n\tif (!_.isArray(entities)) entities = [entities];\n\tvar listeners = this._nestedEventsHash[type][key];\n\tif (listeners) {\n\t\t_(listeners).each(function(listener) {\n\t\t\t_(entities).each(function(entity) {\n\t\t\t\tself.listenTo(entity, listener.eventName, listener.handler);\n\t\t\t});\n\t\t});\n\t}\n\treturn this;\n};\n\nView.undelegateNestedEvents = function(entities) {\n\tvar self = this;\n\tif (!_.isArray(entities)) entities = [entities];\n\t_(entities).each(function(entity) {\n\t\tself.stopListening(entity);\n\t});\n\treturn this;\n};\n\nView._prepareEvents = function(events) {\n\tvar self = this;\n\n\t// Hash for nested views events fast search\n\tthis._nestedEventsHash = {};\n\t_(nestedEventTypes).each(function(type) {\n\t\tself._nestedEventsHash[type] = {};\n\t});\n\n\tevents = events || _.result(this, 'events');\n\tif (!events) return;\n\n\t// bind all prefixed events to view then call native delegate events\n\t_(nestedEventTypes).each(function(type) {\n\t\tvar typeEventsHash = self._nestedEventsHash[type];\n\n\t\tif (!_.has(events, type) || !_.isObject(events[type])) return;\n\n\t\t_(events[type]).each(function(method, key) {\n\t\t\tif (!_.isFunction(method)) method = self[method];\n\t\t\tif (!method) return;\n\t\t\tvar match = key.match(delegateEventSplitter);\n\t\t\tvar eventName = match[1];\n\t\t\tvar entityKeys = match[2].replace(/ *, */g, ',').split(',');\n\t\t\tmethod = _.bind(method, self);\n\n\t\t\t// fill _nestedEventsHash\n\t\t\t_(entityKeys).each(function(entityKey) {\n\t\t\t\ttypeEventsHash[entityKey] = typeEventsHash[entityKey] || [];\n\t\t\t\ttypeEventsHash[entityKey].push({\n\t\t\t\t\teventName: eventName,\n\t\t\t\t\thandler: method\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t});\n};\n\n/**\n * Wrap all non-array view groups to arrays with one element and delegate events\n */\n\nView._prepareViews = function() {\n\tvar self = this;\n\n\t_(this.views).each(function(views, container) {\n\t\tif (!_.isArray(views)) views = [views];\n\t\tself.views[container] = views;\n\t\tself.delegateNestedEvents('views', container, views);\n\t});\n};\n\n/**\n * Attach all nested views\n *\n * @return {Esencia.View} - view instance for chaining\n */\n\nView.attachViews = function(options) {\n\toptions = options || {};\n\n\t// iterate by each nested views groups\n\t_(this.views).each(function(viewsGroup, container) {\n\t\tif (isContainerSkipped(container, options)) return;\n\n\t\t// return if views group is empty\n\t\tif (!viewsGroup.length) return;\n\n\t\t// call attach method for each nested view from views group\n\t\t_(viewsGroup).each(function(view) {\n\t\t\t// recursive attach all nested views\n\t\t\tview.attachViews(_.omit(options, 'include', 'exclude'));\n\n\t\t\t// attach current view\n\t\t\tview.attach();\n\t\t});\n\t});\n\n\t// return this for chaining\n\treturn this;\n};\n\n/**\n * afterAttach is empty by default\n * It called after attach call, could be verriden to add some specific logic\n * for DOM manipulations\n *\n * @return {Esencia.View} - view instance for chaining\n */\n\nView.afterAttach = function() {\n\treturn this;\n};\n\n/**\n * Attach new view to current view $el\n *\n * @return {Esencia.View} - view instance for chaining\n */\n\nView.attach = function() {\n\t// return if current view is already attached\n\tif (this.attached) return this;\n\n\t// detach previous view\n\tvar previousView = this.$el.data('esencia-view');\n\tif (previousView) previousView.detach();\n\n\t// attach current view and set attr\n\tthis.$el.data('esencia-view', this).attr('esencia-view', this.cid);\n\n\t// enable all DOM events\n\tthis.delegateEvents();\n\n\tthis.attached = true;\n\n\t// do some user afterAttach actions\n\tthis.afterAttach();\n\n\t// trigger attach event\n\tthis.trigger('attach');\n\n\treturn this;\n};\n\n/**\n * Detach all nested views\n *\n * @return {Esencia.View} - view instance for chaining\n */\n\nView.detachViews = function() {\n\t// iterate by each views groups\n\t_(this.views).each(function(viewsGroup) {\n\t\t// return if views group is empty\n\t\tif (!viewsGroup.length) return;\n\n\t\t// call detach method for each nested view from views group\n\t\t_(viewsGroup).each(function(view) {\n\t\t\t// recursive detach all nested views\n\t\t\tview.detachViews();\n\n\t\t\t// detach current view\n\t\t\tview.detach();\n\t\t});\n\t});\n\n\t// return this for chaining\n\treturn this;\n};\n\n/**\n * beforeDetach is empty by default\n * It called before detach method call, could be overriden to add some specific\n * logic before view detach from dom\n *\n * @return {Esencia.View} - view instance for chaining\n */\n\nView.beforeDetach = function() {\n\treturn this;\n};\n\n/**\n * Detach view from current view $el\n *\n * @return {Esencia.View} - view instance for chaining\n */\n\nView.detach = function() {\n\t// return if current view is not already attached\n\tif (!this.attached) return this;\n\n\t// trigger detach event\n\tthis.trigger('detach');\n\n\t// do some user beforeDetach actions\n\tthis.beforeDetach();\n\n\t// remove attr and data from $el\n\tthis.$el.removeData('esencia-view').removeAttr('esencia-view');\n\n\t// disable all DOM events\n\tthis.undelegateEvents();\n\n\tthis.attached = false;\n\n\t// return this for chaining\n\treturn this;\n};\n\n/**\n * Remove view from parent container and remove element from DOM\n */\n\nView.remove = function() {\n\t// remove current view from parent view container\n\tif (this.parent) {\n\t\tthis.parent.removeView(this, this.container);\n\t}\n\n\t// detach all nested views first\n\tthis.detachViews();\n\n\t// detach current view\n\tthis.detach();\n\n\t// remove DOM element\n\treturn backbone.View.prototype.remove.call(this);\n};\n\n/**\n * Get view, that attached to closest element with attr `esencia-view`\n *\n * @param {String | $} selector\n * @return {Esencia.View | Null}\n */\n\nView.getClosestView = function(selector) {\n\tvar $selector = $(selector);\n\n\tif (!$selector.is('[esencia-view]')) {\n\t\t$selector = $selector.closest('[esencia-view]');\n\t}\n\n\treturn $selector.length ? $selector.data('esencia-view') : null;\n};\n\nmodule.exports = backbone.View.extend(View);\n","'use strict';\n\nvar backbone = require('backbone');\nvar _ = require('underscore');\nvar Router = require('./classes/router');\nvar Collection = require('./classes/collection');\nvar Model = require('./classes/model');\nvar View = require('./classes/view');\nvar ComponentsManager = require('./classes/componentsManager');\nvar componentsManager = require('./utils/componentsManager');\nvar extend = require('./utils/extend');\n\nvar Esencia = exports;\n\n// Allow the `Esencia` object to serve as a global event bus, for folks who\n// want global \"pubsub\" in a convenient place.\n_.extend(Esencia, backbone.Events);\n\n// Export some Backbone fields\nvar backboneFields = ['Events', 'History', 'history'];\n_.extend(Esencia, _.pick(backbone, backboneFields));\n\n// Export all Esencia classes\n_.extend(Esencia, {\n\tRouter: Router,\n\tCollection: Collection,\n\tModel: Model,\n\tView: View,\n\tComponentsManager: ComponentsManager\n});\n\n// Export the default Esencia.componentsManager\nEsencia.componentsManager = componentsManager;\n\n// Export extend helper for subclassing\nEsencia.extend = extend;\n","'use strict';\n\nvar ComponentsManager = require('../classes/componentsManager');\n\n// Create the default Esencia.componentsManager\nmodule.exports = new ComponentsManager();\n","'use strict';\n\nvar _ = require('underscore');\n\n// Default http method type for exec methods\nvar DEFAULT_EXEC_TYPE = 'PUT';\n\n// Throw an error when a URL is needed, and none is supplied.\nvar urlError = function() {\n\tthrow new Error('A \"url\" property or function must be specified');\n};\n\n// Wrap an optional error callback with a fallback error event.\nexports.wrapError = function(model, options) {\n\tvar error = options.error;\n\toptions.error = function(resp) {\n\t\tif (error) error.call(options.context, model, resp, options);\n\t\tmodel.trigger('error', model, resp, options);\n\t};\n};\n\nexports.prepareOptions = function(method, model, options) {\n\toptions = _.extend({\n\t\ttype: DEFAULT_EXEC_TYPE,\n\t\tdataType: 'json',\n\t\tcontentType: 'application/json',\n\t\tprocessData: false\n\t}, options);\n\n\t// Ensure that we have a URL and add method name to it\n\tif (!options.url) {\n\t\tvar url = _.result(model, 'url') || urlError();\n\t\toptions.url = url.replace(/[^\\/]$/, '$&/') + method;\n\t}\n\n\t// stringify data to json\n\tif (options.data && _.isObject(options.data) && !options.processData) {\n\t\toptions.data = JSON.stringify(options.data);\n\t}\n\n\treturn options;\n};\n\n// HTTP type to backbone sync methods map\nvar baseMethodsMap = {\n\t'POST': 'create',\n\t'PUT': 'update',\n\t'PATCH': 'patch',\n\t'DELETE': 'delete',\n\t'GET': 'read'\n};\n\nexports.getFakeBaseMethod = function(options) {\n\treturn baseMethodsMap[options.type.toUpperCase()];\n};\n","'use strict';\n\nvar backbone = require('backbone');\n\n// There is no good exports of extend method from backbone.\n// Take it from View and add to ComponentsManager because no other ways\nmodule.exports = backbone.View.extend;\n"],"sourceRoot":"."}