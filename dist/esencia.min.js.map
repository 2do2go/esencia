{"version":3,"sources":["esencia.js","lib/collection.js","lib/componentsManager.js","lib/esencia.js","lib/router.js","lib/view.js"],"names":["factory","define","amd","exports","module","require","this","Esencia","_","Backbone","__external__","__external_Backbone","_require","id","cache","modules","call","backbone","Collection","baseMethods","execMethodType","sync","method","model","options","contains","prototype","params","type","dataType","contentType","processData","url","result","urlError","charAt","length","data","isObject","JSON","stringify","xhr","ajax","extend","trigger","exec","clone","collection","success","resp","error","Error","View","ComponentsManager","pick","componentManagerOptions","components","componentsTree","initialize","apply","arguments","componentOptions","Events","rootComponentEl","addRootComponent","RootView","el","add","name","parent","defaults","process","component","isUndefined","uniqueId","isString","isNull","get","remove","callback","noop","newComponentsTree","_calculateTree","_applyTree","parentNode","oldNode","node","child","_isTreeNodeChanged","view","attached","isUnchanged","self","iterateNode","childNode","onViewResolve","setData","container","setView","renderViews","attachViews","render","oldView","detach","chain","extendOwn","viewOptions","value","isWaiting","listenToOnce","oldChildViewContainer","oldChildView","removeView","Router","root","pushState","namedParameters","nowhereUrl","config","autoloadModules","modulesPath","defaultModuleName","onModuleError","routerOptions","constructor","componentsManager","router","urlParams","history","route","setModule","_populateUrlParams","key","has","filter","each","isFunction","defaultUrlParams","args","_defaultMiddleware","navigate","fragment","indexOf","substring","force","replace","omit","qs","toFragment","val","undefined","next","middleware","defaultMiddleware","moduleName","split","find","identity","moduleInit","start","$","splice","Array","delegateEventSplitter","nestedEventTypes","templateHelpers","waitsCounter","waitAvailable","views","collections","models","template","_prepareEvents","_prepareViews","wait","delegateNestedEvents","once","defer","_render","html","renderTemplate","getTemplateData","$el","setElement","_ensureElement","$container","attach","viewsGroup","first","containerEl","domChanged","some","$els","push","append","index","_updateViews","setViews","appendView","_insertViews","appendViews","prependView","prependViews","insertView","insertViews","getView","_removeViews","removeViews","getViews","concat","removedViews","viewObjs","uniq","map","viewObj","sortBy","undelegateNestedEvents","element","$previousEl","_setElement","replaceWith","delegateEvents","events","entities","isArray","listeners","_nestedEventsHash","listener","entity","listenTo","eventName","handler","stopListening","typeEventsHash","match","entityKeys","bind","entityKey","afterAttach","previousView","attr","cid","detachViews","beforeDetach","removeData","removeAttr","undelegateEvents","getClosestView","selector","$selector","is","closest"],"mappings":"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","file":"esencia.min.js","sourcesContent":["(function (factory) {\n    if (typeof define === 'function' && define.amd) {\n        define([\n            'underscore',\n            'backbone'\n        ], factory);\n    } else if (typeof exports === 'object') {\n        module.exports = factory(require('underscore'), require('backbone'));\n    } else {\n        this.Esencia = factory(_, Backbone);\n    }\n}(function (__external__, __external_Backbone) {\n    var global = this, define;\n    function _require(id) {\n        var module = _require.cache[id];\n        if (!module) {\n            var exports = {};\n            module = _require.cache[id] = {\n                id: id,\n                exports: exports\n            };\n            _require.modules[id].call(exports, module, exports);\n        }\n        return module.exports;\n    }\n    _require.cache = [];\n    _require.modules = [\n        function (module, exports) {\n            'use strict';\n            var _ = _require(6);\n            var backbone = _require(5);\n            var Collection = {};\n            var baseMethods = [\n                    'create',\n                    'update',\n                    'patch',\n                    'delete',\n                    'read'\n                ];\n            var execMethodType = 'PUT';\n            Collection.sync = function (method, model, options) {\n                if (!_.contains(baseMethods, method)) {\n                    options = options || {};\n                    var params = {\n                            type: execMethodType,\n                            dataType: 'json',\n                            contentType: 'application/json',\n                            processData: false\n                        };\n                    if (!options.url) {\n                        var url = _.result(model, 'url') || urlError();\n                        params.url = url + (url.charAt(url.length - 1) === '/' ? '' : '/') + method;\n                    }\n                    if (options.data && _.isObject(options.data)) {\n                        options.data = JSON.stringify(options.data);\n                    }\n                    var xhr = options.xhr = backbone.ajax(_.extend(params, options));\n                    model.trigger('request', model, xhr, options);\n                    return xhr;\n                } else {\n                    return backbone.Collection.prototype.sync.call(this, method, model, options);\n                }\n            };\n            Collection.exec = function (method, options) {\n                options = options ? _.clone(options) : {};\n                var collection = this;\n                var success = options.success;\n                options.success = function (resp) {\n                    if (success)\n                        success(collection, resp, options);\n                    collection.trigger('exec:' + method, collection, resp, options);\n                };\n                var error = options.error;\n                options.error = function (resp) {\n                    if (error)\n                        error(collection, resp, options);\n                    collection.trigger('error', collection, resp, options);\n                };\n                return this.sync(method, this, options);\n            };\n            var urlError = function () {\n                throw new Error('A \"url\" property or function must be specified');\n            };\n            module.exports = backbone.Collection.extend(Collection);\n        },\n        function (module, exports) {\n            'use strict';\n            var _ = _require(6);\n            var backbone = _require(5);\n            var View = _require(4);\n            var ComponentsManager = function (options) {\n                _.extend(this, _.pick(options, componentManagerOptions));\n                this.options = options;\n                this.components = {};\n                this.componentsTree = null;\n                this.initialize.apply(this, arguments);\n            };\n            var componentManagerOptions = [\n                    'rootComponentEl',\n                    'viewOptions'\n                ];\n            var componentOptions = [\n                    'name',\n                    'parent',\n                    'container',\n                    'View',\n                    'models',\n                    'collections',\n                    'viewOptions'\n                ];\n            _.extend(ComponentsManager.prototype, backbone.Events, {\n                rootComponentEl: 'html',\n                initialize: function () {\n                },\n                addRootComponent: function () {\n                    var RootView = View.extend({ el: this.rootComponentEl });\n                    this.add({\n                        name: '',\n                        parent: null,\n                        View: RootView\n                    });\n                },\n                add: function (options) {\n                    options = _({}).defaults(options, {\n                        parent: '',\n                        process: false\n                    });\n                    var component = _(options).pick(componentOptions);\n                    if (_.isUndefined(component.name)) {\n                        component.name = _.uniqueId('auto-named-component');\n                    }\n                    if (!_.isString(component.name)) {\n                        throw new Error('Component `name` option should be a string');\n                    }\n                    if (component.name in this.components) {\n                        throw new Error('Duplicate component with name \"' + component.name + '\"');\n                    }\n                    if (!component.View) {\n                        throw new Error('Component `View` option is required');\n                    }\n                    if (!_.isString(component.parent) && !_.isNull(component.parent)) {\n                        throw new Error('Component `parent` option should be a string or null');\n                    }\n                    this.components[component.name] = component;\n                    if (options.process) {\n                        this.process(component.name);\n                    }\n                    return component;\n                },\n                get: function (name) {\n                    return this.components[name] || null;\n                },\n                remove: function (name) {\n                    delete this.components[name];\n                },\n                process: function (name, callback) {\n                    callback = callback || _.noop;\n                    var newComponentsTree = this._calculateTree(name);\n                    this._applyTree({\n                        parentNode: null,\n                        oldNode: this.componentsTree,\n                        node: newComponentsTree\n                    }, callback);\n                },\n                _calculateTree: function (name, child) {\n                    var component = this.components[name];\n                    if (!component) {\n                        throw new Error('Unknown component with name \"' + name + '\"');\n                    }\n                    var node = { name: name };\n                    if (child) {\n                        node.child = child;\n                    }\n                    if (_.isString(component.parent)) {\n                        return this._calculateTree(component.parent, node);\n                    } else {\n                        return node;\n                    }\n                },\n                _isTreeNodeChanged: function (oldNode, node) {\n                    if (!oldNode || oldNode.name !== node.name || !oldNode.view)\n                        return true;\n                    var component = this.components[node.name];\n                    if (oldNode.view instanceof component.View === false)\n                        return true;\n                    if (!oldNode.view.attached)\n                        return true;\n                    return !oldNode.view.isUnchanged();\n                },\n                _applyTree: function (params, callback) {\n                    var self = this;\n                    var parentNode = params.parentNode;\n                    var iterateNode = function (oldNode, node) {\n                        var childNode = node.child;\n                        delete node.child;\n                        if (parentNode) {\n                            parentNode.child = node;\n                        } else {\n                            self.componentsTree = node;\n                        }\n                        if (childNode) {\n                            self._applyTree({\n                                parentNode: node,\n                                oldNode: oldNode && oldNode.child || null,\n                                node: childNode\n                            }, callback);\n                        } else {\n                            callback();\n                        }\n                    };\n                    var node = params.node;\n                    var oldNode = params.oldNode;\n                    var component = this.components[node.name];\n                    var onViewResolve = function (view) {\n                        node.view = view;\n                        view.setData();\n                        if (component.container) {\n                            if (!parentNode) {\n                                throw new Error('Parent component should exist for component with `container` option');\n                            }\n                            parentNode.view.setView(view, component.container).renderViews().attachViews();\n                        } else {\n                            view.render();\n                        }\n                        iterateNode(null, node);\n                    };\n                    var oldView = oldNode && oldNode.view;\n                    if (this._isTreeNodeChanged(oldNode, node)) {\n                        if (oldView) {\n                            if (oldView.container) {\n                                if (!component.container || oldView.container !== component.container) {\n                                    oldView.remove();\n                                }\n                            } else {\n                                oldView.detach();\n                            }\n                        }\n                        var view = new component.View(_(component).chain().pick('models', 'collections').extendOwn(_(component).result('viewOptions'), this.viewOptions).value());\n                        if (view.isWaiting()) {\n                            self.listenToOnce(view, 'resolve', function () {\n                                onViewResolve(view);\n                            });\n                        } else {\n                            onViewResolve(view);\n                        }\n                    } else {\n                        var oldChildView = oldNode.child && oldNode.child.view;\n                        var oldChildViewContainer;\n                        if (oldChildView) {\n                            oldChildViewContainer = oldChildView.container;\n                            if (oldChildViewContainer) {\n                                oldView.removeView(oldChildView, oldChildViewContainer);\n                            }\n                        }\n                        node.view = oldView;\n                        oldView.setData();\n                        oldView.render();\n                        if (oldChildView && oldChildViewContainer) {\n                            oldView.setView(oldChildView, oldChildViewContainer);\n                        }\n                        iterateNode(oldNode, node);\n                    }\n                }\n            });\n            ComponentsManager.extend = View.extend;\n            module.exports = ComponentsManager;\n        },\n        function (module, exports) {\n            'use strict';\n            var Router = _require(3);\n            var Collection = _require(0);\n            var View = _require(4);\n            var ComponentsManager = _require(1);\n            module.exports.Router = Router;\n            module.exports.Collection = Collection;\n            module.exports.View = View;\n            module.exports.ComponentsManager = ComponentsManager;\n        },\n        function (module, exports) {\n            'use strict';\n            var _ = _require(6);\n            var backbone = _require(5);\n            var ComponentsManager = _require(1);\n            var Router = {\n                    root: '/',\n                    pushState: false,\n                    namedParameters: false,\n                    nowhereUrl: '___',\n                    config: {},\n                    autoloadModules: true,\n                    modulesPath: 'modules/',\n                    defaultModuleName: 'main',\n                    onModuleError: function () {\n                    }\n                };\n            var routerOptions = [\n                    'root',\n                    'pushState',\n                    'namedParameters',\n                    'nowhereUrl',\n                    'config',\n                    'autoloadModules',\n                    'modulesPath',\n                    'defaultModuleName',\n                    'onModuleError'\n                ];\n            Router.constructor = function (options) {\n                options = options || {};\n                _.extend(this, _.pick(options, routerOptions));\n                this.options = options;\n                this.componentsManager = new ComponentsManager(_.extend({}, options, { viewOptions: { router: this } }));\n                this.urlParams = {};\n                this.modules = {};\n                this.history = backbone.history;\n                backbone.Router.namedParameters = this.namedParameters;\n                backbone.Router.apply(this, arguments);\n                if (options.autoloadModules) {\n                    this.route('*url', function (params) {\n                        this.setModule(params);\n                    });\n                }\n            };\n            Router._populateUrlParams = function () {\n                var self = this;\n                var key;\n                for (key in this.urlParams) {\n                    if (_(this.urlParams).has(key)) {\n                        delete this.urlParams[key];\n                    }\n                }\n                _(arguments).chain().filter(_.isObject).each(function (params) {\n                    params = _.isFunction(params) ? params.call(self) : params;\n                    _.extendOwn(self.urlParams, params);\n                });\n                return this.urlParams;\n            };\n            Router.component = function (options) {\n                var self = this;\n                var component = this.componentsManager.add(options);\n                if (!_.isUndefined(options.url)) {\n                    this.route(options.url, component.name, function (params) {\n                        self._populateUrlParams(options.defaultUrlParams, params);\n                        self.componentsManager.process(component.name);\n                    });\n                }\n            };\n            Router.route = function (url, name, callback) {\n                var router = this;\n                if (_.isFunction(name)) {\n                    callback = name;\n                    name = '';\n                }\n                backbone.Router.prototype.route.call(this, url, name, function () {\n                    var args = arguments;\n                    router._defaultMiddleware({\n                        url: url,\n                        name: name,\n                        callback: callback\n                    }, function () {\n                        callback.apply(router, args);\n                    });\n                });\n            };\n            Router.navigate = function (fragment, options) {\n                options = options || {};\n                if (fragment.indexOf(this.root) === 0) {\n                    fragment = fragment.substring(this.root.length);\n                }\n                if (options.force) {\n                    this.navigate(this.nowhereUrl, {\n                        replace: options.replace,\n                        trigger: false\n                    });\n                    options = _(options).chain().omit('force').extend({ replace: true }).value();\n                    return this.navigate(fragment, options);\n                }\n                options = _(options || {}).defaults({\n                    trigger: true,\n                    params: {}\n                });\n                var qs = options.qs;\n                if (this.toFragment && qs) {\n                    _(qs).each(function (val, key, qs) {\n                        if (val === undefined || val === null)\n                            delete qs[key];\n                    });\n                    fragment = this.toFragment(fragment, qs);\n                    delete options.qs;\n                }\n                backbone.Router.prototype.navigate.call(this, fragment, options);\n            };\n            Router._defaultMiddleware = function (route, next) {\n                next();\n            };\n            Router.middleware = function (middleware) {\n                var router = this;\n                var defaultMiddleware = this._defaultMiddleware;\n                this._defaultMiddleware = function (route, next) {\n                    defaultMiddleware.call(router, route, function () {\n                        middleware.call(router, route, next);\n                    });\n                };\n                return this;\n            };\n            Router.setModule = function (params) {\n                var router = this;\n                var url = params.url;\n                delete params.url;\n                var moduleName = _(url.split('/')).find(_.identity) || this.defaultModuleName;\n                require([this.modulesPath + moduleName], function (moduleInit) {\n                    if (!router.modules[moduleName]) {\n                        moduleInit(router);\n                        router.modules[moduleName] = true;\n                        router.navigate(url, {\n                            replace: true,\n                            force: true,\n                            qs: params\n                        });\n                    }\n                }, this.onModuleError);\n            };\n            Router.start = function () {\n                this.componentsManager.addRootComponent();\n                backbone.history.start({\n                    pushState: this.pushState,\n                    root: this.root\n                });\n            };\n            module.exports = backbone.Router.extend(Router);\n        },\n        function (module, exports) {\n            'use strict';\n            var _ = _require(6);\n            var backbone = _require(5);\n            var $ = backbone.$;\n            var splice = Array.prototype.splice;\n            var delegateEventSplitter = /^(\\S+)\\s*(.*)$/;\n            var nestedEventTypes = [\n                    'views',\n                    'collections',\n                    'models'\n                ];\n            var View = {\n                    templateHelpers: {},\n                    waitsCounter: 0,\n                    waitAvailable: true,\n                    attached: false\n                };\n            var viewOptions = [\n                    'views',\n                    'collections',\n                    'models',\n                    'data',\n                    'events',\n                    'router',\n                    'templateHelpers'\n                ];\n            View.constructor = function (options) {\n                var self = this;\n                options = options || {};\n                this.views = {};\n                this.collections = {};\n                this.models = {};\n                this.data = {};\n                _.extend(this, _.pick(options, viewOptions));\n                this.options = options;\n                if (this.template && !_.isFunction(this.template)) {\n                    throw new Error('View `template` option should be a function');\n                }\n                this._prepareEvents();\n                this._prepareViews();\n                backbone.View.apply(this, arguments);\n                _(this.views).each(function (views) {\n                    _(views).each(function (view) {\n                        if (view.isWaiting()) {\n                            self.listenToOnce(view, 'resolve', self.wait());\n                        }\n                    });\n                });\n                this.waitAvailable = false;\n                _(this.collections).each(function (collection, key) {\n                    self.delegateNestedEvents('collections', key, collection);\n                });\n                _(this.models).each(function (model, key) {\n                    self.delegateNestedEvents('models', key, model);\n                });\n            };\n            View.setData = function (data) {\n                if (data)\n                    this.data = data;\n                return this;\n            };\n            View.isUnchanged = function () {\n                return true;\n            };\n            View.wait = function () {\n                if (!this.waitAvailable) {\n                    throw new Error('Method .wait() is available only in the constructor');\n                }\n                var self = this;\n                this.waitsCounter++;\n                return _.once(function () {\n                    _.defer(function () {\n                        self.waitsCounter--;\n                        if (!self.isWaiting()) {\n                            self.trigger('resolve');\n                        }\n                    });\n                });\n            };\n            View.isWaiting = function () {\n                return this.waitsCounter > 0;\n            };\n            View._render = function (options) {\n                if (this.isWaiting())\n                    return this;\n                options = options || {};\n                if (this.template) {\n                    if (options.force || !this.attached || !this.isUnchanged()) {\n                        this.detach();\n                        var html = this.renderTemplate(this.template, this.getTemplateData());\n                        var $el = $(html);\n                        if (!$el.length) {\n                            throw new Error('View template produces empty html');\n                        }\n                        if ($el.length > 1) {\n                            throw new Error('View template produces html with more than one root elements');\n                        }\n                        this.setElement($el);\n                    }\n                } else {\n                    if (!this.$el.length)\n                        this._ensureElement();\n                }\n                this.renderViews(options);\n                if (!this.parent || this.$container) {\n                    this.attachViews();\n                    this.attach();\n                }\n                return this;\n            };\n            View.render = function (options) {\n                return this._render(options);\n            };\n            View.getTemplateData = function () {\n                return this.data;\n            };\n            View.renderTemplate = function (template, data) {\n                data = _(this).chain().result('templateHelpers').extend(data).value();\n                return template(data);\n            };\n            View.renderViews = function (options) {\n                var self = this;\n                _(this.views).each(function (viewsGroup, container) {\n                    if (!viewsGroup.length)\n                        return;\n                    _(viewsGroup).each(function (view) {\n                        view.render(options);\n                    });\n                    var $container = container ? self.$(container).first() : self.$el;\n                    if (!$container.length) {\n                        throw new Error('Container \"' + container + '\" is not found');\n                    }\n                    var containerEl = $container.get(0);\n                    var domChanged = _(viewsGroup).some(function (view) {\n                            return !view.attached || !view.$container || view.$container.get(0) !== containerEl;\n                        });\n                    if (domChanged) {\n                        var $els = [];\n                        _(viewsGroup).each(function (view) {\n                            view.$container = $container;\n                            $els.push(view.$el);\n                        });\n                        $container.append($els);\n                    }\n                });\n                return this;\n            };\n            View.setView = function (view, container, index) {\n                return this._updateViews([view], container, index);\n            };\n            View.setViews = function (views, container, index) {\n                return this._updateViews(views, container, index);\n            };\n            View.appendView = function (view, container) {\n                return this._insertViews([view], container);\n            };\n            View.appendViews = function (views, container) {\n                return this._insertViews(views, container);\n            };\n            View.prependView = function (view, container) {\n                return this._insertViews([view], container, 0);\n            };\n            View.prependViews = function (views, container) {\n                return this._insertViews(views, container, 0);\n            };\n            View.insertView = function (view, container, index) {\n                return this._insertViews([view], container, index);\n            };\n            View.insertViews = function (views, container, index) {\n                return this._insertViews(views, container, index);\n            };\n            View.removeView = function (view, container, index) {\n                if (arguments.length < 2) {\n                    throw new Error('\"view\" or \"index\" arguments must be specified');\n                }\n                if (_.isString(view)) {\n                    index = container;\n                    container = view;\n                    view = this.getView(container, index);\n                    if (!view)\n                        return this;\n                }\n                return this._removeViews([view], container);\n            };\n            View.removeViews = function (views, container) {\n                if (_.isString(views)) {\n                    container = views;\n                    views = this.getViews(container);\n                }\n                return this._removeViews(views, container);\n            };\n            View.getView = function (container, index) {\n                return this.getViews(container)[index || 0] || null;\n            };\n            View.getViews = function (container) {\n                return _.clone(this.views[container]) || [];\n            };\n            View._insertViews = function (views, container, index) {\n                var self = this;\n                var viewsGroup = this.getViews(container);\n                _(views).each(function (view) {\n                    if (view.parent) {\n                        view.parent.removeView(view, view.container);\n                    }\n                });\n                if (viewsGroup.length) {\n                    if (typeof index === 'undefined') {\n                        index = viewsGroup.length;\n                    }\n                    splice.apply(this.views[container], [\n                        index,\n                        0\n                    ].concat(views));\n                } else {\n                    this.views[container] = views;\n                }\n                _(views).each(function (view) {\n                    view.parent = self;\n                    view.container = container;\n                });\n                this.delegateNestedEvents('views', container, views);\n                return this;\n            };\n            View._updateViews = function (views, container, index) {\n                var viewsGroup = this.getViews(container);\n                if (viewsGroup.length) {\n                    var removedViews = [];\n                    if (typeof index !== 'undefined') {\n                        removedViews = this.getView(container, index);\n                        removedViews = removedViews ? [removedViews] : [];\n                    } else {\n                        removedViews = viewsGroup;\n                    }\n                    if (removedViews.length) {\n                        this._removeViews(removedViews, container);\n                        _(removedViews).each(function (view) {\n                            view.remove();\n                        });\n                    }\n                }\n                return this._insertViews(views, container, index);\n            };\n            View._removeViews = function (views, container) {\n                var self = this;\n                var viewsGroup = this.getViews(container);\n                if (!viewsGroup.length)\n                    return this;\n                var viewObjs = _.chain(views).uniq().map(function (view) {\n                        return {\n                            view: view,\n                            index: _.indexOf(viewsGroup, view)\n                        };\n                    }).filter(function (viewObj) {\n                        return viewObj.index >= 0;\n                    }).sortBy(function (viewObj) {\n                        return -viewObj.index;\n                    }).value();\n                if (!viewObjs.length)\n                    return this;\n                _(viewObjs).each(function (viewObj) {\n                    var view = viewObj.view;\n                    splice.call(self.views[container], viewObj.index, 1);\n                    self.undelegateNestedEvents(view);\n                    delete view.parent;\n                });\n                return this;\n            };\n            View.setElement = function (element) {\n                var $previousEl = this.$el;\n                this._setElement(element);\n                if ($previousEl && this.$container) {\n                    $previousEl.replaceWith(this.$el);\n                }\n                return this;\n            };\n            View.delegateEvents = function (events) {\n                events = events || _.result(this, 'events');\n                if (!events)\n                    return this;\n                events = _(events).omit(nestedEventTypes);\n                return backbone.View.prototype.delegateEvents.call(this, events);\n            };\n            View.delegateNestedEvents = function (type, key, entities) {\n                var self = this;\n                if (!_.isArray(entities))\n                    entities = [entities];\n                var listeners = this._nestedEventsHash[type][key];\n                if (listeners) {\n                    _(listeners).each(function (listener) {\n                        _(entities).each(function (entity) {\n                            self.listenTo(entity, listener.eventName, listener.handler);\n                        });\n                    });\n                }\n                return this;\n            };\n            View.undelegateNestedEvents = function (entities) {\n                var self = this;\n                if (!_.isArray(entities))\n                    entities = [entities];\n                _(entities).each(function (entity) {\n                    self.stopListening(entity);\n                });\n                return this;\n            };\n            View._prepareEvents = function (events) {\n                var self = this;\n                this._nestedEventsHash = {};\n                _(nestedEventTypes).each(function (type) {\n                    self._nestedEventsHash[type] = {};\n                });\n                events = events || _.result(this, 'events');\n                if (!events)\n                    return;\n                _(nestedEventTypes).each(function (type) {\n                    var typeEventsHash = self._nestedEventsHash[type];\n                    if (!_(events).has(type) || !_.isObject(events[type]))\n                        return;\n                    _(events[type]).each(function (method, key) {\n                        if (!_.isFunction(method))\n                            method = self[method];\n                        if (!method)\n                            return;\n                        var match = key.match(delegateEventSplitter);\n                        var eventName = match[1];\n                        var entityKeys = match[2].replace(/ *, */g, ',').split(',');\n                        method = _.bind(method, self);\n                        _(entityKeys).each(function (entityKey) {\n                            typeEventsHash[entityKey] = typeEventsHash[entityKey] || [];\n                            typeEventsHash[entityKey].push({\n                                eventName: eventName,\n                                handler: method\n                            });\n                        });\n                    });\n                });\n            };\n            View._prepareViews = function () {\n                var self = this;\n                _(this.views).each(function (views, container) {\n                    if (!_.isArray(views))\n                        views = [views];\n                    self.views[container] = views;\n                    self.delegateNestedEvents('views', container, views);\n                });\n            };\n            View.attachViews = function () {\n                _(this.views).each(function (viewsGroup) {\n                    if (!viewsGroup.length)\n                        return;\n                    _(viewsGroup).each(function (view) {\n                        view.attachViews();\n                        view.attach();\n                    });\n                });\n                return this;\n            };\n            View.afterAttach = function () {\n                return this;\n            };\n            View.attach = function () {\n                if (this.attached)\n                    return this;\n                var previousView = this.$el.data('esencia-view');\n                if (previousView)\n                    previousView.detach();\n                this.$el.data('esencia-view', this).attr('esencia-view', this.cid);\n                this.delegateEvents();\n                this.attached = true;\n                this.afterAttach();\n                this.trigger('attach');\n                return this;\n            };\n            View.detachViews = function () {\n                _(this.views).each(function (viewsGroup) {\n                    if (!viewsGroup.length)\n                        return;\n                    _(viewsGroup).each(function (view) {\n                        view.detachViews();\n                        view.detach();\n                    });\n                });\n                return this;\n            };\n            View.beforeDetach = function () {\n                return this;\n            };\n            View.detach = function () {\n                if (!this.attached)\n                    return this;\n                this.trigger('detach');\n                this.beforeDetach();\n                this.$el.removeData('esencia-view').removeAttr('esencia-view');\n                this.undelegateEvents();\n                this.attached = false;\n                return this;\n            };\n            View.remove = function () {\n                if (this.parent) {\n                    this.parent.removeView(this, this.container);\n                }\n                this.detachViews();\n                this.detach();\n                return backbone.View.prototype.remove.call(this);\n            };\n            View.getClosestView = function (selector) {\n                var $selector = $(selector);\n                if (!$selector.is('[esencia-view]')) {\n                    $selector = $selector.closest('[esencia-view]');\n                }\n                return $selector.length ? $selector.data('esencia-view') : null;\n            };\n            module.exports = backbone.View.extend(View);\n        },\n        function (module, exports) {\n            module.exports = __external_Backbone;\n        },\n        function (module, exports) {\n            module.exports = __external__;\n        }\n    ];\n    return _require(2);\n}));\n//# sourceMappingURL=esencia.js.map\n","'use strict';\n\nvar _ = require('underscore');\nvar backbone = require('backbone');\n\nvar Collection = {};\n\n// base methods map\nvar baseMethods = ['create', 'update', 'patch', 'delete', 'read'];\n\nvar execMethodType = 'PUT';\n\n/*\n * Override `sync` to add exec custom method functionality\n */\n\nCollection.sync = function(method, model, options) {\n\t// if sync is called for custom exec method\n\tif (!_.contains(baseMethods, method)) {\n\t\toptions = options || {};\n\n\t\tvar params = {\n\t\t\ttype: execMethodType,\n\t\t\tdataType: 'json',\n\t\t\tcontentType: 'application/json',\n\t\t\tprocessData: false\n\t\t};\n\n\t\t// Ensure that we have a URL and add method name to it\n\t\tif (!options.url) {\n\t\t\tvar url = _.result(model, 'url') || urlError();\n\t\t\tparams.url = url + (url.charAt(url.length - 1) === '/' ? '' : '/') + method;\n\t\t}\n\n\t\t// stringify data to json\n\t\tif (options.data && _.isObject(options.data)) {\n\t\t\toptions.data = JSON.stringify(options.data);\n\t\t}\n\n\t\t// Make the request, allowing the user to override any Ajax options.\n\t\tvar xhr = options.xhr = backbone.ajax(_.extend(params, options));\n\t\tmodel.trigger('request', model, xhr, options);\n\t\treturn xhr;\n\t} else {\n\t\t// call default backbone.Collection sync for base REST methods\n\t\treturn backbone.Collection.prototype.sync.call(this, method, model, options);\n\t}\n};\n\n/*\n * Exec custom non-REST method on collection\n * It trigger `exec:[method]` event after success collection sync\n *\n * @param {String} method\n * @param {Object} options\n */\n\nCollection.exec = function(method, options) {\n\toptions = options ? _.clone(options) : {};\n\n\tvar collection = this;\n\tvar success = options.success;\n\toptions.success = function(resp) {\n\t\tif (success) success(collection, resp, options);\n\t\tcollection.trigger('exec:' + method, collection, resp, options);\n\t};\n\n\tvar error = options.error;\n\toptions.error = function(resp) {\n\t\tif (error) error(collection, resp, options);\n\t\tcollection.trigger('error', collection, resp, options);\n\t};\n\n\treturn this.sync(method, this, options);\n};\n\n// Throw an error when a URL is needed, and none is supplied.\nvar urlError = function() {\n\tthrow new Error('A \"url\" property or function must be specified');\n};\n\nmodule.exports = backbone.Collection.extend(Collection);\n","'use strict';\n\nvar _ = require('underscore');\nvar backbone = require('backbone');\nvar View = require('./view');\n\nvar ComponentsManager = function(options) {\n\t// populate ComponentsManager instance with fields from options\n\t_.extend(this, _.pick(options, componentManagerOptions));\n\t// save original options, it is sometimes usefull\n\tthis.options = options;\n\n\t// all components hash\n\tthis.components = {};\n\n\t// current components tree that rendered at this moment\n\tthis.componentsTree = null;\n\n\tthis.initialize.apply(this, arguments);\n};\n\nvar componentManagerOptions = ['rootComponentEl', 'viewOptions'];\n\n var componentOptions = [\n\t'name', 'parent', 'container', 'View', 'models', 'collections', 'viewOptions'\n];\n\n_.extend(ComponentsManager.prototype, backbone.Events, {\n\trootComponentEl: 'html',\n\n\t/*\n\t * Initialize is an empty function by default. Override it with your own\n\t * initialization logic.\n\t */\n\n\tinitialize: function() {},\n\n\t/*\n\t * Add root component to components list\n\t */\n\n\taddRootComponent: function() {\n\t\tvar RootView = View.extend({\n\t\t\tel: this.rootComponentEl\n\t\t});\n\n\t\tthis.add({\n\t\t\tname: '',\n\t\t\tparent: null,\n\t\t\tView: RootView\n\t\t});\n\t},\n\n\t/*\n\t * Add component to components list\n\t *\n\t * @param {Object} options - component options\n\t */\n\n\tadd: function(options) {\n\t\toptions = _({}).defaults(options, {\n\t\t\tparent: '',\n\t\t\tprocess: false\n\t\t});\n\n\t\tvar component = _(options).pick(componentOptions);\n\n\t\t// generate uniq component name if name is omitted\n\t\tif (_.isUndefined(component.name)) {\n\t\t\tcomponent.name = _.uniqueId('auto-named-component');\n\t\t}\n\n\t\tif (!_.isString(component.name)) {\n\t\t\tthrow new Error('Component `name` option should be a string');\n\t\t}\n\n\t\tif (component.name in this.components) {\n\t\t\tthrow new Error('Duplicate component with name \"' + component.name + '\"');\n\t\t}\n\n\t\tif (!component.View) {\n\t\t\tthrow new Error('Component `View` option is required');\n\t\t}\n\n\t\tif (!_.isString(component.parent) && !_.isNull(component.parent)) {\n\t\t\tthrow new Error('Component `parent` option should be a string or null');\n\t\t}\n\n\t\tthis.components[component.name] = component;\n\n\t\t// process components tree in force mode\n\t\tif (options.process) {\n\t\t\tthis.process(component.name);\n\t\t}\n\n\t\treturn component;\n\t},\n\n\t/*\n\t * Get component by name\n\t *\n\t * @param {String} name - component name\n\t */\n\n\tget: function(name) {\n\t\treturn this.components[name] || null;\n\t},\n\n\t/*\n\t * Remove component by name\n\t *\n\t * @param {String} name - component name\n\t */\n\n\tremove: function(name) {\n\t\tdelete this.components[name];\n\t},\n\n\t/*\n\t * Process components tree and call a callback on done\n\t *\n\t * @param {String} name - component name\n\t * @params {Function} callback\n\t */\n\n\tprocess: function(name, callback) {\n\t\tcallback = callback || _.noop;\n\n\t\tvar newComponentsTree = this._calculateTree(name);\n\n\t\tthis._applyTree({\n\t\t\tparentNode: null,\n\t\t\toldNode: this.componentsTree,\n\t\t\tnode: newComponentsTree\n\t\t}, callback);\n\t},\n\n\t_calculateTree: function(name, child) {\n\t\tvar component = this.components[name];\n\n\t\tif (!component) {\n\t\t\tthrow new Error('Unknown component with name \"' + name + '\"');\n\t\t}\n\n\t\tvar node = {name: name};\n\t\tif (child) {\n\t\t\tnode.child = child;\n\t\t}\n\n\t\tif (_.isString(component.parent)) {\n\t\t\treturn this._calculateTree(component.parent, node);\n\t\t} else {\n\t\t\treturn node;\n\t\t}\n\t},\n\n\t_isTreeNodeChanged: function(oldNode, node) {\n\t\tif (!oldNode || oldNode.name !== node.name || !oldNode.view) return true;\n\t\tvar component = this.components[node.name];\n\t\tif (oldNode.view instanceof component.View === false) return true;\n\t\tif (!oldNode.view.attached) return true;\n\t\treturn !oldNode.view.isUnchanged();\n\t},\n\n\t_applyTree: function(params, callback) {\n\t\tvar self = this;\n\n\t\tvar parentNode = params.parentNode;\n\n\t\tvar iterateNode = function(oldNode, node) {\n\t\t\t// omit child field in new node because it will set recursive\n\t\t\t// and should not exist if error case\n\t\t\tvar childNode = node.child;\n\t\t\tdelete node.child;\n\n\t\t\tif (parentNode) {\n\t\t\t\tparentNode.child = node;\n\t\t\t} else {\n\t\t\t\tself.componentsTree = node;\n\t\t\t}\n\n\t\t\tif (childNode) {\n\t\t\t\tself._applyTree({\n\t\t\t\t\tparentNode: node,\n\t\t\t\t\toldNode: oldNode && oldNode.child || null,\n\t\t\t\t\tnode: childNode\n\t\t\t\t}, callback);\n\t\t\t} else {\n\t\t\t\tcallback();\n\t\t\t}\n\t\t};\n\n\t\tvar node = params.node;\n\t\tvar oldNode = params.oldNode;\n\t\tvar component = this.components[node.name];\n\n\t\tvar onViewResolve = function(view) {\n\t\t\tnode.view = view;\n\t\t\tview.setData();\n\n\t\t\tif (component.container) {\n\t\t\t\tif (!parentNode) {\n\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t'Parent component should exist for component with `container` option'\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tparentNode.view\n\t\t\t\t\t.setView(view, component.container)\n\t\t\t\t\t.renderViews()\n\t\t\t\t\t.attachViews();\n\t\t\t} else {\n\t\t\t\tview.render();\n\t\t\t}\n\n\t\t\t// stop processing old components tree\n\t\t\titerateNode(null, node);\n\t\t};\n\n\t\t// get view from old node\n\t\tvar oldView = oldNode && oldNode.view;\n\n\t\tif (this._isTreeNodeChanged(oldNode, node)) {\n\t\t\tif (oldView) {\n\t\t\t\tif (oldView.container) {\n\t\t\t\t\t// remove old view if container for new view dirrent\n\t\t\t\t\tif (!component.container || oldView.container !== component.container) {\n\t\t\t\t\t\toldView.remove();\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// detach old view if it has not a container\n\t\t\t\t\toldView.detach();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// create new view\n\t\t\tvar view = new (component.View)(\n\t\t\t\t_(component)\n\t\t\t\t\t.chain()\n\t\t\t\t\t.pick('models', 'collections')\n\t\t\t\t\t.extendOwn(_(component).result('viewOptions'), this.viewOptions)\n\t\t\t\t\t.value()\n\t\t\t);\n\n\t\t\tif (view.isWaiting()) {\n\t\t\t\t// wait when view will be resolved\n\t\t\t\tself.listenToOnce(view, 'resolve', function() {\n\t\t\t\t\tonViewResolve(view);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tonViewResolve(view);\n\t\t\t}\n\t\t} else {\n\t\t\t// get old child view if exists\n\t\t\tvar oldChildView = oldNode.child && oldNode.child.view;\n\n\t\t\t// temporary remove child node view from container\n\t\t\t// to prevent recursive renderViews\n\t\t\tvar oldChildViewContainer;\n\t\t\tif (oldChildView) {\n\t\t\t\toldChildViewContainer = oldChildView.container;\n\n\t\t\t\tif (oldChildViewContainer) {\n\t\t\t\t\toldView.removeView(oldChildView, oldChildViewContainer);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// save old view to new node\n\t\t\tnode.view = oldView;\n\n\t\t\t// set data and re-render old view\n\t\t\toldView.setData();\n\t\t\toldView.render();\n\n\t\t\t// revert child node view\n\t\t\tif (oldChildView && oldChildViewContainer) {\n\t\t\t\toldView.setView(oldChildView, oldChildViewContainer);\n\t\t\t}\n\n\t\t\t// proprocessing old components tree\n\t\t\titerateNode(oldNode, node);\n\t\t}\n\t}\n});\n\n/*\n * There is no good exports of extend method from backbone.\n * Take it from View and add to ComponentsManager\n *  because no other ways, ughh :-S.\n */\n\nComponentsManager.extend = View.extend;\n\nmodule.exports = ComponentsManager;\n","'use strict';\n\nvar Router = require('./router');\nvar Collection = require('./collection');\nvar View = require('./view');\nvar ComponentsManager = require('./componentsManager');\n\nmodule.exports.Router = Router;\nmodule.exports.Collection = Collection;\nmodule.exports.View = View;\nmodule.exports.ComponentsManager = ComponentsManager;\n","'use strict';\n\nvar _ = require('underscore');\nvar backbone = require('backbone');\nvar ComponentsManager = require('./componentsManager');\n\n/**\n * Router extends default backbone Router\n */\n\nvar Router = {\n\troot: '/',\n\tpushState: false,\n\tnamedParameters: false,\n\tnowhereUrl: '___',\n\tconfig: {},\n\tautoloadModules: true,\n\tmodulesPath: 'modules/',\n\tdefaultModuleName: 'main',\n\tonModuleError: function() {}\n};\n\nvar routerOptions = [\n\t'root', 'pushState', 'namedParameters', 'nowhereUrl', 'config',\n\t'autoloadModules', 'modulesPath', 'defaultModuleName', 'onModuleError'\n];\n\n/*\n * @constructor\n * @param {Object} [options]\n */\n\nRouter.constructor = function(options) {\n\toptions = options || {};\n\n\t// populate Router instance with fields from options\n\t_.extend(this, _.pick(options, routerOptions));\n\t// save original options, it is sometimes usefull\n\tthis.options = options;\n\n\tthis.componentsManager = new ComponentsManager(\n\t\t_.extend({}, options, {viewOptions: {router: this}})\n\t);\n\n\tthis.urlParams = {};\n\tthis.modules = {};\n\n\tthis.history = backbone.history;\n\n\t/*\n\t * All query parameters can be passed in a single hash using the key\n\t * referenced from the route definition (backbone queryparams will\n\t * do it for us)\n\t */\n\n\tbackbone.Router.namedParameters = this.namedParameters;\n\n\tbackbone.Router.apply(this, arguments);\n\n\tif (options.autoloadModules) {\n\t\tthis.route('*url', function(params) {\n\t\t\tthis.setModule(params);\n\t\t});\n\t}\n};\n\n/*\n * Extend all arguments to single object and replace urlParams with it\n *\n * @param {Object | Function} params1\n * @param {Object | Function} params2\n * etc. ...\n */\n\nRouter._populateUrlParams = function(/* params1, params2, ... */) {\n\tvar self = this;\n\n\t// clean old values from urlParams object\n\tvar key;\n\tfor (key in this.urlParams) {\n\t\tif (_(this.urlParams).has(key)) {\n\t\t\tdelete this.urlParams[key];\n\t\t}\n\t}\n\n\t// populate urlParams with new params\n\t_(arguments)\n\t\t.chain()\n\t\t.filter(_.isObject)\n\t\t.each(function(params) {\n\t\t\tparams = _.isFunction(params) ? params.call(self) : params;\n\t\t\t_.extendOwn(self.urlParams, params);\n\t\t});\n\n\treturn this.urlParams;\n};\n\n/*\n * Add new component to components manager\n *\n * @param {Object} options - component options\n */\n\nRouter.component = function(options) {\n\tvar self = this;\n\n\tvar component = this.componentsManager.add(options);\n\n\t// bind component to route\n\tif (!_.isUndefined(options.url)) {\n\t\tthis.route(options.url, component.name, function(params) {\n\t\t\tself._populateUrlParams(options.defaultUrlParams, params);\n\n\t\t\t// process components tree\n\t\t\tself.componentsManager.process(component.name);\n\t\t});\n\t}\n};\n\n/*\n * Override `route` to add middleware processing functionality\n */\n\nRouter.route = function(url, name, callback) {\n\tvar router = this;\n\n\tif (_.isFunction(name)) {\n\t\tcallback = name;\n\t\tname = '';\n\t}\n\n\tbackbone.Router.prototype.route.call(this, url, name, function() {\n\t\tvar args = arguments;\n\n\t\trouter._defaultMiddleware({\n\t\t\turl: url,\n\t\t\tname: name,\n\t\t\tcallback: callback\n\t\t}, function() {\n\t\t\tcallback.apply(router, args);\n\t\t});\n\t});\n};\n\n/*\n * Override `navigate`\n *\n * @param {String} fragment\n * @param {Object} [options] - hash of params\n * @param {Object} [options.qs] - query string hash\n */\n\nRouter.navigate = function(fragment, options) {\n\toptions = options || {};\n\n\tif (fragment.indexOf(this.root) === 0) {\n\t\tfragment = fragment.substring(this.root.length);\n\t}\n\n\t// force to go to the selected fragment even if we currently on it\n\tif (options.force) {\n\t\tthis.navigate(this.nowhereUrl, {\n\t\t\treplace: options.replace,\n\t\t\ttrigger: false\n\t\t});\n\n\t\toptions = _(options).chain().omit('force').extend({replace: true}).value();\n\n\t\treturn this.navigate(fragment, options);\n\t}\n\n\t// set `trigger` to true by default\n\toptions = _(options || {}).defaults({\n\t\ttrigger: true,\n\t\tparams: {}\n\t});\n\n\t// add support of query string using `toFragment` from backbone.queryparams\n\tvar qs = options.qs;\n\n\tif (this.toFragment && qs) {\n\t\t// reject undefined and null qs parameters\n\t\t_(qs).each(function(val, key, qs) {\n\t\t\tif (val === undefined || val === null) delete qs[key];\n\t\t});\n\n\t\tfragment = this.toFragment(fragment, qs);\n\n\t\tdelete options.qs;\n\t}\n\n\tbackbone.Router.prototype.navigate.call(this, fragment, options);\n};\n\n\n/*\n * Default middleware function\n */\n\nRouter._defaultMiddleware = function(route, next) {\n\tnext();\n};\n\n/**\n * Use passed function as `middleware`\n *\n * @param {Function} middleware - middleware function,\n * `route` and `next` will be passed as arguments.\n * context (`this`) is link to the router object.\n */\n\nRouter.middleware = function(middleware) {\n\tvar router = this;\n\n\tvar defaultMiddleware = this._defaultMiddleware;\n\n\tthis._defaultMiddleware = function(route, next) {\n\t\tdefaultMiddleware.call(router, route, function() {\n\t\t\tmiddleware.call(router, route, next);\n\t\t});\n\t};\n\n\treturn this;\n};\n\n/*\n * Require module file and init it\n *\n * @param {String} params.url Url without query string\n */\n\nRouter.setModule = function(params) {\n\tvar router = this;\n\n\tvar url = params.url;\n\tdelete params.url;\n\n\tvar moduleName = _(url.split('/')).find(_.identity) || this.defaultModuleName;\n\n\t// require module file\n\trequire([this.modulesPath + moduleName], function(moduleInit) {\n\t\t// if module is loaded first time\n\t\tif (!router.modules[moduleName]) {\n\t\t\t// init it\n\t\t\tmoduleInit(router);\n\n\t\t\t// set module init flag to true\n\t\t\trouter.modules[moduleName] = true;\n\n\t\t\t// and navigate again with force flag\n\t\t\trouter.navigate(url, {\n\t\t\t\treplace: true,\n\t\t\t\tforce: true,\n\t\t\t\tqs: params\n\t\t\t});\n\t\t}\n\t}, this.onModuleError);\n};\n\n/*\n * Start routes handling\n */\n\nRouter.start = function() {\n\tthis.componentsManager.addRootComponent();\n\n\tbackbone.history.start({\n\t\tpushState: this.pushState,\n\t\troot: this.root\n\t});\n};\n\nmodule.exports = backbone.Router.extend(Router);\n","'use strict';\n\nvar _ = require('underscore');\nvar backbone = require('backbone');\n\n// Take jquery or other selectors lib from backbone\nvar $ = backbone.$;\n\nvar splice = Array.prototype.splice;\n\n// Cached regex to split keys for `delegate`.\nvar delegateEventSplitter = /^(\\S+)\\s*(.*)$/;\n\n// List of events type for nested entities processed by current view\nvar nestedEventTypes = ['views', 'collections', 'models'];\n\n/**\n * @class Esencia.View\n * @extend Backbone.View\n */\n\nvar View = {\n\t// Helpers (Object|Fuction) which will be passed to the template\n\ttemplateHelpers: {},\n\n\t// views are in the resolved state by default\n\twaitsCounter: 0,\n\n\t// this flag is used to check that .wait() is called\n\t// in the constructor/initialize\n\twaitAvailable: true,\n\n\t// views are not attached by default\n\tattached: false\n};\n\nvar viewOptions = [\n\t'views', 'collections', 'models', 'data', 'events', 'router', 'templateHelpers'\n];\n\n/**\n * @constructor\n * @param {Object} [options]\n */\n\nView.constructor = function(options) {\n\tvar self = this;\n\n\toptions = options || {};\n\n\t// nested views, collections, models and data are empty by default\n\tthis.views = {};\n\tthis.collections = {};\n\tthis.models = {};\n\tthis.data = {};\n\n\t// populate View instance with fields from options\n\t_.extend(this, _.pick(options, viewOptions));\n\t// save original options, it is sometimes usefull\n\tthis.options = options;\n\n\tif (this.template && !_.isFunction(this.template)) {\n\t\tthrow new Error('View `template` option should be a function');\n\t}\n\n\t// create special hash object for all events for fast search\n\tthis._prepareEvents();\n\n\t// normalize nested views hash\n\tthis._prepareViews();\n\n\t// apply default backbone.View constructor\n\tbackbone.View.apply(this, arguments);\n\n\t// set waiting state for current view if some nested view is in waiting state\n\t_(this.views).each(function(views) {\n\t\t_(views).each(function(view) {\n\t\t\tif (view.isWaiting()) {\n\t\t\t\tself.listenToOnce(view, 'resolve', self.wait());\n\t\t\t}\n\t\t});\n\t});\n\n\t// disable .wait(), it available only in the constructor/initialize\n\tthis.waitAvailable = false;\n\n\t// we should delegate events after parent constructor call because\n\t// collections and models could be created in the initialize method\n\n\t// delegate events for each collection\n\t_(this.collections).each(function(collection, key) {\n\t\tself.delegateNestedEvents('collections', key, collection);\n\t});\n\n\t// delegate events for each model\n\t_(this.models).each(function(model, key) {\n\t\tself.delegateNestedEvents('models', key, model);\n\t});\n};\n\n/**\n * Update view data\n * Method is used to update view state, could be overriden to modify nested\n * views state\n *\n * @param {Object} [data] - new data object\n * @return {Esencia.View} - view instance for chaining\n */\n\nView.setData = function(data) {\n\tif (data) this.data = data;\n\treturn this;\n};\n\n/**\n * Check that view is changed and should be re-rendered\n * Method returns true by default (always unchanged), could be overriden\n * for specific logic\n *\n * @return {Boolean}\n */\n\nView.isUnchanged = function() {\n\treturn true;\n};\n\n/**\n * Switch view to the waiting state\n *\n * @return {Function} - callback function, should be called to resolve view\n */\n\nView.wait = function() {\n\tif (!this.waitAvailable) {\n\t\tthrow new Error('Method .wait() is available only in the constructor');\n\t}\n\n\tvar self = this;\n\n\tthis.waitsCounter++;\n\n\t// TODO: think about promises\n\treturn _.once(function() {\n\t\t_.defer(function() {\n\t\t\tself.waitsCounter--;\n\t\t\tif (!self.isWaiting()) {\n\t\t\t\tself.trigger('resolve');\n\t\t\t}\n\t\t});\n\t});\n};\n\n/**\n * @return {Boolean}\n */\n\nView.isWaiting = function() {\n\treturn this.waitsCounter > 0;\n};\n\n/**\n * Render view\n *\n * @override render\n * @param {Object} options\n * @param {Boolean} options.force\n * @return {Esencia.View} - view instance for chaining\n */\n\nView._render = function(options) {\n\t// stop rendering if view in `waiting` state, resolve it first\n\tif (this.isWaiting()) return this;\n\n\toptions = options || {};\n\n\tif (this.template) {\n\t\t// re-render template only if it exists and if it is necessary\n\t\tif (options.force || !this.attached || !this.isUnchanged()) {\n\t\t\t// detach view from DOM element\n\t\t\tthis.detach();\n\n\t\t\t// render template with data\n\t\t\tvar html = this.renderTemplate(this.template, this.getTemplateData());\n\n\t\t\t// render html with jqeury (or other lib) call\n\t\t\tvar $el = $(html);\n\n\t\t\tif (!$el.length) {\n\t\t\t\tthrow new Error('View template produces empty html');\n\t\t\t}\n\n\t\t\tif ($el.length > 1) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t'View template produces html with more than one root elements'\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tthis.setElement($el);\n\t\t}\n\t} else {\n\t\t// re-ensure element if it is not ensured\n\t\tif (!this.$el.length) this._ensureElement();\n\t}\n\n\t// render nested views\n\tthis.renderViews(options);\n\n\tif (!this.parent || this.$container) {\n\t\t// attach all nested views first\n\t\tthis.attachViews();\n\n\t\t// attach current view\n\t\tthis.attach();\n\t}\n\n\t// return this for chaining\n\treturn this;\n};\n\n/**\n * Render view by calling private _render method\n *\n * @override render\n * @return {Esencia.View} - view instance for chaining\n */\n\nView.render = function(options) {\n\treturn this._render(options);\n};\n\n/*\n * Get data for template rendering\n * Returns data by default, could be overriden\n *\n * @return {Object}\n */\n\nView.getTemplateData = function() {\n\treturn this.data;\n};\n\n/*\n * Render template with data. Returns html.\n *\n * @param {Function} template - template function for rendering\n * @param {Object} data - data for rendering\n * @return {String} - rendered html\n */\n\nView.renderTemplate = function(template, data) {\n\tdata = _(this).chain().result('templateHelpers').extend(data).value();\n\n\t// get html\n\treturn template(data);\n};\n\n/*\n * Render all nested view\n *\n * @param {Object} options\n * @param {Boolean} options.force\n * @return {Esencia.View} - view instance for chaining\n*/\n\nView.renderViews = function(options) {\n\tvar self = this;\n\n\t// iterate by each views group\n\t_(this.views).each(function(viewsGroup, container) {\n\t\t// return if view group is empty\n\t\tif (!viewsGroup.length) return;\n\n\t\t// call render for each views from view group\n\t\t_(viewsGroup).each(function(view) {\n\t\t\tview.render(options);\n\t\t});\n\n\t\t// get first container or $el\n\t\tvar $container = container ? self.$(container).first() : self.$el;\n\n\t\tif (!$container.length) {\n\t\t\tthrow new Error('Container \"' + container + '\" is not found');\n\t\t}\n\n\t\tvar containerEl = $container.get(0);\n\n\t\t// dom is changed if some view from group is not in current container\n\t\tvar domChanged = _(viewsGroup).some(function(view) {\n\t\t\treturn (\n\t\t\t\t!view.attached ||\n\t\t\t\t!view.$container ||\n\t\t\t\tview.$container.get(0) !== containerEl\n\t\t\t);\n\t\t});\n\n\t\tif (domChanged) {\n\t\t\t// re-append views group to container\n\t\t\tvar $els = [];\n\n\t\t\t_(viewsGroup).each(function(view) {\n\t\t\t\tview.$container = $container;\n\t\t\t\t$els.push(view.$el);\n\t\t\t});\n\n\t\t\t// TODO: add some rendering optimizations here\n\n\t\t\t// put all views to $container\n\t\t\t$container.append($els);\n\t\t}\n\t});\n\n\t// return this for chaining\n\treturn this;\n};\n\n/*\n * Set view to views group or replace some view in specified position\n * If index is passed it replace only one view with index in views group\n *\n * @param {Esencia.View} view - view to set\n * @param {String} container - container to set\n * @param {Number} [index] - index of view to replace\n * @return {Esencia.View} - view instance for chaining\n */\n\nView.setView = function(view, container, index) {\n\treturn this._updateViews([view], container, index);\n};\n\n/*\n * Set views to views group or replace some view in specified position\n * If index is passed it replace only one view with index in views group\n *\n * @param {Esencia.View[]} views - views to set\n * @param {String} container - container to set\n * @param {Number} [index] - index of view to replace\n * @return {Esencia.View} - view instance for chaining\n */\n\nView.setViews = function(views, container, index) {\n\treturn this._updateViews(views, container, index);\n};\n\n/*\n * Append view to end of views group\n * This method is alias for insertView without index argument\n *\n * @param {Esencia.View} view - view to append\n * @param {String} container - container of views group\n * @return {Esencia.View} - view instance for chaining\n */\n\nView.appendView = function(view, container) {\n\treturn this._insertViews([view], container);\n};\n\n/*\n * Append views to end of views group\n * This method is alias for insertViews without index argument\n *\n * @param {Esencia.View[]} views - views to append\n * @param {String} container - container of views group\n * @return {Esencia.View} - view instance for chaining\n */\n\nView.appendViews = function(views, container) {\n\treturn this._insertViews(views, container);\n};\n\n/*\n * Prepend view to start of views group\n * This method is alias for insertView with `0` as index argument value\n *\n * @param {Esencia.View} view - view to prepend\n * @param {String} container - container of views group\n * @return {Esencia.View} - view instance for chaining\n */\n\nView.prependView = function(view, container) {\n\treturn this._insertViews([view], container, 0);\n};\n\n/*\n * Prepend views to start of views group\n * This method is alias for insertViews with `0` as index argument value\n *\n * @param {Esencia.View[]} views - view to prepend\n * @param {String} container - container of views group\n  * @return {Esencia.View} - view instance for chaining\n */\n\nView.prependViews = function(views, container) {\n\treturn this._insertViews(views, container, 0);\n};\n\n/*\n * Insert view to specified position of views group in the container\n * If index is not passed method inserts view to the end of views group (append)\n *\n * @param {Esencia.View} view - view to insert\n * @param {String} container - container of views group\n * @param {Number} [index] - position in views group\n * @return {Esencia.View} - view instance for chaining\n */\n\nView.insertView = function(view, container, index) {\n\treturn this._insertViews([view], container, index);\n};\n\n/*\n * Insert views to specified position of views group container\n * If index is not passed method inserts views to the end of views group\n *\n * @param {Esencia.View[]} views - views to insert\n * @param {String} container - container of views group\n * @param {Number} [index] - position in views group\n * @return {Esencia.View} - view instance for chaining\n */\n\nView.insertViews = function(views, container, index) {\n\treturn this._insertViews(views, container, index);\n};\n\n/*\n * Remove view from views group container by index or view instance\n * If index is passed it remove view in the index position\n *\n * @param {Esencia.View} [view] - view to remove\n * @param {String} container - container of views group\n * @param {Number} [index] - index of view in views group\n * @return {Esencia.View} - view instance for chaining\n */\n\nView.removeView = function(view, container, index) {\n\tif (arguments.length < 2) {\n\t\tthrow new Error('\"view\" or \"index\" arguments must be specified');\n\t}\n\n\tif (_.isString(view)) {\n\t\tindex = container;\n\t\tcontainer = view;\n\t\tview = this.getView(container, index);\n\t\tif (!view) return this;\n\t}\n\n\treturn this._removeViews([view], container);\n};\n\n/*\n * Remove views from views group container\n * If views are passed remove only these views\n * Othervise remove all views from container\n *\n * @param {Esencia.View[]} [views] - views to remove\n * @param {String} container - container of views group\n * @return {Esencia.View} - view instance for chaining\n */\n\nView.removeViews = function(views, container) {\n\tif (_.isString(views)) {\n\t\tcontainer = views;\n\t\tviews = this.getViews(container);\n\t}\n\n\treturn this._removeViews(views, container);\n};\n\n/*\n * Get single view from container by index\n *\n * @param {String} container - container of views group\n * @param {Number} [index] - index of view in views group\n * @return {Esencia.View}\n */\n\nView.getView = function(container, index) {\n\treturn this.getViews(container)[index || 0] || null;\n};\n\n/*\n * Get views group from container\n *\n * @param {String} container - container of views group\n * @return {Esencia.View[]}\n */\n\nView.getViews = function(container) {\n\treturn _.clone(this.views[container]) || [];\n};\n\nView._insertViews = function(views, container, index) {\n\tvar self = this;\n\n\tvar viewsGroup = this.getViews(container);\n\n\t_(views).each(function(view) {\n\t\tif (view.parent) {\n\t\t\tview.parent.removeView(view, view.container);\n\t\t}\n\t});\n\n\tif (viewsGroup.length) {\n\t\t// if index is not specified set it value as last index of views group\n\t\tif (typeof index === 'undefined') {\n\t\t\tindex = viewsGroup.length;\n\t\t}\n\n\t\t// insert views\n\t\tsplice.apply(this.views[container], [index, 0].concat(views));\n\t} else {\n\t\t// if group is empty - set views as whole views group value\n\t\tthis.views[container] = views;\n\t}\n\n\t// set each view parent to current\n\t_(views).each(function(view) {\n\t\tview.parent = self;\n\t\tview.container = container;\n\t});\n\n\tthis.delegateNestedEvents('views', container, views);\n\n\treturn this;\n};\n\nView._updateViews = function(views, container, index) {\n\tvar viewsGroup = this.getViews(container);\n\n\tif (viewsGroup.length) {\n\t\tvar removedViews = [];\n\n\t\t// if views group is not empty\n\t\tif (typeof index !== 'undefined') {\n\t\t\t// if index is specified\n\t\t\t// remove view from specific position\n\t\t\tremovedViews = this.getView(container, index);\n\t\t\tremovedViews = removedViews ? [removedViews] : [];\n\t\t} else {\n\t\t\t// if no index - remove all views from views group\n\t\t\tremovedViews = viewsGroup;\n\t\t}\n\n\t\tif (removedViews.length) {\n\t\t\t// if remove views array is not empty\n\t\t\t// remove from parent\n\t\t\tthis._removeViews(removedViews, container);\n\n\t\t\t// and remove views\n\t\t\t_(removedViews).each(function(view) {\n\t\t\t\tview.remove();\n\t\t\t});\n\t\t}\n\t}\n\n\t// insert new views\n\treturn this._insertViews(views, container, index);\n};\n\nView._removeViews = function(views, container) {\n\tvar self = this;\n\n\tvar viewsGroup = this.getViews(container);\n\n\tif (!viewsGroup.length) return this;\n\n\tvar viewObjs = _.chain(views).uniq().map(function(view) {\n\t\t\treturn {\n\t\t\t\tview: view,\n\t\t\t\tindex: _.indexOf(viewsGroup, view)\n\t\t\t};\n\t\t}).filter(function(viewObj) {\n\t\t\treturn viewObj.index >= 0;\n\t\t}).sortBy(function(viewObj) {\n\t\t\treturn -viewObj.index;\n\t\t}).value();\n\n\tif (!viewObjs.length) return this;\n\n\t_(viewObjs).each(function(viewObj) {\n\t\tvar view = viewObj.view;\n\n\t\t// remove item from group\n\t\tsplice.call(self.views[container], viewObj.index, 1);\n\n\t\t// undelegate all nested entity events\n\t\tself.undelegateNestedEvents(view);\n\n\t\t// unset view parent\n\t\tdelete view.parent;\n\t});\n\n\treturn this;\n};\n\n/*\n * Original setElement do undelegateEvents/delegateEvents, we remove it\n * because we have special detach/attach methods for this purpose\n *\n * @override setElement\n * @return {Esencia.View} - view instance for chaining\n */\n\nView.setElement = function(element) {\n\tvar $previousEl = this.$el;\n\n\tthis._setElement(element);\n\n\t// insert html to $el\n\tif ($previousEl && this.$container) {\n\t\t$previousEl.replaceWith(this.$el);\n\t}\n\n\treturn this;\n};\n\n/*\n * @override delegateEvents\n */\n\nView.delegateEvents = function(events) {\n\tevents = events || _.result(this, 'events');\n\tif (!events) return this;\n\tevents = _(events).omit(nestedEventTypes);\n\treturn backbone.View.prototype.delegateEvents.call(this, events);\n};\n\nView.delegateNestedEvents = function(type, key, entities) {\n\tvar self = this;\n\tif (!_.isArray(entities)) entities = [entities];\n\tvar listeners = this._nestedEventsHash[type][key];\n\tif (listeners) {\n\t\t_(listeners).each(function(listener) {\n\t\t\t_(entities).each(function(entity) {\n\t\t\t\tself.listenTo(entity, listener.eventName, listener.handler);\n\t\t\t});\n\t\t});\n\t}\n\treturn this;\n};\n\nView.undelegateNestedEvents = function(entities) {\n\tvar self = this;\n\tif (!_.isArray(entities)) entities = [entities];\n\t_(entities).each(function(entity) {\n\t\tself.stopListening(entity);\n\t});\n\treturn this;\n};\n\nView._prepareEvents = function(events) {\n\tvar self = this;\n\n\t// Hash for nested views events fast search\n\tthis._nestedEventsHash = {};\n\t_(nestedEventTypes).each(function(type) {\n\t\tself._nestedEventsHash[type] = {};\n\t});\n\n\tevents = events || _.result(this, 'events');\n\tif (!events) return;\n\n\t// bind all prefixed events to view then call native delegate events\n\t_(nestedEventTypes).each(function(type) {\n\t\tvar typeEventsHash = self._nestedEventsHash[type];\n\n\t\tif (!_(events).has(type) || !_.isObject(events[type])) return;\n\n\t\t_(events[type]).each(function(method, key) {\n\t\t\tif (!_.isFunction(method)) method = self[method];\n\t\t\tif (!method) return;\n\t\t\tvar match = key.match(delegateEventSplitter);\n\t\t\tvar eventName = match[1];\n\t\t\tvar entityKeys = match[2].replace(/ *, */g, ',').split(',');\n\t\t\tmethod = _.bind(method, self);\n\n\t\t\t// fill _nestedEventsHash\n\t\t\t_(entityKeys).each(function(entityKey) {\n\t\t\t\ttypeEventsHash[entityKey] = typeEventsHash[entityKey] || [];\n\t\t\t\ttypeEventsHash[entityKey].push({\n\t\t\t\t\teventName: eventName,\n\t\t\t\t\thandler: method\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t});\n};\n\n/*\n * Wrap all non-array view groups to arrays with one element and delegate events\n */\n\nView._prepareViews = function() {\n\tvar self = this;\n\n\t_(this.views).each(function(views, container) {\n\t\tif (!_.isArray(views)) views = [views];\n\t\tself.views[container] = views;\n\t\tself.delegateNestedEvents('views', container, views);\n\t});\n};\n\n/**\n * Attach all nested views\n *\n * @return {Esencia.View} - view instance for chaining\n */\n\nView.attachViews = function() {\n\t// iterate by each nested views groups\n\t_(this.views).each(function(viewsGroup) {\n\t\t// return if views group is empty\n\t\tif (!viewsGroup.length) return;\n\n\t\t// call attach method for each nested view from views group\n\t\t_(viewsGroup).each(function(view) {\n\t\t\t// recursive attach all nested views\n\t\t\tview.attachViews();\n\n\t\t\t// attach current view\n\t\t\tview.attach();\n\t\t});\n\t});\n\n\t// return this for chaining\n\treturn this;\n};\n\n/*\n * afterAttach is empty by default\n * It called after attach call, could be verriden to add some specific logic\n * for DOM manipulations\n *\n * @return {Esencia.View} - view instance for chaining\n */\n\nView.afterAttach = function() {\n\treturn this;\n};\n\n/*\n * Attach new view to current view $el\n *\n * @return {Esencia.View} - view instance for chaining\n */\n\nView.attach = function() {\n\t// return if current view is already attached\n\tif (this.attached) return this;\n\n\t// detach previous view\n\tvar previousView = this.$el.data('esencia-view');\n\tif (previousView) previousView.detach();\n\n\t// attach current view and set attr\n\tthis.$el.data('esencia-view', this).attr('esencia-view', this.cid);\n\n\t// enable all DOM events\n\tthis.delegateEvents();\n\n\tthis.attached = true;\n\n\t// do some user afterAttach actions\n\tthis.afterAttach();\n\n\t// trigger attach event\n\tthis.trigger('attach');\n\n\treturn this;\n};\n\n/**\n * Detach all nested views\n *\n * @return {Esencia.View} - view instance for chaining\n */\n\nView.detachViews = function() {\n\t// iterate by each views groups\n\t_(this.views).each(function(viewsGroup) {\n\t\t// return if views group is empty\n\t\tif (!viewsGroup.length) return;\n\n\t\t// call detach method for each nested view from views group\n\t\t_(viewsGroup).each(function(view) {\n\t\t\t// recursive detach all nested views\n\t\t\tview.detachViews();\n\n\t\t\t// detach current view\n\t\t\tview.detach();\n\t\t});\n\t});\n\n\t// return this for chaining\n\treturn this;\n};\n\n/*\n * beforeDetach is empty by default\n * It called before detach method call, could be overriden to add some specific\n * logic before view detach from dom\n *\n * @return {Esencia.View} - view instance for chaining\n */\n\nView.beforeDetach = function() {\n\treturn this;\n};\n\n/*\n * Detach view from current view $el\n *\n * @return {Esencia.View} - view instance for chaining\n */\n\nView.detach = function() {\n\t// return if current view is not already attached\n\tif (!this.attached) return this;\n\n\t// trigger detach event\n\tthis.trigger('detach');\n\n\t// do some user beforeDetach actions\n\tthis.beforeDetach();\n\n\t// remove attr and data from $el\n\tthis.$el.removeData('esencia-view').removeAttr('esencia-view');\n\n\t// disable all DOM events\n\tthis.undelegateEvents();\n\n\tthis.attached = false;\n\n\t// return this for chaining\n\treturn this;\n};\n\n/**\n * Remove view from parent container and remove element from DOM\n */\n\nView.remove = function() {\n\t// remove current view from parent view container\n\tif (this.parent) {\n\t\tthis.parent.removeView(this, this.container);\n\t}\n\n\t// detach all nested views first\n\tthis.detachViews();\n\n\t// detach current view\n\tthis.detach();\n\n\t// remove DOM element\n\treturn backbone.View.prototype.remove.call(this);\n};\n\n/*\n * Get view, that attached to closest element with attr `esencia-view`\n *\n * @param {String | $} selector\n * @return {Esencia.View | Null}\n */\n\nView.getClosestView = function(selector) {\n\tvar $selector = $(selector);\n\n\tif (!$selector.is('[esencia-view]')) {\n\t\t$selector = $selector.closest('[esencia-view]');\n\t}\n\n\treturn $selector.length ? $selector.data('esencia-view') : null;\n};\n\nmodule.exports = backbone.View.extend(View);\n"],"sourceRoot":"."}