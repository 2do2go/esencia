{"version":3,"sources":["esencia.js","lib/collection.js","lib/esencia.js","lib/router.js","lib/view.js"],"names":["factory","define","amd","exports","module","require","this","Esencia","_","Backbone","__external__","__external_Backbone","_require","id","cache","modules","call","backbone","Collection","baseMethods","execMethodType","sync","method","model","options","contains","prototype","params","type","dataType","contentType","processData","url","result","urlError","charAt","length","data","isObject","JSON","stringify","xhr","ajax","extend","trigger","exec","clone","collection","success","resp","error","Error","Router","View","root","rootViewEl","modulesPath","defaultModuleName","pushState","namedParameters","autoloadModules","debug","config","onModuleError","nowhereUrl","routerOptions","constructor","pick","components","componentsTree","urlParams","history","apply","arguments","route","setModule","_initRootComponent","RootView","el","component","name","parent","_populateUrlParams","componentName","key","has","componentOptions","router","defaults","defaultUrlParams","viewOptions","process","isUndefined","uniqueId","isString","isNull","_processComponent","_calculateComponentsTree","child","node","_isComponentTreeNodeChanged","oldNode","view","attached","isUnchanged","_applyComponentsTree","callback","self","parentNode","iterateNode","childNode","onViewResolve","setData","container","setView","renderViews","attachViews","render","oldView","remove","detach","chain","value","waiting","once","oldChildViewContainer","oldChildView","removeView","noop","newComponentsTree","isFunction","args","_defaultMiddleware","navigate","fragment","indexOf","substring","force","replace","omit","qs","toFragment","each","val","undefined","next","middleware","defaultMiddleware","moduleName","split","find","identity","moduleInit","start","$","splice","Array","delegateEventSplitter","nestedEventTypes","templateHelpers","views","template","_normalizeViews","_prepareNestedEvents","collections","delegateNestedEvents","models","wait","console","log","$el","html","renderTemplate","getTemplateData","setElement","_ensureElement","$container","attach","viewsGroup","first","containerEl","get","domChanged","some","$els","push","append","index","_updateViews","setViews","replaceView","replaceViews","appendView","_insertViews","appendViews","prependView","prependViews","insertView","insertViews","getView","_removeViews","removeViews","getViews","concat","removedViews","viewObjs","uniq","map","filter","viewObj","sortBy","undelegateNestedEvents","element","$previousEl","_setElement","replaceWith","delegateEvents","events","entities","isArray","listeners","_nestedEventsHash","listener","entity","listenTo","eventName","handler","stopListening","typeEventsHash","match","entityKeys","bind","entityKey","afterAttach","previousView","attr","cid","detachViews","beforeDetach","removeData","removeAttr","undelegateEvents","getClosestView","selector","$selector","is","closest"],"mappings":"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","file":"esencia.min.js","sourcesContent":["(function (factory) {\n    if (typeof define === 'function' && define.amd) {\n        define([\n            'underscore',\n            'backbone'\n        ], factory);\n    } else if (typeof exports === 'object') {\n        module.exports = factory(require('underscore'), require('backbone'));\n    } else {\n        this.Esencia = factory(_, Backbone);\n    }\n}(function (__external__, __external_Backbone) {\n    var global = this, define;\n    function _require(id) {\n        var module = _require.cache[id];\n        if (!module) {\n            var exports = {};\n            module = _require.cache[id] = {\n                id: id,\n                exports: exports\n            };\n            _require.modules[id].call(exports, module, exports);\n        }\n        return module.exports;\n    }\n    _require.cache = [];\n    _require.modules = [\n        function (module, exports) {\n            'use strict';\n            var _ = _require(5);\n            var backbone = _require(4);\n            var Collection = {};\n            var baseMethods = [\n                    'create',\n                    'update',\n                    'patch',\n                    'delete',\n                    'read'\n                ];\n            var execMethodType = 'PUT';\n            Collection.sync = function (method, model, options) {\n                if (!_.contains(baseMethods, method)) {\n                    options = options || {};\n                    var params = {\n                            type: execMethodType,\n                            dataType: 'json',\n                            contentType: 'application/json',\n                            processData: false\n                        };\n                    if (!options.url) {\n                        var url = _.result(model, 'url') || urlError();\n                        params.url = url + (url.charAt(url.length - 1) === '/' ? '' : '/') + method;\n                    }\n                    if (options.data && _.isObject(options.data)) {\n                        options.data = JSON.stringify(options.data);\n                    }\n                    var xhr = options.xhr = backbone.ajax(_.extend(params, options));\n                    model.trigger('request', model, xhr, options);\n                    return xhr;\n                } else {\n                    return backbone.Collection.prototype.sync.call(this, method, model, options);\n                }\n            };\n            Collection.exec = function (method, options) {\n                options = options ? _.clone(options) : {};\n                var collection = this;\n                var success = options.success;\n                options.success = function (resp) {\n                    if (success)\n                        success(collection, resp, options);\n                    collection.trigger('exec:' + method, collection, resp, options);\n                };\n                var error = options.error;\n                options.error = function (resp) {\n                    if (error)\n                        error(collection, resp, options);\n                    collection.trigger('error', collection, resp, options);\n                };\n                return this.sync(method, this, options);\n            };\n            var urlError = function () {\n                throw new Error('A \"url\" property or function must be specified');\n            };\n            module.exports = backbone.Collection.extend(Collection);\n        },\n        function (module, exports) {\n            'use strict';\n            var Router = _require(2);\n            var Collection = _require(0);\n            var View = _require(3);\n            module.exports.Router = Router;\n            module.exports.Collection = Collection;\n            module.exports.View = View;\n        },\n        function (module, exports) {\n            'use strict';\n            var _ = _require(5);\n            var backbone = _require(4);\n            var View = _require(3);\n            var Router = {\n                    root: '/',\n                    rootViewEl: 'html',\n                    modulesPath: 'modules/',\n                    defaultModuleName: 'main',\n                    pushState: false,\n                    namedParameters: false,\n                    autoloadModules: true,\n                    debug: false,\n                    config: {},\n                    onModuleError: function () {\n                    },\n                    nowhereUrl: '___'\n                };\n            var routerOptions = [\n                    'root',\n                    'rootViewEl',\n                    'modulesPath',\n                    'defaultModuleName',\n                    'pushState',\n                    'namedParameters',\n                    'autoloadModules',\n                    'debug',\n                    'config',\n                    'onModuleError',\n                    'nowhereUrl'\n                ];\n            Router.constructor = function (options) {\n                options = options || {};\n                _.extend(this, _.pick(options, routerOptions));\n                this.options = options;\n                this.components = {};\n                this.componentsTree = null;\n                this.urlParams = {};\n                this.modules = {};\n                this.history = backbone.history;\n                backbone.Router.namedParameters = this.namedParameters;\n                backbone.Router.apply(this, arguments);\n                if (options.autoloadModules) {\n                    this.route('*url', function (params) {\n                        this.setModule(params);\n                    });\n                }\n            };\n            Router._initRootComponent = function () {\n                var RootView = View.extend({ el: this.rootViewEl });\n                this.component({\n                    name: '',\n                    parent: null,\n                    View: RootView\n                });\n            };\n            Router._populateUrlParams = function (componentName, params) {\n                var urlParams = this.urlParams;\n                var key;\n                for (key in urlParams) {\n                    if (_(urlParams).has(key)) {\n                        delete urlParams[key];\n                    }\n                }\n                var component = this.components[componentName];\n                return _(urlParams).extend(_(component).result('defaultUrlParams'), params);\n            };\n            var componentOptions = [\n                    'url',\n                    'name',\n                    'parent',\n                    'container',\n                    'View',\n                    'models',\n                    'collections',\n                    'viewOptions',\n                    'defaultUrlParams'\n                ];\n            Router.component = function (options) {\n                var router = this;\n                options = _({}).defaults(options, {\n                    parent: '',\n                    defaultUrlParams: {},\n                    viewOptions: {},\n                    process: false\n                });\n                var component = _(options).pick(componentOptions);\n                if (_.isUndefined(component.name)) {\n                    component.name = _.uniqueId('auto-named-component');\n                }\n                if (!_.isString(component.name)) {\n                    throw new Error('Component `name` option should be a string');\n                }\n                if (component.name in this.components) {\n                    throw new Error('Duplicate component with name \"' + component.name + '\"');\n                }\n                if (!component.View) {\n                    throw new Error('Component `View` option is required');\n                }\n                if (!_.isString(component.parent) && !_.isNull(component.parent)) {\n                    throw new Error('Component `parent` option should be a string or null');\n                }\n                this.components[component.name] = component;\n                if (!_.isUndefined(component.url)) {\n                    this.route(component.url, component.name, function (params) {\n                        router._populateUrlParams(component.name, params);\n                        router._processComponent(component.name);\n                    });\n                }\n                if (options.process) {\n                    this._processComponent(component.name);\n                }\n                return this;\n            };\n            Router._calculateComponentsTree = function (componentName, child) {\n                var component = this.components[componentName];\n                if (!component) {\n                    throw new Error('Unknown component with name \"' + componentName + '\"');\n                }\n                var node = { name: componentName };\n                if (child) {\n                    node.child = child;\n                }\n                if (_.isString(component.parent)) {\n                    return this._calculateComponentsTree(component.parent, node);\n                } else {\n                    return node;\n                }\n            };\n            Router._isComponentTreeNodeChanged = function (oldNode, node) {\n                if (!oldNode || oldNode.name !== node.name || !oldNode.view)\n                    return true;\n                var component = this.components[node.name];\n                if (oldNode.view instanceof component.View === false)\n                    return true;\n                if (!oldNode.view.attached)\n                    return true;\n                return !oldNode.view.isUnchanged();\n            };\n            Router._applyComponentsTree = function (params, callback) {\n                var self = this;\n                var parentNode = params.parentNode;\n                var iterateNode = function (oldNode, node) {\n                    var childNode = node.child;\n                    delete node.child;\n                    if (parentNode) {\n                        parentNode.child = node;\n                    } else {\n                        self.componentsTree = node;\n                    }\n                    if (childNode) {\n                        self._applyComponentsTree({\n                            parentNode: node,\n                            oldNode: oldNode && oldNode.child || null,\n                            node: childNode\n                        }, callback);\n                    } else {\n                        callback();\n                    }\n                };\n                var node = params.node;\n                var oldNode = params.oldNode;\n                var component = this.components[node.name];\n                var onViewResolve = function (view) {\n                    node.view = view;\n                    view.setData();\n                    if (component.container) {\n                        if (!parentNode) {\n                            throw new Error('Parent component should exist for component with `container` option');\n                        }\n                        parentNode.view.setView(view, component.container).renderViews().attachViews();\n                    } else {\n                        view.render();\n                    }\n                    iterateNode(null, node);\n                };\n                var oldView = oldNode && oldNode.view;\n                if (this._isComponentTreeNodeChanged(oldNode, node)) {\n                    if (oldView) {\n                        if (oldView.container) {\n                            if (!component.container || oldView.container !== component.container) {\n                                oldView.remove();\n                            }\n                        } else {\n                            oldView.detach();\n                        }\n                    }\n                    var view = new component.View(_(component).chain().pick('models', 'collections').defaults(_(component).result('viewOptions')).extend({ router: this }).value());\n                    if (view.waiting) {\n                        view.once('resolve', function () {\n                            onViewResolve(view);\n                        });\n                    } else {\n                        onViewResolve(view);\n                    }\n                } else {\n                    var oldChildView = oldNode.child && oldNode.child.view;\n                    var oldChildViewContainer;\n                    if (oldChildView) {\n                        oldChildViewContainer = oldChildView.container;\n                        if (oldChildViewContainer) {\n                            oldView.removeView(oldChildView, oldChildViewContainer);\n                        }\n                    }\n                    node.view = oldView;\n                    oldView.setData();\n                    oldView.render();\n                    if (oldChildView && oldChildViewContainer) {\n                        oldView.setView(oldChildView, oldChildViewContainer);\n                    }\n                    iterateNode(oldNode, node);\n                }\n            };\n            Router._processComponent = function (componentName, callback) {\n                callback = callback || _.noop;\n                var newComponentsTree = this._calculateComponentsTree(componentName);\n                this._applyComponentsTree({\n                    parentNode: null,\n                    oldNode: this.componentsTree,\n                    node: newComponentsTree\n                }, callback);\n            };\n            Router.route = function (url, name, callback) {\n                var router = this;\n                if (_.isFunction(name)) {\n                    callback = name;\n                    name = '';\n                }\n                backbone.Router.prototype.route.call(this, url, name, function () {\n                    var args = arguments;\n                    router._defaultMiddleware({\n                        url: url,\n                        name: name,\n                        callback: callback\n                    }, function () {\n                        callback.apply(router, args);\n                    });\n                });\n            };\n            Router.navigate = function (fragment, options) {\n                options = options || {};\n                if (fragment.indexOf(this.root) === 0) {\n                    fragment = fragment.substring(this.root.length);\n                }\n                if (options.force) {\n                    this.navigate(this.nowhereUrl, {\n                        replace: options.replace,\n                        trigger: false\n                    });\n                    options = _(options).chain().omit('force').extend({ replace: true }).value();\n                    return this.navigate(fragment, options);\n                }\n                options = _(options || {}).defaults({\n                    trigger: true,\n                    params: {}\n                });\n                var qs = options.qs;\n                if (this.toFragment && qs) {\n                    _(qs).each(function (val, key, qs) {\n                        if (val === undefined || val === null)\n                            delete qs[key];\n                    });\n                    fragment = this.toFragment(fragment, qs);\n                    delete options.qs;\n                }\n                backbone.Router.prototype.navigate.call(this, fragment, options);\n            };\n            Router._defaultMiddleware = function (route, next) {\n                next();\n            };\n            Router.middleware = function (middleware) {\n                var router = this;\n                var defaultMiddleware = this._defaultMiddleware;\n                this._defaultMiddleware = function (route, next) {\n                    defaultMiddleware.call(router, route, function () {\n                        middleware.call(router, route, next);\n                    });\n                };\n                return this;\n            };\n            Router.setModule = function (params) {\n                var router = this;\n                var url = params.url;\n                delete params.url;\n                var moduleName = _(url.split('/')).find(_.identity) || this.defaultModuleName;\n                require([this.modulesPath + moduleName], function (moduleInit) {\n                    if (!router.modules[moduleName]) {\n                        moduleInit(router);\n                        router.modules[moduleName] = true;\n                        router.navigate(url, {\n                            replace: true,\n                            force: true,\n                            qs: params\n                        });\n                    }\n                }, this.onModuleError);\n            };\n            Router.start = function () {\n                this._initRootComponent();\n                backbone.history.start({\n                    pushState: this.pushState,\n                    root: this.root\n                });\n            };\n            module.exports = backbone.Router.extend(Router);\n        },\n        function (module, exports) {\n            'use strict';\n            var _ = _require(5);\n            var backbone = _require(4);\n            var $ = backbone.$;\n            var splice = Array.prototype.splice;\n            var delegateEventSplitter = /^(\\S+)\\s*(.*)$/;\n            var nestedEventTypes = [\n                    'views',\n                    'collections',\n                    'models'\n                ];\n            var View = { templateHelpers: {} };\n            var viewOptions = [\n                    'models',\n                    'collections',\n                    'views',\n                    'events',\n                    'data',\n                    'router',\n                    'templateHelpers'\n                ];\n            View.constructor = function (options) {\n                var self = this;\n                options = options || {};\n                this.views = {};\n                this.data = this.data || {};\n                _.extend(this, _.pick(options, viewOptions));\n                this.options = options;\n                if (this.template && !_.isFunction(this.template)) {\n                    throw new Error('View `template` option should be a function');\n                }\n                this._normalizeViews();\n                this._prepareNestedEvents();\n                this.waiting = false;\n                this.attached = false;\n                backbone.View.apply(this, arguments);\n                if (this.collections) {\n                    _(this.collections).each(function (collection, key) {\n                        self.delegateNestedEvents('collections', key, collection);\n                    });\n                }\n                if (this.models) {\n                    _(this.models).each(function (model, key) {\n                        self.delegateNestedEvents('models', key, model);\n                    });\n                }\n            };\n            View.setData = function (data) {\n                if (data)\n                    this.data = data;\n            };\n            View.isUnchanged = function () {\n                return true;\n            };\n            View.wait = function () {\n                var self = this;\n                this.waiting = true;\n                return function () {\n                    self.waiting = false;\n                    self.trigger('resolve');\n                };\n            };\n            View.render = function (options) {\n                console.log('>>>      render: %o %o', this, this.$el);\n                if (this.waiting)\n                    return this;\n                options = options || {};\n                if (this.template) {\n                    if (options.force || !this.attached || !this.isUnchanged()) {\n                        this.detach();\n                        var html = this.renderTemplate(this.template, this.getTemplateData());\n                        var $el = $(html);\n                        if (!$el.length) {\n                            throw new Error('View template produce empty html');\n                        }\n                        if ($el.length > 1) {\n                            throw new Error('View template produce html with more than one root elements');\n                        }\n                        this.setElement($el);\n                    }\n                } else {\n                    if (!this.$el.length)\n                        this._ensureElement();\n                }\n                this.renderViews(options);\n                if (!this.parent || this.$container) {\n                    this.attachViews();\n                    this.attach();\n                }\n                return this;\n            };\n            View.getTemplateData = function () {\n                return this.data;\n            };\n            View.renderTemplate = function (template, data) {\n                data = _(this).chain().result('templateHelpers').extend(data).value();\n                return template(data);\n            };\n            View.renderViews = function (options) {\n                console.log('>>> renderViews: %o %o', this, this.$el);\n                var self = this;\n                _(this.views).each(function (viewsGroup, container) {\n                    if (!viewsGroup.length)\n                        return;\n                    _(viewsGroup).each(function (view) {\n                        view.render(options);\n                    });\n                    var $container = container ? self.$(container).first() : self.$el;\n                    if (!$container.length) {\n                        throw new Error('Container \"' + container + '\" is not found');\n                    }\n                    var containerEl = $container.get(0);\n                    var domChanged = _(viewsGroup).some(function (view) {\n                            return !view.attached || !view.$container || view.$container.get(0) !== containerEl;\n                        });\n                    if (domChanged) {\n                        var $els = [];\n                        _(viewsGroup).each(function (view) {\n                            view.$container = $container;\n                            $els.push(view.$el);\n                        });\n                        $container.append($els);\n                    }\n                });\n                return this;\n            };\n            View.setView = function (view, container, index) {\n                return this._updateViews([view], container, index);\n            };\n            View.setViews = function (views, container, index) {\n                return this._updateViews(views, container, index);\n            };\n            View.replaceView = function (view, container, index) {\n                return this._updateViews([view], container, index);\n            };\n            View.replaceViews = function (views, container, index) {\n                return this._updateViews(views, container, index);\n            };\n            View.appendView = function (view, container) {\n                return this._insertViews([view], container);\n            };\n            View.appendViews = function (views, container) {\n                return this._insertViews(views, container);\n            };\n            View.prependView = function (view, container) {\n                return this._insertViews([view], container, 0);\n            };\n            View.prependViews = function (views, container) {\n                return this._insertViews(views, container, 0);\n            };\n            View.insertView = function (view, container, index) {\n                return this._insertViews([view], container, index);\n            };\n            View.insertViews = function (views, container, index) {\n                return this._insertViews(views, container, index);\n            };\n            View.removeView = function (view, container, index) {\n                if (arguments.length < 2) {\n                    throw new Error('\"view\" or \"index\" arguments must be specified');\n                }\n                if (_.isString(view)) {\n                    index = container;\n                    container = view;\n                    view = this.getView(container, index);\n                    if (!view)\n                        return this;\n                }\n                return this._removeViews([view], container);\n            };\n            View.removeViews = function (views, container) {\n                if (_.isString(views)) {\n                    container = views;\n                    views = this.getViews(container);\n                }\n                return this._removeViews(views, container);\n            };\n            View.getView = function (container, index) {\n                return this.getViews(container)[index || 0] || null;\n            };\n            View.getViews = function (container) {\n                return _.clone(this.views[container]) || [];\n            };\n            View._insertViews = function (views, container, index) {\n                console.log('>>> _insertViews:', views, container, index);\n                var self = this;\n                var viewsGroup = this.getViews(container);\n                _(views).each(function (view) {\n                    if (view.parent) {\n                        view.parent.removeView(view, view.container);\n                    }\n                });\n                if (viewsGroup.length) {\n                    if (typeof index === 'undefined') {\n                        index = viewsGroup.length;\n                    }\n                    splice.apply(this.views[container], [\n                        index,\n                        0\n                    ].concat(views));\n                } else {\n                    this.views[container] = views;\n                }\n                _(views).each(function (view) {\n                    view.parent = self;\n                    view.container = container;\n                });\n                this.delegateNestedEvents('views', container, views);\n                return this;\n            };\n            View._updateViews = function (views, container, index) {\n                console.log('>>> _updateViews:', views, container, index);\n                var viewsGroup = this.getViews(container);\n                if (viewsGroup.length) {\n                    var removedViews = [];\n                    if (typeof index !== 'undefined') {\n                        removedViews = this.getView(container, index);\n                        removedViews = removedViews ? [removedViews] : [];\n                    } else {\n                        removedViews = viewsGroup;\n                    }\n                    if (removedViews.length) {\n                        this._removeViews(removedViews, container);\n                        _(removedViews).each(function (view) {\n                            view.remove();\n                        });\n                    }\n                }\n                return this._insertViews(views, container, index);\n            };\n            View._removeViews = function (views, container) {\n                console.log('>>> _removeViews:', views, container);\n                var self = this;\n                var viewsGroup = this.getViews(container);\n                if (!viewsGroup.length)\n                    return this;\n                var viewObjs = _.chain(views).uniq().map(function (view) {\n                        return {\n                            view: view,\n                            index: _.indexOf(viewsGroup, view)\n                        };\n                    }).filter(function (viewObj) {\n                        return viewObj.index >= 0;\n                    }).sortBy(function (viewObj) {\n                        return -viewObj.index;\n                    }).value();\n                if (!viewObjs.length)\n                    return this;\n                _(viewObjs).each(function (viewObj) {\n                    var view = viewObj.view;\n                    splice.call(self.views[container], viewObj.index, 1);\n                    self.undelegateNestedEvents(view);\n                    delete view.parent;\n                });\n                return this;\n            };\n            View.setElement = function (element) {\n                var $previousEl = this.$el;\n                this._setElement(element);\n                if ($previousEl && this.$container) {\n                    $previousEl.replaceWith(this.$el);\n                }\n                return this;\n            };\n            View.delegateEvents = function (events) {\n                events = events || _.result(this, 'events');\n                if (!events)\n                    return this;\n                events = _(events).omit(nestedEventTypes);\n                return backbone.View.prototype.delegateEvents.call(this, events);\n            };\n            View.delegateNestedEvents = function (type, key, entities) {\n                var self = this;\n                if (!_.isArray(entities))\n                    entities = [entities];\n                var listeners = this._nestedEventsHash[type][key];\n                if (listeners) {\n                    _(listeners).each(function (listener) {\n                        _(entities).each(function (entity) {\n                            self.listenTo(entity, listener.eventName, listener.handler);\n                        });\n                    });\n                }\n                return this;\n            };\n            View.undelegateNestedEvents = function (entities) {\n                var self = this;\n                if (!_.isArray(entities))\n                    entities = [entities];\n                _(entities).each(function (entity) {\n                    self.stopListening(entity);\n                });\n                return this;\n            };\n            View._prepareNestedEvents = function (events) {\n                var self = this;\n                this._nestedEventsHash = {};\n                _(nestedEventTypes).each(function (type) {\n                    self._nestedEventsHash[type] = {};\n                });\n                events = events || _.result(this, 'events');\n                if (!events)\n                    return;\n                _(nestedEventTypes).each(function (type) {\n                    var typeEventsHash = self._nestedEventsHash[type];\n                    if (!_(events).has(type) || !_.isObject(events[type]))\n                        return;\n                    _(events[type]).each(function (method, key) {\n                        if (!_.isFunction(method))\n                            method = self[method];\n                        if (!method)\n                            return;\n                        var match = key.match(delegateEventSplitter);\n                        var eventName = match[1];\n                        var entityKeys = match[2].replace(/ *, */g, ',').split(',');\n                        method = _.bind(method, self);\n                        _(entityKeys).each(function (entityKey) {\n                            typeEventsHash[entityKey] = typeEventsHash[entityKey] || [];\n                            typeEventsHash[entityKey].push({\n                                eventName: eventName,\n                                handler: method\n                            });\n                        });\n                    });\n                });\n            };\n            View._normalizeViews = function () {\n                var self = this;\n                _(this.views).each(function (views, container) {\n                    if (!_.isArray(views)) {\n                        self.views[container] = [views];\n                    }\n                });\n            };\n            View.attachViews = function () {\n                _(this.views).each(function (viewsGroup) {\n                    if (!viewsGroup.length)\n                        return;\n                    _(viewsGroup).each(function (view) {\n                        view.attachViews();\n                        view.attach();\n                    });\n                });\n                return this;\n            };\n            View.afterAttach = function () {\n                return this;\n            };\n            View.attach = function () {\n                if (this.attached)\n                    return this;\n                var previousView = this.$el.data('esencia-view');\n                if (previousView)\n                    previousView.detach();\n                this.$el.data('esencia-view', this).attr('esencia-view', this.cid);\n                this.delegateEvents();\n                this.attached = true;\n                console.log('>>>      attach: %o %o', this, this.$el);\n                this.afterAttach();\n                return this;\n            };\n            View.detachViews = function () {\n                _(this.views).each(function (viewsGroup) {\n                    if (!viewsGroup.length)\n                        return;\n                    _(viewsGroup).each(function (view) {\n                        view.detachViews();\n                        view.detach();\n                    });\n                });\n                return this;\n            };\n            View.beforeDetach = function () {\n                return this;\n            };\n            View.detach = function () {\n                if (!this.attached)\n                    return this;\n                console.log('>>>      detach: %o %o', this, this.$el);\n                this.beforeDetach();\n                this.$el.removeData('esencia-view').removeAttr('esencia-view');\n                this.undelegateEvents();\n                this.attached = false;\n                return this;\n            };\n            View.remove = function () {\n                if (this.parent) {\n                    this.parent.removeView(this, this.container);\n                }\n                this.detachViews();\n                this.detach();\n                return backbone.View.prototype.remove.call(this);\n            };\n            View.getClosestView = function (selector) {\n                var $selector = $(selector);\n                if (!$selector.is('[esencia-view]')) {\n                    $selector = $selector.closest('[esencia-view]');\n                }\n                return $selector.length ? $selector.data('esencia-view') : null;\n            };\n            module.exports = backbone.View.extend(View);\n        },\n        function (module, exports) {\n            module.exports = __external_Backbone;\n        },\n        function (module, exports) {\n            module.exports = __external__;\n        }\n    ];\n    return _require(1);\n}));\n//# sourceMappingURL=esencia.js.map\n","'use strict';\n\nvar _ = require('underscore');\nvar backbone = require('backbone');\n\nvar Collection = {};\n\n// base methods map\nvar baseMethods = ['create', 'update', 'patch', 'delete', 'read'];\n\nvar execMethodType = 'PUT';\n\n/*\n * Override `sync` to add exec custom method functionality\n */\n\nCollection.sync = function(method, model, options) {\n\t// if sync is called for custom exec method\n\tif (!_.contains(baseMethods, method)) {\n\t\toptions = options || {};\n\n\t\tvar params = {\n\t\t\ttype: execMethodType,\n\t\t\tdataType: 'json',\n\t\t\tcontentType: 'application/json',\n\t\t\tprocessData: false\n\t\t};\n\n\t\t// Ensure that we have a URL and add method name to it\n\t\tif (!options.url) {\n\t\t\tvar url = _.result(model, 'url') || urlError();\n\t\t\tparams.url = url + (url.charAt(url.length - 1) === '/' ? '' : '/') + method;\n\t\t}\n\n\t\t// stringify data to json\n\t\tif (options.data && _.isObject(options.data)) {\n\t\t\toptions.data = JSON.stringify(options.data);\n\t\t}\n\n\t\t// Make the request, allowing the user to override any Ajax options.\n\t\tvar xhr = options.xhr = backbone.ajax(_.extend(params, options));\n\t\tmodel.trigger('request', model, xhr, options);\n\t\treturn xhr;\n\t} else {\n\t\t// call default backbone.Collection sync for base REST methods\n\t\treturn backbone.Collection.prototype.sync.call(this, method, model, options);\n\t}\n};\n\n/*\n * Exec custom non-REST method on collection\n * It trigger `exec:[method]` event after success collection sync\n *\n * @param {String} method\n * @param {Object} options\n */\n\nCollection.exec = function(method, options) {\n\toptions = options ? _.clone(options) : {};\n\n\tvar collection = this;\n\tvar success = options.success;\n\toptions.success = function(resp) {\n\t\tif (success) success(collection, resp, options);\n\t\tcollection.trigger('exec:' + method, collection, resp, options);\n\t};\n\n\tvar error = options.error;\n\toptions.error = function(resp) {\n\t\tif (error) error(collection, resp, options);\n\t\tcollection.trigger('error', collection, resp, options);\n\t};\n\n\treturn this.sync(method, this, options);\n};\n\n// Throw an error when a URL is needed, and none is supplied.\nvar urlError = function() {\n\tthrow new Error('A \"url\" property or function must be specified');\n};\n\nmodule.exports = backbone.Collection.extend(Collection);\n","'use strict';\n\nvar Router = require('./router');\nvar Collection = require('./collection');\nvar View = require('./view');\n\nmodule.exports.Router = Router;\nmodule.exports.Collection = Collection;\nmodule.exports.View = View;\n","'use strict';\n\nvar _ = require('underscore');\nvar backbone = require('backbone');\nvar View = require('./view');\n\n/**\n * Router extends default backbone Router\n */\n\nvar Router = {\n\troot: '/',\n\trootViewEl: 'html',\n\tmodulesPath: 'modules/',\n\tdefaultModuleName: 'main',\n\tpushState: false,\n\tnamedParameters: false,\n\tautoloadModules: true,\n\tdebug: false,\n\tconfig: {},\n\tonModuleError: function() {},\n\tnowhereUrl: '___'\n};\n\nvar routerOptions = [\n\t'root', 'rootViewEl', 'modulesPath', 'defaultModuleName', 'pushState',\n\t'namedParameters', 'autoloadModules', 'debug', 'config', 'onModuleError',\n\t'nowhereUrl'\n];\n\n/*\n * Override `constructor`\n * @param {Object} [options]\n */\n\nRouter.constructor = function(options) {\n\toptions = options || {};\n\n\t// populate Router instance with fields from options\n\t_.extend(this, _.pick(options, routerOptions));\n\n\t// save original options, it is sometimes usefull\n\tthis.options = options;\n\n\tthis.components = {};\n\tthis.componentsTree = null;\n\tthis.urlParams = {};\n\tthis.modules = {};\n\n\tthis.history = backbone.history;\n\n\t/*\n\t * All query parameters can be passed in a single hash using the key\n\t * referenced from the route definition (backbone queryparams will\n\t * do it for us)\n\t */\n\n\tbackbone.Router.namedParameters = this.namedParameters;\n\n\tbackbone.Router.apply(this, arguments);\n\n\tif (options.autoloadModules) {\n\t\tthis.route('*url', function(params) {\n\t\t\tthis.setModule(params);\n\t\t});\n\t}\n};\n\nRouter._initRootComponent = function() {\n\tvar RootView = View.extend({\n\t\tel: this.rootViewEl\n\t});\n\n\tthis.component({\n\t\tname: '',\n\t\tparent: null,\n\t\tView: RootView\n\t});\n};\n\nRouter._populateUrlParams = function(componentName, params) {\n\tvar urlParams = this.urlParams;\n\n\t// clean old values from urlParams object\n\tvar key;\n\tfor (key in urlParams) {\n\t\tif (_(urlParams).has(key)) {\n\t\t\tdelete urlParams[key];\n\t\t}\n\t}\n\n\tvar component = this.components[componentName];\n\n\t// populate urlParams with new params\n\treturn _(urlParams).extend(\n\t\t_(component).result('defaultUrlParams'),\n\t\tparams\n\t);\n};\n\n/*\n * Add component to router and bind it to url\n *\n * @param {Object} component\n */\n\n var componentOptions = [\n\t'url', 'name', 'parent', 'container', 'View', 'models', 'collections',\n\t'viewOptions', 'defaultUrlParams'\n];\n\nRouter.component = function(options) {\n\tvar router = this;\n\n\toptions = _({}).defaults(options, {\n\t\tparent: '',\n\t\tdefaultUrlParams: {},\n\t\tviewOptions: {},\n\t\tprocess: false\n\t});\n\n\tvar component = _(options).pick(componentOptions);\n\n\t// generate uniq component name if name is omitted\n\tif (_.isUndefined(component.name)) {\n\t\tcomponent.name = _.uniqueId('auto-named-component');\n\t}\n\n\tif (!_.isString(component.name)) {\n\t\tthrow new Error('Component `name` option should be a string');\n\t}\n\n\tif (component.name in this.components) {\n\t\tthrow new Error('Duplicate component with name \"' + component.name + '\"');\n\t}\n\n\tif (!component.View) {\n\t\tthrow new Error('Component `View` option is required');\n\t}\n\n\tif (!_.isString(component.parent) && !_.isNull(component.parent)) {\n\t\tthrow new Error('Component `parent` option should be a string or null');\n\t}\n\n\tthis.components[component.name] = component;\n\n\t// bind component to route\n\tif (!_.isUndefined(component.url)) {\n\t\tthis.route(component.url, component.name, function(params) {\n\t\t\trouter._populateUrlParams(component.name, params);\n\n\t\t\t// process components tree\n\t\t\trouter._processComponent(component.name);\n\t\t});\n\t}\n\n\t// process components tree in force mode\n\tif (options.process) {\n\t\tthis._processComponent(component.name);\n\t}\n\n\treturn this;\n};\n\nRouter._calculateComponentsTree = function(componentName, child) {\n\tvar component = this.components[componentName];\n\n\tif (!component) {\n\t\tthrow new Error('Unknown component with name \"' + componentName + '\"');\n\t}\n\n\tvar node = {name: componentName};\n\tif (child) {\n\t\tnode.child = child;\n\t}\n\n\tif (_.isString(component.parent)) {\n\t\treturn this._calculateComponentsTree(component.parent, node);\n\t} else {\n\t\treturn node;\n\t}\n};\n\nRouter._isComponentTreeNodeChanged = function(oldNode, node) {\n\tif (!oldNode || oldNode.name !== node.name || !oldNode.view) return true;\n\tvar component = this.components[node.name];\n\tif (oldNode.view instanceof component.View === false) return true;\n\tif (!oldNode.view.attached) return true;\n\treturn !oldNode.view.isUnchanged();\n};\n\nRouter._applyComponentsTree = function(params, callback) {\n\tvar self = this;\n\n\tvar parentNode = params.parentNode;\n\n\tvar iterateNode = function(oldNode, node) {\n\t\t// omit child field in new node because it will set recursive\n\t\t// and should not exist if error case\n\t\tvar childNode = node.child;\n\t\tdelete node.child;\n\n\t\tif (parentNode) {\n\t\t\tparentNode.child = node;\n\t\t} else {\n\t\t\tself.componentsTree = node;\n\t\t}\n\n\t\tif (childNode) {\n\t\t\tself._applyComponentsTree({\n\t\t\t\tparentNode: node,\n\t\t\t\toldNode: oldNode && oldNode.child || null,\n\t\t\t\tnode: childNode\n\t\t\t}, callback);\n\t\t} else {\n\t\t\tcallback();\n\t\t}\n\t};\n\n\tvar node = params.node;\n\tvar oldNode = params.oldNode;\n\tvar component = this.components[node.name];\n\n\tvar onViewResolve = function(view) {\n\t\tnode.view = view;\n\t\tview.setData();\n\n\t\tif (component.container) {\n\t\t\tif (!parentNode) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t'Parent component should exist for component with `container` option'\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tparentNode.view\n\t\t\t\t.setView(view, component.container)\n\t\t\t\t.renderViews()\n\t\t\t\t.attachViews();\n\t\t} else {\n\t\t\tview.render();\n\t\t}\n\n\t\t// stop processing old components tree\n\t\titerateNode(null, node);\n\t};\n\n\t// get view from old node\n\tvar oldView = oldNode && oldNode.view;\n\n\tif (this._isComponentTreeNodeChanged(oldNode, node)) {\n\t\tif (oldView) {\n\t\t\tif (oldView.container) {\n\t\t\t\t// remove old view if container for new view dirrent\n\t\t\t\tif (!component.container || oldView.container !== component.container) {\n\t\t\t\t\toldView.remove();\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// detach old view if it has not a container\n\t\t\t\toldView.detach();\n\t\t\t}\n\t\t}\n\n\t\t// create new view\n\t\tvar view = new (component.View)(\n\t\t\t_(component)\n\t\t\t\t.chain()\n\t\t\t\t.pick('models', 'collections')\n\t\t\t\t.defaults(_(component).result('viewOptions'))\n\t\t\t\t.extend({router: this})\n\t\t\t\t.value()\n\t\t);\n\n\t\tif (view.waiting) {\n\t\t\t// wait when view will be resolved\n\t\t\tview.once('resolve', function() {\n\t\t\t\tonViewResolve(view);\n\t\t\t});\n\t\t} else {\n\t\t\tonViewResolve(view);\n\t\t}\n\t} else {\n\t\t// get old child view if exists\n\t\tvar oldChildView = oldNode.child && oldNode.child.view;\n\n\t\t// temporary remove child node view from container\n\t\t// to prevent recursive renderViews\n\t\tvar oldChildViewContainer;\n\t\tif (oldChildView) {\n\t\t\toldChildViewContainer = oldChildView.container;\n\n\t\t\tif (oldChildViewContainer) {\n\t\t\t\toldView.removeView(oldChildView, oldChildViewContainer);\n\t\t\t}\n\t\t}\n\n\t\t// save old view to new node\n\t\tnode.view = oldView;\n\n\t\t// set data and re-render old view\n\t\toldView.setData();\n\t\toldView.render();\n\n\t\t// revert child node view\n\t\tif (oldChildView && oldChildViewContainer) {\n\t\t\toldView.setView(oldChildView, oldChildViewContainer);\n\t\t}\n\n\t\t// proprocessing old components tree\n\t\titerateNode(oldNode, node);\n\t}\n};\n\nRouter._processComponent = function(componentName, callback) {\n\tcallback = callback || _.noop;\n\n\tvar newComponentsTree = this._calculateComponentsTree(componentName);\n\n\tthis._applyComponentsTree({\n\t\tparentNode: null,\n\t\toldNode: this.componentsTree,\n\t\tnode: newComponentsTree\n\t}, callback);\n};\n\n/*\n * Override `route` to add middleware processing functionality\n */\n\nRouter.route = function(url, name, callback) {\n\tvar router = this;\n\n\tif (_.isFunction(name)) {\n\t\tcallback = name;\n\t\tname = '';\n\t}\n\n\tbackbone.Router.prototype.route.call(this, url, name, function() {\n\t\tvar args = arguments;\n\n\t\trouter._defaultMiddleware({\n\t\t\turl: url,\n\t\t\tname: name,\n\t\t\tcallback: callback\n\t\t}, function() {\n\t\t\tcallback.apply(router, args);\n\t\t});\n\t});\n};\n\n/*\n * Override `navigate`\n * @param {String} fragment\n * @param {Object} [options] - hash of params\n * @param {Object} [options.qs] - query string hash\n */\n\nRouter.navigate = function(fragment, options) {\n\toptions = options || {};\n\n\tif (fragment.indexOf(this.root) === 0) {\n\t\tfragment = fragment.substring(this.root.length);\n\t}\n\n\t// force to go to the selected fragment even if we currently on it\n\tif (options.force) {\n\t\tthis.navigate(this.nowhereUrl, {\n\t\t\treplace: options.replace,\n\t\t\ttrigger: false\n\t\t});\n\n\t\toptions = _(options).chain().omit('force').extend({replace: true}).value();\n\n\t\treturn this.navigate(fragment, options);\n\t}\n\n\t// set `trigger` to true by default\n\toptions = _(options || {}).defaults({\n\t\ttrigger: true,\n\t\tparams: {}\n\t});\n\n\t// add support of query string using `toFragment` from backbone.queryparams\n\tvar qs = options.qs;\n\n\tif (this.toFragment && qs) {\n\t\t// reject undefined and null qs parameters\n\t\t_(qs).each(function(val, key, qs) {\n\t\t\tif (val === undefined || val === null) delete qs[key];\n\t\t});\n\n\t\tfragment = this.toFragment(fragment, qs);\n\n\t\tdelete options.qs;\n\t}\n\n\tbackbone.Router.prototype.navigate.call(this, fragment, options);\n};\n\n\n/*\n * Default middleware function\n */\n\nRouter._defaultMiddleware = function(route, next) {\n\tnext();\n};\n\n/**\n * Use passed function as `middleware`\n *\n * @param {Function} middleware - middleware function,\n * `route` and `next` will be passed as arguments.\n * context (`this`) is link to the router object.\n */\n\nRouter.middleware = function(middleware) {\n\tvar router = this;\n\n\tvar defaultMiddleware = this._defaultMiddleware;\n\n\tthis._defaultMiddleware = function(route, next) {\n\t\tdefaultMiddleware.call(router, route, function() {\n\t\t\tmiddleware.call(router, route, next);\n\t\t});\n\t};\n\n\treturn this;\n};\n\n/*\n * Require module file and init it\n * @param {String} params.url Url without query string\n */\n\nRouter.setModule = function(params) {\n\tvar router = this;\n\n\tvar url = params.url;\n\tdelete params.url;\n\n\tvar moduleName = _(url.split('/')).find(_.identity) || this.defaultModuleName;\n\n\t// require module file\n\trequire([this.modulesPath + moduleName], function(moduleInit) {\n\t\t// if module is loaded first time\n\t\tif (!router.modules[moduleName]) {\n\t\t\t// init it\n\t\t\tmoduleInit(router);\n\n\t\t\t// set module init flag to true\n\t\t\trouter.modules[moduleName] = true;\n\n\t\t\t// and navigate again with force flag\n\t\t\trouter.navigate(url, {\n\t\t\t\treplace: true,\n\t\t\t\tforce: true,\n\t\t\t\tqs: params\n\t\t\t});\n\t\t}\n\t}, this.onModuleError);\n};\n\n/*\n * Start routes handling\n */\n\nRouter.start = function() {\n\tthis._initRootComponent();\n\n\tbackbone.history.start({\n\t\tpushState: this.pushState,\n\t\troot: this.root\n\t});\n};\n\nmodule.exports = backbone.Router.extend(Router);\n","'use strict';\n\nvar _ = require('underscore');\nvar backbone = require('backbone');\n\n/*\n * Take jquery or other selectors lib from backbone\n */\n\nvar $ = backbone.$;\n\n/*\n * Helpers\n */\n\nvar splice = Array.prototype.splice;\n\n/*\n * Cached regex to split keys for `delegate`.\n */\n\nvar delegateEventSplitter = /^(\\S+)\\s*(.*)$/;\n\nvar nestedEventTypes = ['views', 'collections', 'models'];\n\n/*\n * Base View class extend backbone View class\n */\n\nvar View = {\n\t/*\n\t * Helpers (Object|Fuction) which will be passed to the template\n\t */\n\n\ttemplateHelpers: {}\n};\n\nvar viewOptions = [\n\t'models', 'collections', 'views', 'events', 'data', 'router',\n\t'templateHelpers'\n];\n\n/*\n * @override constructor\n *\n * @param {Object} [options]\n */\n\nView.constructor = function(options) {\n\tvar self = this;\n\n\toptions = options || {};\n\n\t// nested views hash is empty by default\n\tthis.views = {};\n\n\tthis.data = this.data || {};\n\n\t// populate View instance with fields from options\n\t_.extend(this, _.pick(options, viewOptions));\n\t// save original options, it is sometimes usefull\n\tthis.options = options;\n\n\tif (this.template && !_.isFunction(this.template)) {\n\t\tthrow new Error('View `template` option should be a function');\n\t}\n\n\t// normalize nested views hash\n\tthis._normalizeViews();\n\n\t// create special hash for all events for fast search\n\tthis._prepareNestedEvents();\n\n\t// views are in the resolved state by default\n\tthis.waiting = false;\n\n\t// views are not attached by default\n\tthis.attached = false;\n\n\t// apply default backbone.View constructor\n\tbackbone.View.apply(this, arguments);\n\n\t// we should delegate events after constructor call because collections and\n\t// models was created in the initialize method\n\n\t// delegate events for each collection\n\tif (this.collections) {\n\t\t_(this.collections).each(function(collection, key) {\n\t\t\tself.delegateNestedEvents('collections', key, collection);\n\t\t});\n\t}\n\n\t// delegate events for each model\n\tif (this.models) {\n\t\t_(this.models).each(function(model, key) {\n\t\t\tself.delegateNestedEvents('models', key, model);\n\t\t});\n\t}\n};\n\n/*\n * Method to change view data.\n * Router calls this method to update view data.\n *\n * @param {Object} [data]\n */\n\nView.setData = function(data) {\n\tif (data) this.data = data;\n};\n\n/*\n * Method to check that view is changed and should be re-rendered\n * Returns true by default, override this method for specific logic\n */\n\nView.isUnchanged = function() {\n\treturn true;\n};\n\n/*\n * Method to switch view to waiting state\n */\n\nView.wait = function() {\n\tvar self = this;\n\tthis.waiting = true;\n\n\treturn function() {\n\t\tself.waiting = false;\n\t\tself.trigger('resolve');\n\t};\n};\n\n/*\n * @override `render`\n */\n\nView.render = function(options) {\n\tconsole.log('>>>      render: %o %o', this, this.$el)\n\n\t// stop rendering if view in `waiting` state, resolve it first\n\tif (this.waiting) return this;\n\n\toptions = options || {};\n\n\tif (this.template) {\n\t\t// re-render template only if it exists and if it is necessary\n\t\tif (options.force || !this.attached || !this.isUnchanged()) {\n\t\t\t// detach view from DOM element\n\t\t\tthis.detach();\n\n\t\t\t// render template with data\n\t\t\tvar html = this.renderTemplate(this.template, this.getTemplateData());\n\n\t\t\t// render html with jqeury (or other lib) call\n\t\t\tvar $el = $(html);\n\n\t\t\tif (!$el.length) {\n\t\t\t\tthrow new Error('View template produce empty html');\n\t\t\t}\n\n\t\t\tif ($el.length > 1) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t'View template produce html with more than one root elements'\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tthis.setElement($el);\n\t\t}\n\t} else {\n\t\t// re-ensure element if it is not ensured\n\t\tif (!this.$el.length) this._ensureElement();\n\t}\n\n\t// render nested views\n\tthis.renderViews(options);\n\n\tif (!this.parent || this.$container) {\n\t\t// attach all nested views first\n\t\tthis.attachViews();\n\n\t\t// attach current view\n\t\tthis.attach();\n\t}\n\n\t// return this for chaining\n\treturn this;\n};\n\n/*\n * Get data for template rendering\n */\n\nView.getTemplateData = function() {\n\treturn this.data;\n};\n\n/*\n * Render template with data. Returns html.\n *\n * @param {function} template for rendering\n * @params {object} data for rendering\n */\n\nView.renderTemplate = function(template, data) {\n\tdata = _(this).chain().result('templateHelpers').extend(data).value();\n\n\t// get html\n\treturn template(data);\n};\n\n/*\n * Render all nested view\n*/\n\nView.renderViews = function(options) {\n\tconsole.log('>>> renderViews: %o %o', this, this.$el)\n\n\tvar self = this;\n\n\t// iterate by each views group\n\t_(this.views).each(function(viewsGroup, container) {\n\t\t// return if view group is empty\n\t\tif (!viewsGroup.length) return;\n\n\t\t// call render for each views from view group\n\t\t_(viewsGroup).each(function(view) {\n\t\t\tview.render(options);\n\t\t});\n\n\t\t// get first container or $el\n\t\tvar $container = container ? self.$(container).first() : self.$el;\n\n\t\tif (!$container.length) {\n\t\t\tthrow new Error('Container \"' + container + '\" is not found');\n\t\t}\n\n\t\tvar containerEl = $container.get(0);\n\n\t\t// dom is changed if some view from group is not in current container\n\t\tvar domChanged = _(viewsGroup).some(function(view) {\n\t\t\treturn (\n\t\t\t\t!view.attached ||\n\t\t\t\t!view.$container ||\n\t\t\t\tview.$container.get(0) !== containerEl\n\t\t\t);\n\t\t});\n\n\t\tif (domChanged) {\n\t\t\t// re-append views group to container\n\t\t\tvar $els = [];\n\n\t\t\t_(viewsGroup).each(function(view) {\n\t\t\t\tview.$container = $container;\n\t\t\t\t$els.push(view.$el);\n\t\t\t});\n\n\t\t\t// @TODO: add some rendering optimizations here\n\n\t\t\t// put all views to $container\n\t\t\t$container.append($els);\n\t\t}\n\t});\n\n\t// return this for chaining\n\treturn this;\n};\n\n/*\n * Set view to views group or replace some view in specified position\n * If index is passed it replace only one view with index in views group\n *\n * @param {View} view - view to set\n * @param {String} container - container to set\n * @param {Number} [index] - index of view to replace\n */\n\nView.setView = function(view, container, index) {\n\treturn this._updateViews([view], container, index);\n};\n\n/*\n * Set views to views group or replace some view in specified position\n * If index is passed it replace only one view with index in views group\n *\n * @param {View[]} views - views to set\n * @param {String} container - container to set\n * @param {Number} [index] - index of view to replace\n */\n\nView.setViews = function(views, container, index) {\n\treturn this._updateViews(views, container, index);\n};\n\n/*\n * Alias for setView\n *\n * @param {View} view - view to set\n * @param {String} container - container to set\n * @param {Number} [index] - index of view to replace\n */\n\nView.replaceView = function(view, container, index) {\n\treturn this._updateViews([view], container, index);\n};\n\n/*\n * Alias for setViews\n *\n * @param {View[]} views - views to set\n * @param {String} container - container to set\n * @param {Number} [index] - index of view to replace\n */\n\nView.replaceViews = function(views, container, index) {\n\treturn this._updateViews(views, container, index);\n};\n\n/*\n * Append view to end of views group\n * This method is alias for insertView without index argument\n *\n * @param {View} view - view to append\n * @param {String} container - container of views group\n */\n\nView.appendView = function(view, container) {\n\treturn this._insertViews([view], container);\n};\n\n/*\n * Append views to end of views group\n * This method is alias for insertViews without index argument\n *\n * @param {View[]} views - views to append\n * @param {String} container - container of views group\n */\n\nView.appendViews = function(views, container) {\n\treturn this._insertViews(views, container);\n};\n\n/*\n * Prepend view to start of views group\n * This method is alias for insertView with `0` as index argument value\n *\n * @param {View} views - view to prepend\n * @param {String} container - container of views group\n */\n\nView.prependView = function(view, container) {\n\treturn this._insertViews([view], container, 0);\n};\n\n/*\n * Prepend views to start of views group\n * This method is alias for insertViews with `0` as index argument value\n *\n * @param {View[]} views - view to prepend\n * @param {String} container - container of views group\n */\n\nView.prependViews = function(views, container) {\n\treturn this._insertViews(views, container, 0);\n};\n\n/*\n * Insert view to specified position of views group\n * If index is not passed method insert view to the end of views group (append)\n *\n * @param {View} view - view to insert\n * @param {String} container - container of views group\n * @param {Number} [index] - position in views group\n */\n\nView.insertView = function(view, container, index) {\n\treturn this._insertViews([view], container, index);\n};\n\n/*\n * Insert views to specified position of views group\n * If index is not passed method insert views to the end of views group (append)\n *\n * @param {View[]} views - views to insert\n * @param {String} container - container of views group\n * @param {Number} [index] - position in views group\n */\n\nView.insertViews = function(views, container, index) {\n\treturn this._insertViews(views, container, index);\n};\n\n/*\n * Remove view from views group by index or view instance\n * If index is passed it remove view in the index position\n *\n * @param {View} [view] - view to remove\n * @param {String} container - container of views group\n * @param {Number} [index] - index of view in views group\n */\n\nView.removeView = function(view, container, index) {\n\tif (arguments.length < 2) {\n\t\tthrow new Error('\"view\" or \"index\" arguments must be specified');\n\t}\n\n\tif (_.isString(view)) {\n\t\tindex = container;\n\t\tcontainer = view;\n\t\tview = this.getView(container, index);\n\t\tif (!view) return this;\n\t}\n\n\treturn this._removeViews([view], container);\n};\n\n/*\n * Remove views from views group\n * If views are passed remove only these views\n * Othervise remove all views from container\n *\n * @param {View[]} [views] - views to remove\n * @param {String} container - container of views group\n */\n\nView.removeViews = function(views, container) {\n\tif (_.isString(views)) {\n\t\tcontainer = views;\n\t\tviews = this.getViews(container);\n\t}\n\n\treturn this._removeViews(views, container);\n};\n\n/*\n * Get single view by container and index\n *\n * @param {String} container - container of views group\n * @param {Number} [index] - index of view in views group\n */\n\nView.getView = function(container, index) {\n\treturn this.getViews(container)[index || 0] || null;\n};\n\n/*\n * Get views group by container\n *\n * @param {String} container - container of views group\n */\n\nView.getViews = function(container) {\n\treturn _.clone(this.views[container]) || [];\n};\n\nView._insertViews = function(views, container, index) {\n\tconsole.log('>>> _insertViews:', views, container, index)\n\n\tvar self = this;\n\n\tvar viewsGroup = this.getViews(container);\n\n\t_(views).each(function(view) {\n\t\tif (view.parent) {\n\t\t\tview.parent.removeView(view, view.container);\n\t\t}\n\t});\n\n\tif (viewsGroup.length) {\n\t\t// if index is not specified set it value as last index of views group\n\t\tif (typeof index === 'undefined') {\n\t\t\tindex = viewsGroup.length;\n\t\t}\n\n\t\t// insert views\n\t\tsplice.apply(this.views[container], [index, 0].concat(views));\n\t} else {\n\t\t// if group is empty - set views as whole views group value\n\t\tthis.views[container] = views;\n\t}\n\n\t// set each view parent to current\n\t_(views).each(function(view) {\n\t\tview.parent = self;\n\t\tview.container = container;\n\t});\n\n\tthis.delegateNestedEvents('views', container, views);\n\n\treturn this;\n};\n\nView._updateViews = function(views, container, index) {\n\tconsole.log('>>> _updateViews:', views, container, index)\n\n\tvar viewsGroup = this.getViews(container);\n\n\tif (viewsGroup.length) {\n\t\tvar removedViews = [];\n\n\t\t// if views group is not empty\n\t\tif (typeof index !== 'undefined') {\n\t\t\t// if index is specified\n\t\t\t// remove view from specific position\n\t\t\tremovedViews = this.getView(container, index);\n\t\t\tremovedViews = removedViews ? [removedViews] : [];\n\t\t} else {\n\t\t\t// if no index - remove all views from views group\n\t\t\tremovedViews = viewsGroup;\n\t\t}\n\n\t\tif (removedViews.length) {\n\t\t\t// if remove views array is not empty\n\t\t\t// remove from parent\n\t\t\tthis._removeViews(removedViews, container);\n\n\t\t\t// and remove views\n\t\t\t_(removedViews).each(function(view) {\n\t\t\t\tview.remove();\n\t\t\t});\n\t\t}\n\t}\n\n\t// insert new views\n\treturn this._insertViews(views, container, index);\n};\n\nView._removeViews = function(views, container) {\n\tconsole.log('>>> _removeViews:', views, container)\n\n\tvar self = this;\n\n\tvar viewsGroup = this.getViews(container);\n\n\tif (!viewsGroup.length) return this;\n\n\tvar viewObjs = _.chain(views).uniq().map(function(view) {\n\t\t\treturn {\n\t\t\t\tview: view,\n\t\t\t\tindex: _.indexOf(viewsGroup, view)\n\t\t\t};\n\t\t}).filter(function(viewObj) {\n\t\t\treturn viewObj.index >= 0;\n\t\t}).sortBy(function(viewObj) {\n\t\t\treturn -viewObj.index;\n\t\t}).value();\n\n\tif (!viewObjs.length) return this;\n\n\t_(viewObjs).each(function(viewObj) {\n\t\tvar view = viewObj.view;\n\n\t\t// remove item from group\n\t\tsplice.call(self.views[container], viewObj.index, 1);\n\n\t\t// undelegate all nested entity events\n\t\tself.undelegateNestedEvents(view);\n\n\t\t// unset view parent\n\t\tdelete view.parent;\n\t});\n\n\treturn this;\n};\n\n/*\n * @override setElement\n * Original setElement do undelegateEvents/delegateEvents, we remove it\n * because we have special detach/attach methods for this\n */\n\nView.setElement = function(element) {\n\tvar $previousEl = this.$el;\n\n\tthis._setElement(element);\n\n\t// insert html to $el\n\tif ($previousEl && this.$container) {\n\t\t$previousEl.replaceWith(this.$el);\n\t}\n\n\treturn this;\n};\n\n/*\n * @override delegateEvents\n */\n\nView.delegateEvents = function(events) {\n\tevents = events || _.result(this, 'events');\n\tif (!events) return this;\n\tevents = _(events).omit(nestedEventTypes);\n\treturn backbone.View.prototype.delegateEvents.call(this, events);\n};\n\nView.delegateNestedEvents = function(type, key, entities) {\n\tvar self = this;\n\tif (!_.isArray(entities)) entities = [entities];\n\tvar listeners = this._nestedEventsHash[type][key];\n\tif (listeners) {\n\t\t_(listeners).each(function(listener) {\n\t\t\t_(entities).each(function(entity) {\n\t\t\t\tself.listenTo(entity, listener.eventName, listener.handler);\n\t\t\t});\n\t\t});\n\t}\n\treturn this;\n};\n\nView.undelegateNestedEvents = function(entities) {\n\tvar self = this;\n\tif (!_.isArray(entities)) entities = [entities];\n\t_(entities).each(function(entity) {\n\t\tself.stopListening(entity);\n\t});\n\treturn this;\n};\n\nView._prepareNestedEvents = function(events) {\n\tvar self = this;\n\n\t// Hash for nested views events fast search\n\tthis._nestedEventsHash = {};\n\t_(nestedEventTypes).each(function(type) {\n\t\tself._nestedEventsHash[type] = {};\n\t});\n\n\tevents = events || _.result(this, 'events');\n\tif (!events) return;\n\n\t// bind all prefixed events to view then call native delegate events\n\t_(nestedEventTypes).each(function(type) {\n\t\tvar typeEventsHash = self._nestedEventsHash[type];\n\n\t\tif (!_(events).has(type) || !_.isObject(events[type])) return;\n\n\t\t_(events[type]).each(function(method, key) {\n\t\t\tif (!_.isFunction(method)) method = self[method];\n\t\t\tif (!method) return;\n\t\t\tvar match = key.match(delegateEventSplitter);\n\t\t\tvar eventName = match[1];\n\t\t\tvar entityKeys = match[2].replace(/ *, */g, ',').split(',');\n\t\t\tmethod = _.bind(method, self);\n\n\t\t\t// fill _nestedEventsHash\n\t\t\t_(entityKeys).each(function(entityKey) {\n\t\t\t\ttypeEventsHash[entityKey] = typeEventsHash[entityKey] || [];\n\t\t\t\ttypeEventsHash[entityKey].push({\n\t\t\t\t\teventName: eventName,\n\t\t\t\t\thandler: method\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t});\n};\n\n/*\n * Wrap all non-array view groups to arrays with one element\n */\n\nView._normalizeViews = function() {\n\tvar self = this;\n\n\t_(this.views).each(function(views, container) {\n\t\tif (!_.isArray(views)) {\n\t\t\tself.views[container] = [views];\n\t\t}\n\t});\n};\n\nView.attachViews = function() {\n\t// iterate by each nested views groups\n\t_(this.views).each(function(viewsGroup) {\n\t\t// return if views group is empty\n\t\tif (!viewsGroup.length) return;\n\n\t\t// call attach method for each nested view from views group\n\t\t_(viewsGroup).each(function(view) {\n\t\t\t// recursive attach all nested views\n\t\t\tview.attachViews();\n\n\t\t\t// attach current view\n\t\t\tview.attach();\n\t\t});\n\t});\n\n\t// return this for chaining\n\treturn this;\n};\n\n/*\n * afterAttach is empty by default.\n * It called after attach call\n * Override it to add some specific logic for DOM manipulations.\n */\n\nView.afterAttach = function() {\n\treturn this;\n};\n\n/*\n * Detach all previous views and attach new view to current view $el\n */\n\nView.attach = function() {\n\t// return if current view is already attached\n\tif (this.attached) return this;\n\n\t// detach previous view\n\tvar previousView = this.$el.data('esencia-view');\n\tif (previousView) previousView.detach();\n\n\t// attach current view and set attr\n\tthis.$el.data('esencia-view', this).attr('esencia-view', this.cid);\n\n\t// enable all DOM events\n\tthis.delegateEvents();\n\n\tthis.attached = true;\n\n\t// do some user afterAttach actions\n\tconsole.log('>>>      attach: %o %o', this, this.$el)\n\tthis.afterAttach();\n\n\treturn this;\n};\n\nView.detachViews = function() {\n\t// iterate by each views groups\n\t_(this.views).each(function(viewsGroup) {\n\t\t// return if views group is empty\n\t\tif (!viewsGroup.length) return;\n\n\t\t// call detach method for each nested view from views group\n\t\t_(viewsGroup).each(function(view) {\n\t\t\t// recursive detach all nested views\n\t\t\tview.detachViews();\n\n\t\t\t// detach current view\n\t\t\tview.detach();\n\t\t});\n\t});\n\n\t// return this for chaining\n\treturn this;\n};\n\n/*\n * beforeDetach is empty by default.\n * It called before detach calls\n * Override it to add some specific logic before view detach from dom.\n */\n\nView.beforeDetach = function() {\n\treturn this;\n};\n\n/*\n * Detach view from current view $el\n */\n\nView.detach = function() {\n\t// return if current view is not already attached\n\tif (!this.attached) return this;\n\n\t// do some user beforeDetach actions\n\tconsole.log('>>>      detach: %o %o', this, this.$el)\n\tthis.beforeDetach();\n\n\t// remove attr and data from $el\n\tthis.$el.removeData('esencia-view').removeAttr('esencia-view');\n\n\t// disable all DOM events\n\tthis.undelegateEvents();\n\n\tthis.attached = false;\n\n\t// return this for chaining\n\treturn this;\n};\n\nView.remove = function() {\n\t// remove current view from parent view container\n\tif (this.parent) {\n\t\tthis.parent.removeView(this, this.container);\n\t}\n\n\t// detach all nested views first\n\tthis.detachViews();\n\n\t// detach current view\n\tthis.detach();\n\n\t// remove DOM element\n\treturn backbone.View.prototype.remove.call(this);\n};\n\n/*\n * Get view, that attached to closest element with attr `esencia-view`\n *\n * @param {String | $} selector\n */\n\nView.getClosestView = function(selector) {\n\tvar $selector = $(selector);\n\n\tif (!$selector.is('[esencia-view]')) {\n\t\t$selector = $selector.closest('[esencia-view]');\n\t}\n\n\treturn $selector.length ? $selector.data('esencia-view') : null;\n};\n\nmodule.exports = backbone.View.extend(View);\n"],"sourceRoot":"."}