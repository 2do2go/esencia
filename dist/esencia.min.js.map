{"version":3,"sources":["esencia.js","lib/collection.js","lib/componentsManager.js","lib/esencia.js","lib/model.js","lib/router.js","lib/utils/exec.js","lib/view.js"],"names":["factory","define","amd","exports","module","require","this","Esencia","_","Backbone","__external__","__external_Backbone","_require","id","cache","modules","call","backbone","execUtils","Collection","sync","method","collection","options","prepareOptions","getFakeBaseMethod","prototype","exec","extend","parse","success","resp","fetch","reset","context","trigger","wrapError","isTreeNodeChanged","oldNode","node","Boolean","component","name","view","View","isWaiting","attached","isUnchanged","ComponentsManager","pick","componentManagerOptions","components","tree","initialize","apply","arguments","componentOptions","Events","rootComponentEl","addRootComponent","RootView","el","add","parent","defaults","process","isUndefined","uniqueId","isString","Error","isNull","get","remove","names","callback","isArray","noop","_calculateTree","oldTree","_applyTree","children","self","calculateHashedTree","length","parentNames","nodes","chain","uniq","map","has","push","compact","value","each","isEmpty","filter","some","container","params","afterCallback","after","iterate","oldChildren","setData","setView","renderViews","include","attachViews","exclude","union","child","render","index","detach","extendOwn","result","viewOptions","listenToOnce","Router","Model","model","serverAttrs","set","root","pushState","namedParameters","nowhereUrl","config","autoloadModules","modulesPath","defaultModuleName","onModuleError","routerOptions","constructor","componentsManager","router","urlParams","history","route","setModule","_populateUrlParams","key","isObject","isFunction","url","defaultUrlParams","args","_defaultMiddleware","navigate","fragment","indexOf","substring","force","replace","omit","qs","toFragment","val","undefined","next","middleware","defaultMiddleware","moduleName","split","find","identity","moduleInit","start","DEFAULT_EXEC_TYPE","urlError","error","type","dataType","contentType","processData","data","JSON","stringify","baseMethodsMap","POST","PUT","PATCH","DELETE","GET","toUpperCase","isContainerSkipped","contains","$","splice","Array","delegateEventSplitter","nestedEventTypes","templateHelpers","waitsCounter","waitAvailable","views","collections","models","template","_prepareEvents","_prepareViews","wait","delegateNestedEvents","once","defer","_render","html","renderTemplate","getTemplateData","$el","setElement","_ensureElement","$container","attach","viewsGroup","first","containerEl","domChanged","$els","append","_updateViews","setViews","appendView","_insertViews","appendViews","prependView","prependViews","insertView","insertViews","removeView","getView","_removeViews","removeViews","getViews","clone","concat","oldViews","all","oldView","viewObjs","viewObj","sortBy","undelegateNestedEvents","element","$previousEl","_setElement","replaceWith","delegateEvents","events","entities","listeners","_nestedEventsHash","listener","entity","listenTo","eventName","handler","stopListening","typeEventsHash","match","entityKeys","bind","entityKey","afterAttach","previousView","attr","cid","detachViews","beforeDetach","removeData","removeAttr","undelegateEvents","getClosestView","selector","$selector","is","closest"],"mappings":"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","file":"esencia.min.js","sourcesContent":["(function (factory) {\n    if (typeof define === 'function' && define.amd) {\n        define([\n            'underscore',\n            'backbone'\n        ], factory);\n    } else if (typeof exports === 'object') {\n        module.exports = factory(require('underscore'), require('backbone'));\n    } else {\n        this.Esencia = factory(_, Backbone);\n    }\n}(function (__external__, __external_Backbone) {\n    var global = this, define;\n    function _require(id) {\n        var module = _require.cache[id];\n        if (!module) {\n            var exports = {};\n            module = _require.cache[id] = {\n                id: id,\n                exports: exports\n            };\n            _require.modules[id].call(exports, module, exports);\n        }\n        return module.exports;\n    }\n    _require.cache = [];\n    _require.modules = [\n        function (module, exports) {\n            'use strict';\n            var _ = _require(8);\n            var backbone = _require(7);\n            var execUtils = _require(5);\n            var Collection = {};\n            Collection.sync = function (method, collection, options) {\n                options = execUtils.prepareOptions(method, collection, options);\n                method = execUtils.getFakeBaseMethod(options);\n                return backbone.Collection.prototype.sync.call(this, method, collection, options);\n            };\n            Collection.exec = function (method, options) {\n                options = _.extend({ parse: true }, options);\n                var collection = this;\n                var success = options.success;\n                options.success = function (resp) {\n                    if (options.fetch)\n                        collection[options.reset ? 'reset' : 'set'](resp, options);\n                    if (success)\n                        success.call(options.context, collection, resp, options);\n                    collection.trigger('exec:' + method, collection, resp, options);\n                };\n                execUtils.wrapError(this, options);\n                return this.sync(method, this, options);\n            };\n            module.exports = backbone.Collection.extend(Collection);\n        },\n        function (module, exports) {\n            'use strict';\n            var _ = _require(8);\n            var backbone = _require(7);\n            var View = _require(6);\n            function isTreeNodeChanged(oldNode, node) {\n                return Boolean(!oldNode || oldNode.component.name !== node.component.name || !oldNode.view || oldNode.view instanceof node.component.View === false || oldNode.view.isWaiting() || !oldNode.view.attached || !oldNode.view.isUnchanged());\n            }\n            var ComponentsManager = function (options) {\n                _.extend(this, _.pick(options, componentManagerOptions));\n                this.options = options;\n                this.components = {};\n                this.tree = [];\n                this.initialize.apply(this, arguments);\n            };\n            var componentManagerOptions = [\n                    'rootComponentEl',\n                    'viewOptions'\n                ];\n            var componentOptions = [\n                    'name',\n                    'parent',\n                    'container',\n                    'View',\n                    'models',\n                    'collections',\n                    'viewOptions'\n                ];\n            _.extend(ComponentsManager.prototype, backbone.Events, {\n                rootComponentEl: 'html',\n                initialize: function () {\n                },\n                addRootComponent: function () {\n                    var RootView = View.extend({ el: this.rootComponentEl });\n                    this.add({\n                        name: '',\n                        parent: null,\n                        View: RootView\n                    });\n                },\n                add: function (options) {\n                    options = _({}).defaults(options, {\n                        parent: '',\n                        process: false\n                    });\n                    var component = _(options).pick(componentOptions);\n                    if (_.isUndefined(component.name)) {\n                        component.name = _.uniqueId('auto-named-component');\n                    }\n                    if (!_.isString(component.name)) {\n                        throw new Error('Component `name` option should be a string');\n                    }\n                    if (component.name in this.components) {\n                        throw new Error('Duplicate component with name \"' + component.name + '\"');\n                    }\n                    if (!component.View) {\n                        throw new Error('Component `View` option is required');\n                    }\n                    if (!_.isString(component.parent) && !_.isNull(component.parent)) {\n                        throw new Error('Component `parent` option should be a string or null');\n                    }\n                    this.components[component.name] = component;\n                    if (options.process) {\n                        this.process(component.name);\n                    }\n                    return component;\n                },\n                get: function (name) {\n                    return this.components[name] || null;\n                },\n                remove: function (name) {\n                    delete this.components[name];\n                },\n                process: function (names, callback) {\n                    if (!_.isArray(names))\n                        names = [names];\n                    callback = callback || _.noop;\n                    var tree = this._calculateTree(names);\n                    var oldTree = this.tree;\n                    this.tree = [];\n                    this._applyTree({\n                        parent: { children: this.tree },\n                        oldTree: oldTree,\n                        tree: tree\n                    }, callback);\n                },\n                _calculateTree: function (names) {\n                    var self = this;\n                    var calculateHashedTree = function (names, tree) {\n                        if (!names.length)\n                            return tree;\n                        var parentNames = [];\n                        var nodes = _(names).chain().uniq().map(function (name) {\n                                var component = self.components[name];\n                                if (!component) {\n                                    throw new Error('Unknown component with name \"' + name + '\"');\n                                }\n                                if (_(tree).has(component.name))\n                                    return null;\n                                var node = {\n                                        component: component,\n                                        children: []\n                                    };\n                                if (_.isString(component.parent)) {\n                                    parentNames.push(component.parent);\n                                }\n                                tree[component.name] = node;\n                                return node;\n                            }).compact().value();\n                        tree = calculateHashedTree(parentNames, tree);\n                        _(nodes).each(function (node) {\n                            if (_.isString(node.component.parent)) {\n                                tree[node.component.parent].children.push(node);\n                            }\n                        });\n                        return tree;\n                    };\n                    var tree = calculateHashedTree(names, {});\n                    if (_.isEmpty(tree)) {\n                        throw new Error('Calculated components tree is empty');\n                    }\n                    tree = _(tree).filter(function (node) {\n                        return _.isNull(node.component.parent);\n                    });\n                    if (!tree.length) {\n                        throw new Error('Calculated components tree should have at least one root node');\n                    }\n                    if (_(tree).some(function (node) {\n                            return node.component.container;\n                        })) {\n                        throw new Error('Root component could not have a container');\n                    }\n                    return tree;\n                },\n                _applyTree: function (params, callback) {\n                    var self = this;\n                    var parent = params.parent;\n                    var afterCallback = _.after(params.tree.length, callback);\n                    var iterate = function (oldNode, node) {\n                        var container = node.component.container;\n                        var children = node.children;\n                        var oldChildren = oldNode ? oldNode.children : [];\n                        node.view.setData();\n                        if (!node.view.attached && container) {\n                            parent.view.setView(node.view, container).renderViews({ include: [container] }).attachViews({ include: [container] });\n                        } else {\n                            var exclude = _.union(_(children).chain().map(function (child) {\n                                    return child.component.container;\n                                }).compact().value(), _(oldChildren).chain().map(function (child) {\n                                    return child.component.container;\n                                }).compact().value());\n                            node.view.render({ exclude: exclude });\n                        }\n                        node.children = [];\n                        parent.children.push(node);\n                        self._applyTree({\n                            parent: node,\n                            oldTree: oldChildren,\n                            tree: children\n                        }, afterCallback);\n                    };\n                    _(params.tree).each(function (node, index) {\n                        var oldNode = params.oldTree[index] || null;\n                        if (isTreeNodeChanged(oldNode, node)) {\n                            if (oldNode && oldNode.view) {\n                                if (oldNode.component.container) {\n                                    if (oldNode.component.container !== node.component.container) {\n                                        oldNode.view.remove();\n                                    }\n                                } else {\n                                    oldNode.view.detach();\n                                }\n                            }\n                            node.view = new node.component.View(_(node.component).chain().pick('models', 'collections').extendOwn(_(node.component).result('viewOptions'), self.viewOptions).value());\n                            if (node.view.isWaiting()) {\n                                self.listenToOnce(node.view, 'resolve', function () {\n                                    iterate(null, node);\n                                });\n                            } else {\n                                iterate(null, node);\n                            }\n                        } else {\n                            node.view = oldNode.view;\n                            iterate(oldNode, node);\n                        }\n                    });\n                }\n            });\n            ComponentsManager.extend = View.extend;\n            module.exports = ComponentsManager;\n        },\n        function (module, exports) {\n            'use strict';\n            var Router = _require(4);\n            var Collection = _require(0);\n            var Model = _require(3);\n            var View = _require(6);\n            var ComponentsManager = _require(1);\n            module.exports.Router = Router;\n            module.exports.Collection = Collection;\n            module.exports.Model = Model;\n            module.exports.View = View;\n            module.exports.ComponentsManager = ComponentsManager;\n        },\n        function (module, exports) {\n            'use strict';\n            var _ = _require(8);\n            var backbone = _require(7);\n            var execUtils = _require(5);\n            var Model = {};\n            Model.sync = function (method, model, options) {\n                options = execUtils.prepareOptions(method, model, options);\n                method = execUtils.getFakeBaseMethod(options);\n                return backbone.Model.prototype.sync.call(this, method, model, options);\n            };\n            Model.exec = function (method, options) {\n                options = _.extend({ parse: true }, options);\n                var model = this;\n                var success = options.success;\n                options.success = function (resp) {\n                    if (options.fetch) {\n                        var serverAttrs = options.parse ? model.parse(resp, options) : resp;\n                        if (!model.set(serverAttrs, options))\n                            return false;\n                    }\n                    if (success)\n                        success.call(options.context, model, resp, options);\n                    model.trigger('exec:' + method, model, resp, options);\n                };\n                execUtils.wrapError(this, options);\n                return this.sync(method, this, options);\n            };\n            module.exports = backbone.Model.extend(Model);\n        },\n        function (module, exports) {\n            'use strict';\n            var _ = _require(8);\n            var backbone = _require(7);\n            var ComponentsManager = _require(1);\n            var Router = {\n                    root: '/',\n                    pushState: false,\n                    namedParameters: false,\n                    nowhereUrl: '___',\n                    config: {},\n                    autoloadModules: true,\n                    modulesPath: 'modules/',\n                    defaultModuleName: 'main',\n                    onModuleError: function () {\n                    }\n                };\n            var routerOptions = [\n                    'root',\n                    'pushState',\n                    'namedParameters',\n                    'nowhereUrl',\n                    'config',\n                    'autoloadModules',\n                    'modulesPath',\n                    'defaultModuleName',\n                    'onModuleError'\n                ];\n            Router.constructor = function (options) {\n                options = options || {};\n                _.extend(this, _.pick(options, routerOptions));\n                this.options = options;\n                this.componentsManager = new ComponentsManager(_.extend({}, options, { viewOptions: { router: this } }));\n                this.urlParams = {};\n                this.modules = {};\n                this.history = backbone.history;\n                backbone.Router.namedParameters = this.namedParameters;\n                backbone.Router.apply(this, arguments);\n                if (options.autoloadModules) {\n                    this.route('*url', function (params) {\n                        this.setModule(params);\n                    });\n                }\n            };\n            Router._populateUrlParams = function () {\n                var self = this;\n                var key;\n                for (key in this.urlParams) {\n                    if (_(this.urlParams).has(key)) {\n                        delete this.urlParams[key];\n                    }\n                }\n                _(arguments).chain().filter(_.isObject).each(function (params) {\n                    params = _.isFunction(params) ? params.call(self) : params;\n                    _.extendOwn(self.urlParams, params);\n                });\n                return this.urlParams;\n            };\n            Router.component = function (options) {\n                var self = this;\n                var component = this.componentsManager.add(options);\n                if (!_.isUndefined(options.url)) {\n                    this.route(options.url, component.name, function (params) {\n                        self._populateUrlParams(options.defaultUrlParams, params);\n                        self.componentsManager.process(component.name);\n                    });\n                }\n            };\n            Router.route = function (url, name, callback) {\n                var router = this;\n                if (_.isFunction(name)) {\n                    callback = name;\n                    name = '';\n                }\n                backbone.Router.prototype.route.call(this, url, name, function () {\n                    var args = arguments;\n                    router._defaultMiddleware({\n                        url: url,\n                        name: name,\n                        callback: callback\n                    }, function () {\n                        callback.apply(router, args);\n                    });\n                });\n            };\n            Router.navigate = function (fragment, options) {\n                options = options || {};\n                if (fragment.indexOf(this.root) === 0) {\n                    fragment = fragment.substring(this.root.length);\n                }\n                if (options.force) {\n                    this.navigate(this.nowhereUrl, {\n                        replace: options.replace,\n                        trigger: false\n                    });\n                    options = _(options).chain().omit('force').extend({ replace: true }).value();\n                    return this.navigate(fragment, options);\n                }\n                options = _(options || {}).defaults({\n                    trigger: true,\n                    params: {}\n                });\n                var qs = options.qs;\n                if (this.toFragment && qs) {\n                    _(qs).each(function (val, key, qs) {\n                        if (val === undefined || val === null)\n                            delete qs[key];\n                    });\n                    fragment = this.toFragment(fragment, qs);\n                    delete options.qs;\n                }\n                backbone.Router.prototype.navigate.call(this, fragment, options);\n            };\n            Router._defaultMiddleware = function (route, next) {\n                next();\n            };\n            Router.middleware = function (middleware) {\n                var router = this;\n                var defaultMiddleware = this._defaultMiddleware;\n                this._defaultMiddleware = function (route, next) {\n                    defaultMiddleware.call(router, route, function () {\n                        middleware.call(router, route, next);\n                    });\n                };\n                return this;\n            };\n            Router.setModule = function (params) {\n                var router = this;\n                var url = params.url;\n                delete params.url;\n                var moduleName = _(url.split('/')).find(_.identity) || this.defaultModuleName;\n                require([this.modulesPath + moduleName], function (moduleInit) {\n                    if (!router.modules[moduleName]) {\n                        moduleInit(router);\n                        router.modules[moduleName] = true;\n                        router.navigate(url, {\n                            replace: true,\n                            force: true,\n                            qs: params\n                        });\n                    }\n                }, this.onModuleError);\n            };\n            Router.start = function () {\n                this.componentsManager.addRootComponent();\n                backbone.history.start({\n                    pushState: this.pushState,\n                    root: this.root\n                });\n            };\n            module.exports = backbone.Router.extend(Router);\n        },\n        function (module, exports) {\n            'use strict';\n            var _ = _require(8);\n            var DEFAULT_EXEC_TYPE = 'PUT';\n            var urlError = function () {\n                throw new Error('A \"url\" property or function must be specified');\n            };\n            module.exports.wrapError = function (model, options) {\n                var error = options.error;\n                options.error = function (resp) {\n                    if (error)\n                        error.call(options.context, model, resp, options);\n                    model.trigger('error', model, resp, options);\n                };\n            };\n            module.exports.prepareOptions = function (method, model, options) {\n                options = _({\n                    type: DEFAULT_EXEC_TYPE,\n                    dataType: 'json',\n                    contentType: 'application/json',\n                    processData: false\n                }).extend(options);\n                if (!options.url) {\n                    var url = _.result(model, 'url') || urlError();\n                    options.url = url.replace(/[^\\/]$/, '$&/') + method;\n                }\n                if (options.data && _.isObject(options.data) && !options.processData) {\n                    options.data = JSON.stringify(options.data);\n                }\n                return options;\n            };\n            var baseMethodsMap = {\n                    'POST': 'create',\n                    'PUT': 'update',\n                    'PATCH': 'patch',\n                    'DELETE': 'delete',\n                    'GET': 'read'\n                };\n            module.exports.getFakeBaseMethod = function (options) {\n                return baseMethodsMap[options.type.toUpperCase()];\n            };\n        },\n        function (module, exports) {\n            'use strict';\n            var _ = _require(8);\n            var backbone = _require(7);\n            var $ = backbone.$;\n            var splice = Array.prototype.splice;\n            var delegateEventSplitter = /^(\\S+)\\s*(.*)$/;\n            var nestedEventTypes = [\n                    'views',\n                    'collections',\n                    'models'\n                ];\n            function isContainerSkipped(container, options) {\n                return Boolean(options.exclude && _(options.exclude).contains(container) || options.include && !_(options.include).contains(container));\n            }\n            var View = {\n                    templateHelpers: {},\n                    waitsCounter: 0,\n                    waitAvailable: true,\n                    attached: false\n                };\n            var viewOptions = [\n                    'views',\n                    'collections',\n                    'models',\n                    'data',\n                    'events',\n                    'router',\n                    'templateHelpers'\n                ];\n            View.constructor = function (options) {\n                var self = this;\n                options = options || {};\n                this.views = {};\n                this.collections = {};\n                this.models = {};\n                this.data = {};\n                _.extend(this, _.pick(options, viewOptions));\n                this.options = options;\n                if (this.template && !_.isFunction(this.template)) {\n                    throw new Error('View `template` option should be a function');\n                }\n                this._prepareEvents();\n                this._prepareViews();\n                backbone.View.apply(this, arguments);\n                _(this.views).each(function (views) {\n                    _(views).each(function (view) {\n                        if (view.isWaiting()) {\n                            self.listenToOnce(view, 'resolve', self.wait());\n                        }\n                    });\n                });\n                this.waitAvailable = false;\n                _(this.collections).each(function (collection, key) {\n                    self.delegateNestedEvents('collections', key, collection);\n                });\n                _(this.models).each(function (model, key) {\n                    self.delegateNestedEvents('models', key, model);\n                });\n            };\n            View.setData = function (data) {\n                if (data)\n                    this.data = data;\n                return this;\n            };\n            View.isUnchanged = function () {\n                return true;\n            };\n            View.wait = function () {\n                if (!this.waitAvailable) {\n                    throw new Error('Method .wait() is available only in the constructor');\n                }\n                var self = this;\n                this.waitsCounter++;\n                return _.once(function () {\n                    _.defer(function () {\n                        self.waitsCounter--;\n                        if (!self.isWaiting()) {\n                            self.trigger('resolve');\n                        }\n                    });\n                });\n            };\n            View.isWaiting = function () {\n                return this.waitsCounter > 0;\n            };\n            View._render = function (options) {\n                if (this.isWaiting())\n                    return this;\n                options = options || {};\n                if (this.template) {\n                    if (options.force || !this.attached || !this.isUnchanged()) {\n                        this.detach();\n                        var html = this.renderTemplate(this.template, this.getTemplateData());\n                        var $el = $(html);\n                        if (!$el.length) {\n                            throw new Error('View template produces empty html');\n                        }\n                        if ($el.length > 1) {\n                            throw new Error('View template produces html with more than one root elements');\n                        }\n                        this.setElement($el);\n                    }\n                } else {\n                    if (!this.$el.length)\n                        this._ensureElement();\n                }\n                this.renderViews(options);\n                if (!this.parent || this.$container) {\n                    this.attachViews(options);\n                    this.attach();\n                }\n                return this;\n            };\n            View.render = function (options) {\n                return this._render(options);\n            };\n            View.getTemplateData = function () {\n                return this.data;\n            };\n            View.renderTemplate = function (template, data) {\n                data = _(this).chain().result('templateHelpers').extend(data).value();\n                return template(data);\n            };\n            View.renderViews = function (options) {\n                var self = this;\n                _(this.views).each(function (viewsGroup, container) {\n                    if (isContainerSkipped(container, options))\n                        return;\n                    if (!viewsGroup.length)\n                        return;\n                    _(viewsGroup).each(function (view) {\n                        view.render(_(options).omit('include', 'exclude'));\n                    });\n                    var $container = container ? self.$(container).first() : self.$el;\n                    if (!$container.length) {\n                        throw new Error('Container \"' + container + '\" is not found');\n                    }\n                    var containerEl = $container.get(0);\n                    var domChanged = _(viewsGroup).some(function (view) {\n                            return !view.attached || !view.$container || view.$container.get(0) !== containerEl;\n                        });\n                    if (domChanged) {\n                        var $els = [];\n                        _(viewsGroup).each(function (view) {\n                            view.$container = $container;\n                            $els.push(view.$el);\n                        });\n                        $container.append($els);\n                    }\n                });\n                return this;\n            };\n            View.setView = function (view, container, index) {\n                return this._updateViews([view], container, index);\n            };\n            View.setViews = function (views, container, index) {\n                return this._updateViews(views, container, index);\n            };\n            View.appendView = function (view, container) {\n                return this._insertViews([view], container);\n            };\n            View.appendViews = function (views, container) {\n                return this._insertViews(views, container);\n            };\n            View.prependView = function (view, container) {\n                return this._insertViews([view], container, 0);\n            };\n            View.prependViews = function (views, container) {\n                return this._insertViews(views, container, 0);\n            };\n            View.insertView = function (view, container, index) {\n                return this._insertViews([view], container, index);\n            };\n            View.insertViews = function (views, container, index) {\n                return this._insertViews(views, container, index);\n            };\n            View.removeView = function (view, container, index) {\n                if (arguments.length < 2) {\n                    throw new Error('\"view\" or \"index\" arguments must be specified');\n                }\n                if (_.isString(view)) {\n                    index = container;\n                    container = view;\n                    view = this.getView(container, index);\n                    if (!view)\n                        return this;\n                }\n                return this._removeViews([view], container);\n            };\n            View.removeViews = function (views, container) {\n                if (_.isString(views)) {\n                    container = views;\n                    views = this.getViews(container);\n                }\n                return this._removeViews(views, container);\n            };\n            View.getView = function (container, index) {\n                return this.getViews(container)[index || 0] || null;\n            };\n            View.getViews = function (container) {\n                return _.clone(this.views[container]) || [];\n            };\n            View._insertViews = function (views, container, index) {\n                var self = this;\n                var viewsGroup = this.getViews(container);\n                _(views).each(function (view) {\n                    if (view.parent) {\n                        view.parent.removeView(view, view.container);\n                    }\n                });\n                if (viewsGroup.length) {\n                    if (typeof index === 'undefined') {\n                        index = viewsGroup.length;\n                    }\n                    splice.apply(this.views[container], [\n                        index,\n                        0\n                    ].concat(views));\n                } else {\n                    this.views[container] = views;\n                }\n                _(views).each(function (view) {\n                    view.parent = self;\n                    view.container = container;\n                });\n                this.delegateNestedEvents('views', container, views);\n                return this;\n            };\n            View._updateViews = function (views, container, index) {\n                var oldViews;\n                if (typeof index === 'undefined') {\n                    oldViews = this.getViews(container);\n                } else {\n                    oldViews = this.getView(container, index);\n                    oldViews = oldViews ? [oldViews] : [];\n                }\n                if (oldViews.length === views.length && _(oldViews).all(function (oldView, index) {\n                        return oldView === views[index];\n                    }))\n                    return this;\n                if (oldViews.length) {\n                    this._removeViews(oldViews, container);\n                    _(oldViews).each(function (view) {\n                        view.remove();\n                    });\n                }\n                return this._insertViews(views, container, index);\n            };\n            View._removeViews = function (views, container) {\n                var self = this;\n                var viewsGroup = this.getViews(container);\n                if (!viewsGroup.length)\n                    return this;\n                var viewObjs = _(views).chain().uniq().map(function (view) {\n                        return {\n                            view: view,\n                            index: _.indexOf(viewsGroup, view)\n                        };\n                    }).filter(function (viewObj) {\n                        return viewObj.index >= 0;\n                    }).sortBy(function (viewObj) {\n                        return -viewObj.index;\n                    }).value();\n                if (!viewObjs.length)\n                    return this;\n                _(viewObjs).each(function (viewObj) {\n                    var view = viewObj.view;\n                    splice.call(self.views[container], viewObj.index, 1);\n                    self.undelegateNestedEvents(view);\n                    delete view.parent;\n                });\n                return this;\n            };\n            View.setElement = function (element) {\n                var $previousEl = this.$el;\n                this._setElement(element);\n                if ($previousEl && this.$container) {\n                    $previousEl.replaceWith(this.$el);\n                }\n                return this;\n            };\n            View.delegateEvents = function (events) {\n                events = events || _.result(this, 'events');\n                if (!events)\n                    return this;\n                events = _(events).omit(nestedEventTypes);\n                return backbone.View.prototype.delegateEvents.call(this, events);\n            };\n            View.delegateNestedEvents = function (type, key, entities) {\n                var self = this;\n                if (!_.isArray(entities))\n                    entities = [entities];\n                var listeners = this._nestedEventsHash[type][key];\n                if (listeners) {\n                    _(listeners).each(function (listener) {\n                        _(entities).each(function (entity) {\n                            self.listenTo(entity, listener.eventName, listener.handler);\n                        });\n                    });\n                }\n                return this;\n            };\n            View.undelegateNestedEvents = function (entities) {\n                var self = this;\n                if (!_.isArray(entities))\n                    entities = [entities];\n                _(entities).each(function (entity) {\n                    self.stopListening(entity);\n                });\n                return this;\n            };\n            View._prepareEvents = function (events) {\n                var self = this;\n                this._nestedEventsHash = {};\n                _(nestedEventTypes).each(function (type) {\n                    self._nestedEventsHash[type] = {};\n                });\n                events = events || _.result(this, 'events');\n                if (!events)\n                    return;\n                _(nestedEventTypes).each(function (type) {\n                    var typeEventsHash = self._nestedEventsHash[type];\n                    if (!_(events).has(type) || !_.isObject(events[type]))\n                        return;\n                    _(events[type]).each(function (method, key) {\n                        if (!_.isFunction(method))\n                            method = self[method];\n                        if (!method)\n                            return;\n                        var match = key.match(delegateEventSplitter);\n                        var eventName = match[1];\n                        var entityKeys = match[2].replace(/ *, */g, ',').split(',');\n                        method = _.bind(method, self);\n                        _(entityKeys).each(function (entityKey) {\n                            typeEventsHash[entityKey] = typeEventsHash[entityKey] || [];\n                            typeEventsHash[entityKey].push({\n                                eventName: eventName,\n                                handler: method\n                            });\n                        });\n                    });\n                });\n            };\n            View._prepareViews = function () {\n                var self = this;\n                _(this.views).each(function (views, container) {\n                    if (!_.isArray(views))\n                        views = [views];\n                    self.views[container] = views;\n                    self.delegateNestedEvents('views', container, views);\n                });\n            };\n            View.attachViews = function (options) {\n                options = options || {};\n                _(this.views).each(function (viewsGroup, container) {\n                    if (isContainerSkipped(container, options))\n                        return;\n                    if (!viewsGroup.length)\n                        return;\n                    _(viewsGroup).each(function (view) {\n                        view.attachViews(_(options).omit('include', 'exclude'));\n                        view.attach();\n                    });\n                });\n                return this;\n            };\n            View.afterAttach = function () {\n                return this;\n            };\n            View.attach = function () {\n                if (this.attached)\n                    return this;\n                var previousView = this.$el.data('esencia-view');\n                if (previousView)\n                    previousView.detach();\n                this.$el.data('esencia-view', this).attr('esencia-view', this.cid);\n                this.delegateEvents();\n                this.attached = true;\n                this.afterAttach();\n                this.trigger('attach');\n                return this;\n            };\n            View.detachViews = function () {\n                _(this.views).each(function (viewsGroup) {\n                    if (!viewsGroup.length)\n                        return;\n                    _(viewsGroup).each(function (view) {\n                        view.detachViews();\n                        view.detach();\n                    });\n                });\n                return this;\n            };\n            View.beforeDetach = function () {\n                return this;\n            };\n            View.detach = function () {\n                if (!this.attached)\n                    return this;\n                this.trigger('detach');\n                this.beforeDetach();\n                this.$el.removeData('esencia-view').removeAttr('esencia-view');\n                this.undelegateEvents();\n                this.attached = false;\n                return this;\n            };\n            View.remove = function () {\n                if (this.parent) {\n                    this.parent.removeView(this, this.container);\n                }\n                this.detachViews();\n                this.detach();\n                return backbone.View.prototype.remove.call(this);\n            };\n            View.getClosestView = function (selector) {\n                var $selector = $(selector);\n                if (!$selector.is('[esencia-view]')) {\n                    $selector = $selector.closest('[esencia-view]');\n                }\n                return $selector.length ? $selector.data('esencia-view') : null;\n            };\n            module.exports = backbone.View.extend(View);\n        },\n        function (module, exports) {\n            module.exports = __external_Backbone;\n        },\n        function (module, exports) {\n            module.exports = __external__;\n        }\n    ];\n    return _require(2);\n}));\n//# sourceMappingURL=esencia.js.map\n","'use strict';\n\nvar _ = require('underscore');\nvar backbone = require('backbone');\nvar execUtils = require('./utils/exec');\n\nvar Collection = {};\n\n/*\n * Override `sync` to add exec custom method functionality\n */\n\nCollection.sync = function(method, collection, options) {\n\toptions = execUtils.prepareOptions(method, collection, options);\n\tmethod = execUtils.getFakeBaseMethod(options);\n\treturn backbone.Collection.prototype.sync.call(\n\t\tthis, method, collection, options\n\t);\n};\n\n/*\n * Exec custom non-REST method on collection\n * It trigger `exec:[method]` event after success method exec\n *\n * @param {String} method\n * @param {Object} options\n */\n\nCollection.exec = function(method, options) {\n\toptions = _.extend({parse: true}, options);\n\tvar collection = this;\n\tvar success = options.success;\n\toptions.success = function(resp) {\n\t\tif (options.fetch) collection[options.reset ? 'reset' : 'set'](resp, options);\n\t\tif (success) success.call(options.context, collection, resp, options);\n\t\tcollection.trigger('exec:' + method, collection, resp, options);\n\t};\n\texecUtils.wrapError(this, options);\n\treturn this.sync(method, this, options);\n};\n\nmodule.exports = backbone.Collection.extend(Collection);\n","'use strict';\n\nvar _ = require('underscore');\nvar backbone = require('backbone');\nvar View = require('./view');\n\nfunction isTreeNodeChanged(oldNode, node) {\n\treturn Boolean(\n\t\t!oldNode ||\n\t\toldNode.component.name !== node.component.name ||\n\t\t!oldNode.view ||\n\t\toldNode.view instanceof node.component.View === false ||\n\t\toldNode.view.isWaiting() ||\n\t\t!oldNode.view.attached ||\n\t\t!oldNode.view.isUnchanged()\n\t);\n}\n\nvar ComponentsManager = function(options) {\n\t// populate ComponentsManager instance with fields from options\n\t_.extend(this, _.pick(options, componentManagerOptions));\n\t// save original options, it is sometimes usefull\n\tthis.options = options;\n\n\t// all components hash\n\tthis.components = {};\n\n\t// current components tree that rendered at this moment\n\tthis.tree = [];\n\n\tthis.initialize.apply(this, arguments);\n};\n\nvar componentManagerOptions = ['rootComponentEl', 'viewOptions'];\n\n var componentOptions = [\n\t'name', 'parent', 'container', 'View', 'models', 'collections', 'viewOptions'\n];\n\n_.extend(ComponentsManager.prototype, backbone.Events, {\n\trootComponentEl: 'html',\n\n\t/*\n\t * Initialize is an empty function by default. Override it with your own\n\t * initialization logic.\n\t */\n\n\tinitialize: function() {},\n\n\t/*\n\t * Add root component to components list\n\t */\n\n\taddRootComponent: function() {\n\t\tvar RootView = View.extend({\n\t\t\tel: this.rootComponentEl\n\t\t});\n\n\t\tthis.add({\n\t\t\tname: '',\n\t\t\tparent: null,\n\t\t\tView: RootView\n\t\t});\n\t},\n\n\t/*\n\t * Add component to components list\n\t *\n\t * @param {Object} options - component options\n\t */\n\n\tadd: function(options) {\n\t\toptions = _({}).defaults(options, {\n\t\t\tparent: '',\n\t\t\tprocess: false\n\t\t});\n\n\t\tvar component = _(options).pick(componentOptions);\n\n\t\t// generate uniq component name if name is omitted\n\t\tif (_.isUndefined(component.name)) {\n\t\t\tcomponent.name = _.uniqueId('auto-named-component');\n\t\t}\n\n\t\tif (!_.isString(component.name)) {\n\t\t\tthrow new Error('Component `name` option should be a string');\n\t\t}\n\n\t\tif (component.name in this.components) {\n\t\t\tthrow new Error('Duplicate component with name \"' + component.name + '\"');\n\t\t}\n\n\t\tif (!component.View) {\n\t\t\tthrow new Error('Component `View` option is required');\n\t\t}\n\n\t\tif (!_.isString(component.parent) && !_.isNull(component.parent)) {\n\t\t\tthrow new Error('Component `parent` option should be a string or null');\n\t\t}\n\n\t\tthis.components[component.name] = component;\n\n\t\t// process components tree in force mode\n\t\tif (options.process) {\n\t\t\tthis.process(component.name);\n\t\t}\n\n\t\treturn component;\n\t},\n\n\t/*\n\t * Get component by name\n\t *\n\t * @param {String} name - component name\n\t */\n\n\tget: function(name) {\n\t\treturn this.components[name] || null;\n\t},\n\n\t/*\n\t * Remove component by name\n\t *\n\t * @param {String} name - component name\n\t */\n\n\tremove: function(name) {\n\t\tdelete this.components[name];\n\t},\n\n\t/*\n\t * Process components tree by name(s) and call a callback on done\n\t *\n\t * @param {String|String[]} names - component name or names list\n\t * @params {Function} callback\n\t */\n\n\tprocess: function(names, callback) {\n\t\tif (!_.isArray(names)) names = [names];\n\t\tcallback = callback || _.noop;\n\n\t\tvar tree = this._calculateTree(names);\n\t\tvar oldTree = this.tree;\n\t\tthis.tree = [];\n\n\t\tthis._applyTree({\n\t\t\tparent: {children: this.tree},\n\t\t\toldTree: oldTree,\n\t\t\ttree: tree\n\t\t}, callback);\n\t},\n\n\t_calculateTree: function(names) {\n\t\tvar self = this;\n\n\t\t// internal function for recursion\n\t\tvar calculateHashedTree = function(names, tree) {\n\t\t\t// exit with empty tree if names list is empty\n\t\t\tif (!names.length) return tree;\n\n\t\t\tvar parentNames = [];\n\n\t\t\t// create component nodes\n\t\t\tvar nodes = _(names)\n\t\t\t\t.chain()\n\t\t\t\t.uniq()\n\t\t\t\t.map(function(name) {\n\t\t\t\t\tvar component = self.components[name];\n\n\t\t\t\t\tif (!component) {\n\t\t\t\t\t\tthrow new Error('Unknown component with name \"' + name + '\"');\n\t\t\t\t\t}\n\n\t\t\t\t\t// skip component if it is already in the tree\n\t\t\t\t\tif (_(tree).has(component.name)) return null;\n\n\t\t\t\t\t// create node\n\t\t\t\t\tvar node = {\n\t\t\t\t\t\tcomponent: component,\n\t\t\t\t\t\tchildren: []\n\t\t\t\t\t};\n\n\t\t\t\t\t// add parent name to the list\n\t\t\t\t\tif (_.isString(component.parent)) {\n\t\t\t\t\t\tparentNames.push(component.parent);\n\t\t\t\t\t}\n\n\t\t\t\t\t// add nodes to the hashed tree first to prevent cycles\n\t\t\t\t\ttree[component.name] = node;\n\n\t\t\t\t\treturn node;\n\t\t\t\t})\n\t\t\t\t.compact()\n\t\t\t\t.value();\n\n\t\t\t// calculate new tree for parent components\n\t\t\ttree = calculateHashedTree(parentNames, tree);\n\n\t\t\t// add each node to the parent children list if component has a parent\n\t\t\t_(nodes).each(function(node) {\n\t\t\t\tif (_.isString(node.component.parent)) {\n\t\t\t\t\ttree[node.component.parent].children.push(node);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\treturn tree;\n\t\t};\n\n\t\tvar tree = calculateHashedTree(names, {});\n\n\t\tif (_.isEmpty(tree)) {\n\t\t\tthrow new Error('Calculated components tree is empty');\n\t\t}\n\n\t\t// filter root components\n\t\ttree = _(tree).filter(function(node) {\n\t\t\treturn _.isNull(node.component.parent);\n\t\t});\n\n\t\tif (!tree.length) {\n\t\t\tthrow new Error(\n\t\t\t\t'Calculated components tree should have at least one root node'\n\t\t\t);\n\t\t}\n\n\t\tif (\n\t\t\t_(tree).some(function(node) {\n\t\t\t\treturn node.component.container;\n\t\t\t})\n\t\t) {\n\t\t\tthrow new Error('Root component could not have a container');\n\t\t}\n\n\t\treturn tree;\n\t},\n\n\t_applyTree: function(params, callback) {\n\t\tvar self = this;\n\n\t\tvar parent = params.parent;\n\n\t\tvar afterCallback = _.after(params.tree.length, callback);\n\n\t\tvar iterate = function(oldNode, node) {\n\t\t\tvar container = node.component.container;\n\n\t\t\tvar children = node.children;\n\t\t\tvar oldChildren = oldNode ? oldNode.children : [];\n\n\t\t\t// set view data\n\t\t\tnode.view.setData();\n\n\t\t\tif (!node.view.attached && container) {\n\t\t\t\t// render view with container from parent view\n\t\t\t\tparent.view\n\t\t\t\t\t.setView(node.view, container)\n\t\t\t\t\t.renderViews({include: [container]})\n\t\t\t\t\t.attachViews({include: [container]});\n\t\t\t} else {\n\t\t\t\t// exclude list is an union of old and new children\n\t\t\t\tvar exclude = _.union(\n\t\t\t\t\t_(children).chain().map(function(child) {\n\t\t\t\t\t\treturn child.component.container;\n\t\t\t\t\t}).compact().value(),\n\t\t\t\t\t_(oldChildren).chain().map(function(child) {\n\t\t\t\t\t\treturn child.component.container;\n\t\t\t\t\t}).compact().value()\n\t\t\t\t);\n\n\t\t\t\t// render view without container directly\n\t\t\t\tnode.view.render({exclude: exclude});\n\t\t\t}\n\n\t\t\t// clear children field in new node because it will set recursive\n\t\t\t// and should be empty in error case\n\t\t\tnode.children = [];\n\n\t\t\t// save node to the parent children\n\t\t\tparent.children.push(node);\n\n\t\t\t// recursive call for children nodes\n\t\t\tself._applyTree({\n\t\t\t\tparent: node,\n\t\t\t\toldTree: oldChildren,\n\t\t\t\ttree: children\n\t\t\t}, afterCallback);\n\t\t};\n\n\t\t_(params.tree).each(function(node, index) {\n\t\t\t// TODO get oldNode in better way\n\t\t\tvar oldNode = params.oldTree[index] || null;\n\n\t\t\tif (isTreeNodeChanged(oldNode, node)) {\n\t\t\t\tif (oldNode && oldNode.view) {\n\t\t\t\t\tif (oldNode.component.container) {\n\t\t\t\t\t\t// remove old view if container for new view dirrent\n\t\t\t\t\t\tif (oldNode.component.container !== node.component.container) {\n\t\t\t\t\t\t\toldNode.view.remove();\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// detach old view if it has not a container\n\t\t\t\t\t\toldNode.view.detach();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// create new view\n\t\t\t\tnode.view = new (node.component.View)(\n\t\t\t\t\t_(node.component)\n\t\t\t\t\t\t.chain()\n\t\t\t\t\t\t.pick('models', 'collections')\n\t\t\t\t\t\t.extendOwn(_(node.component).result('viewOptions'), self.viewOptions)\n\t\t\t\t\t\t.value()\n\t\t\t\t);\n\n\t\t\t\t// stop processing old components tree by passing null as oldNode\n\t\t\t\tif (node.view.isWaiting()) {\n\t\t\t\t\t// wait when view will be resolved\n\t\t\t\t\tself.listenToOnce(node.view, 'resolve', function() {\n\t\t\t\t\t\titerate(null, node);\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\titerate(null, node);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// save old view to new node\n\t\t\t\tnode.view = oldNode.view;\n\n\t\t\t\t// process old components tree\n\t\t\t\titerate(oldNode, node);\n\t\t\t}\n\t\t});\n\t}\n});\n\n/*\n * There is no good exports of extend method from backbone.\n * Take it from View and add to ComponentsManager\n *  because no other ways, ughh :-S.\n */\n\nComponentsManager.extend = View.extend;\n\nmodule.exports = ComponentsManager;\n","'use strict';\n\nvar Router = require('./router');\nvar Collection = require('./collection');\nvar Model = require('./model');\nvar View = require('./view');\nvar ComponentsManager = require('./componentsManager');\n\nmodule.exports.Router = Router;\nmodule.exports.Collection = Collection;\nmodule.exports.Model = Model;\nmodule.exports.View = View;\nmodule.exports.ComponentsManager = ComponentsManager;\n","'use strict';\n\nvar _ = require('underscore');\nvar backbone = require('backbone');\nvar execUtils = require('./utils/exec');\n\nvar Model = {};\n\n/*\n * Override `sync` to add exec custom method functionality\n */\n\nModel.sync = function(method, model, options) {\n\toptions = execUtils.prepareOptions(method, model, options);\n\tmethod = execUtils.getFakeBaseMethod(options);\n\treturn backbone.Model.prototype.sync.call(this, method, model, options);\n};\n\n/*\n * Exec custom non-REST method on model\n * It trigger `exec:[method]` event after success method exec\n *\n * @param {String} method\n * @param {Object} options\n */\n\nModel.exec = function(method, options) {\n\toptions = _.extend({parse: true}, options);\n\tvar model = this;\n\tvar success = options.success;\n\toptions.success = function(resp) {\n\t\tif (options.fetch) {\n\t\t\tvar serverAttrs = options.parse ? model.parse(resp, options) : resp;\n\t\t\tif (!model.set(serverAttrs, options)) return false;\n\t\t}\n\t\tif (success) success.call(options.context, model, resp, options);\n\t\tmodel.trigger('exec:' + method, model, resp, options);\n\t};\n\texecUtils.wrapError(this, options);\n\treturn this.sync(method, this, options);\n};\n\nmodule.exports = backbone.Model.extend(Model);\n","'use strict';\n\nvar _ = require('underscore');\nvar backbone = require('backbone');\nvar ComponentsManager = require('./componentsManager');\n\n/**\n * Router extends default backbone Router\n */\n\nvar Router = {\n\troot: '/',\n\tpushState: false,\n\tnamedParameters: false,\n\tnowhereUrl: '___',\n\tconfig: {},\n\tautoloadModules: true,\n\tmodulesPath: 'modules/',\n\tdefaultModuleName: 'main',\n\tonModuleError: function() {}\n};\n\nvar routerOptions = [\n\t'root', 'pushState', 'namedParameters', 'nowhereUrl', 'config',\n\t'autoloadModules', 'modulesPath', 'defaultModuleName', 'onModuleError'\n];\n\n/*\n * @constructor\n * @param {Object} [options]\n */\n\nRouter.constructor = function(options) {\n\toptions = options || {};\n\n\t// populate Router instance with fields from options\n\t_.extend(this, _.pick(options, routerOptions));\n\t// save original options, it is sometimes usefull\n\tthis.options = options;\n\n\tthis.componentsManager = new ComponentsManager(\n\t\t_.extend({}, options, {viewOptions: {router: this}})\n\t);\n\n\tthis.urlParams = {};\n\tthis.modules = {};\n\n\tthis.history = backbone.history;\n\n\t/*\n\t * All query parameters can be passed in a single hash using the key\n\t * referenced from the route definition (backbone queryparams will\n\t * do it for us)\n\t */\n\n\tbackbone.Router.namedParameters = this.namedParameters;\n\n\tbackbone.Router.apply(this, arguments);\n\n\tif (options.autoloadModules) {\n\t\tthis.route('*url', function(params) {\n\t\t\tthis.setModule(params);\n\t\t});\n\t}\n};\n\n/*\n * Extend all arguments to single object and replace urlParams with it\n *\n * @param {Object | Function} params1\n * @param {Object | Function} params2\n * etc. ...\n */\n\nRouter._populateUrlParams = function(/* params1, params2, ... */) {\n\tvar self = this;\n\n\t// clean old values from urlParams object\n\tvar key;\n\tfor (key in this.urlParams) {\n\t\tif (_(this.urlParams).has(key)) {\n\t\t\tdelete this.urlParams[key];\n\t\t}\n\t}\n\n\t// populate urlParams with new params\n\t_(arguments)\n\t\t.chain()\n\t\t.filter(_.isObject)\n\t\t.each(function(params) {\n\t\t\tparams = _.isFunction(params) ? params.call(self) : params;\n\t\t\t_.extendOwn(self.urlParams, params);\n\t\t});\n\n\treturn this.urlParams;\n};\n\n/*\n * Add new component to components manager\n *\n * @param {Object} options - component options\n */\n\nRouter.component = function(options) {\n\tvar self = this;\n\n\tvar component = this.componentsManager.add(options);\n\n\t// bind component to route\n\tif (!_.isUndefined(options.url)) {\n\t\tthis.route(options.url, component.name, function(params) {\n\t\t\tself._populateUrlParams(options.defaultUrlParams, params);\n\n\t\t\t// process components tree\n\t\t\tself.componentsManager.process(component.name);\n\t\t});\n\t}\n};\n\n/*\n * Override `route` to add middleware processing functionality\n */\n\nRouter.route = function(url, name, callback) {\n\tvar router = this;\n\n\tif (_.isFunction(name)) {\n\t\tcallback = name;\n\t\tname = '';\n\t}\n\n\tbackbone.Router.prototype.route.call(this, url, name, function() {\n\t\tvar args = arguments;\n\n\t\trouter._defaultMiddleware({\n\t\t\turl: url,\n\t\t\tname: name,\n\t\t\tcallback: callback\n\t\t}, function() {\n\t\t\tcallback.apply(router, args);\n\t\t});\n\t});\n};\n\n/*\n * Override `navigate`\n *\n * @param {String} fragment\n * @param {Object} [options] - hash of params\n * @param {Object} [options.qs] - query string hash\n */\n\nRouter.navigate = function(fragment, options) {\n\toptions = options || {};\n\n\tif (fragment.indexOf(this.root) === 0) {\n\t\tfragment = fragment.substring(this.root.length);\n\t}\n\n\t// force to go to the selected fragment even if we currently on it\n\tif (options.force) {\n\t\tthis.navigate(this.nowhereUrl, {\n\t\t\treplace: options.replace,\n\t\t\ttrigger: false\n\t\t});\n\n\t\toptions = _(options).chain().omit('force').extend({replace: true}).value();\n\n\t\treturn this.navigate(fragment, options);\n\t}\n\n\t// set `trigger` to true by default\n\toptions = _(options || {}).defaults({\n\t\ttrigger: true,\n\t\tparams: {}\n\t});\n\n\t// add support of query string using `toFragment` from backbone.queryparams\n\tvar qs = options.qs;\n\n\tif (this.toFragment && qs) {\n\t\t// reject undefined and null qs parameters\n\t\t_(qs).each(function(val, key, qs) {\n\t\t\tif (val === undefined || val === null) delete qs[key];\n\t\t});\n\n\t\tfragment = this.toFragment(fragment, qs);\n\n\t\tdelete options.qs;\n\t}\n\n\tbackbone.Router.prototype.navigate.call(this, fragment, options);\n};\n\n\n/*\n * Default middleware function\n */\n\nRouter._defaultMiddleware = function(route, next) {\n\tnext();\n};\n\n/**\n * Use passed function as `middleware`\n *\n * @param {Function} middleware - middleware function,\n * `route` and `next` will be passed as arguments.\n * context (`this`) is link to the router object.\n */\n\nRouter.middleware = function(middleware) {\n\tvar router = this;\n\n\tvar defaultMiddleware = this._defaultMiddleware;\n\n\tthis._defaultMiddleware = function(route, next) {\n\t\tdefaultMiddleware.call(router, route, function() {\n\t\t\tmiddleware.call(router, route, next);\n\t\t});\n\t};\n\n\treturn this;\n};\n\n/*\n * Require module file and init it\n *\n * @param {String} params.url Url without query string\n */\n\nRouter.setModule = function(params) {\n\tvar router = this;\n\n\tvar url = params.url;\n\tdelete params.url;\n\n\tvar moduleName = _(url.split('/')).find(_.identity) || this.defaultModuleName;\n\n\t// require module file\n\trequire([this.modulesPath + moduleName], function(moduleInit) {\n\t\t// if module is loaded first time\n\t\tif (!router.modules[moduleName]) {\n\t\t\t// init it\n\t\t\tmoduleInit(router);\n\n\t\t\t// set module init flag to true\n\t\t\trouter.modules[moduleName] = true;\n\n\t\t\t// and navigate again with force flag\n\t\t\trouter.navigate(url, {\n\t\t\t\treplace: true,\n\t\t\t\tforce: true,\n\t\t\t\tqs: params\n\t\t\t});\n\t\t}\n\t}, this.onModuleError);\n};\n\n/*\n * Start routes handling\n */\n\nRouter.start = function() {\n\tthis.componentsManager.addRootComponent();\n\n\tbackbone.history.start({\n\t\tpushState: this.pushState,\n\t\troot: this.root\n\t});\n};\n\nmodule.exports = backbone.Router.extend(Router);\n","'use strict';\n\nvar _ = require('underscore');\n\n// Default http method type for exec methods\nvar DEFAULT_EXEC_TYPE = 'PUT';\n\n// Throw an error when a URL is needed, and none is supplied.\nvar urlError = function() {\n\tthrow new Error('A \"url\" property or function must be specified');\n};\n\n// Wrap an optional error callback with a fallback error event.\nmodule.exports.wrapError = function(model, options) {\n\tvar error = options.error;\n\toptions.error = function(resp) {\n\t\tif (error) error.call(options.context, model, resp, options);\n\t\tmodel.trigger('error', model, resp, options);\n\t};\n};\n\nmodule.exports.prepareOptions = function(method, model, options) {\n\toptions = _({\n\t\ttype: DEFAULT_EXEC_TYPE,\n\t\tdataType: 'json',\n\t\tcontentType: 'application/json',\n\t\tprocessData: false\n\t}).extend(options);\n\n\t// Ensure that we have a URL and add method name to it\n\tif (!options.url) {\n\t\tvar url = _.result(model, 'url') || urlError();\n\t\toptions.url = url.replace(/[^\\/]$/, '$&/') + method;\n\t}\n\n\t// stringify data to json\n\tif (options.data && _.isObject(options.data) && !options.processData) {\n\t\toptions.data = JSON.stringify(options.data);\n\t}\n\n\treturn options;\n};\n\n// HTTP type to backbone sync methods map\nvar baseMethodsMap = {\n\t'POST': 'create',\n\t'PUT': 'update',\n\t'PATCH': 'patch',\n\t'DELETE': 'delete',\n\t'GET': 'read'\n};\n\nmodule.exports.getFakeBaseMethod = function(options) {\n\treturn baseMethodsMap[options.type.toUpperCase()];\n};\n","'use strict';\n\nvar _ = require('underscore');\nvar backbone = require('backbone');\n\n// Take jquery or other selectors lib from backbone\nvar $ = backbone.$;\n\nvar splice = Array.prototype.splice;\n\n// Cached regex to split keys for `delegate`.\nvar delegateEventSplitter = /^(\\S+)\\s*(.*)$/;\n\n// List of events type for nested entities processed by current view\nvar nestedEventTypes = ['views', 'collections', 'models'];\n\nfunction isContainerSkipped(container, options) {\n\treturn Boolean(\n\t\t(options.exclude && _(options.exclude).contains(container)) ||\n\t\t(options.include && !_(options.include).contains(container))\n\t);\n}\n\n/**\n * @class Esencia.View\n * @extend Backbone.View\n */\n\nvar View = {\n\t// Helpers (Object|Fuction) which will be passed to the template\n\ttemplateHelpers: {},\n\n\t// views are in the resolved state by default\n\twaitsCounter: 0,\n\n\t// this flag is used to check that .wait() is called\n\t// in the constructor/initialize\n\twaitAvailable: true,\n\n\t// views are not attached by default\n\tattached: false\n};\n\nvar viewOptions = [\n\t'views', 'collections', 'models', 'data', 'events', 'router', 'templateHelpers'\n];\n\n/**\n * @constructor\n * @param {Object} [options]\n */\n\nView.constructor = function(options) {\n\tvar self = this;\n\n\toptions = options || {};\n\n\t// nested views, collections, models and data are empty by default\n\tthis.views = {};\n\tthis.collections = {};\n\tthis.models = {};\n\tthis.data = {};\n\n\t// populate View instance with fields from options\n\t_.extend(this, _.pick(options, viewOptions));\n\t// save original options, it is sometimes usefull\n\tthis.options = options;\n\n\tif (this.template && !_.isFunction(this.template)) {\n\t\tthrow new Error('View `template` option should be a function');\n\t}\n\n\t// create special hash object for all events for fast search\n\tthis._prepareEvents();\n\n\t// normalize nested views hash\n\tthis._prepareViews();\n\n\t// apply default backbone.View constructor\n\tbackbone.View.apply(this, arguments);\n\n\t// set waiting state for current view if some nested view is in waiting state\n\t_(this.views).each(function(views) {\n\t\t_(views).each(function(view) {\n\t\t\tif (view.isWaiting()) {\n\t\t\t\tself.listenToOnce(view, 'resolve', self.wait());\n\t\t\t}\n\t\t});\n\t});\n\n\t// disable .wait(), it available only in the constructor/initialize\n\tthis.waitAvailable = false;\n\n\t// we should delegate events after parent constructor call because\n\t// collections and models could be created in the initialize method\n\n\t// delegate events for each collection\n\t_(this.collections).each(function(collection, key) {\n\t\tself.delegateNestedEvents('collections', key, collection);\n\t});\n\n\t// delegate events for each model\n\t_(this.models).each(function(model, key) {\n\t\tself.delegateNestedEvents('models', key, model);\n\t});\n};\n\n/**\n * Update view data\n * Method is used to update view state, could be overriden to modify nested\n * views state\n *\n * @param {Object} [data] - new data object\n * @return {Esencia.View} - view instance for chaining\n */\n\nView.setData = function(data) {\n\tif (data) this.data = data;\n\treturn this;\n};\n\n/**\n * Check that view is changed and should be re-rendered\n * Method returns true by default (always unchanged), could be overriden\n * for specific logic\n *\n * @return {Boolean}\n */\n\nView.isUnchanged = function() {\n\treturn true;\n};\n\n/**\n * Switch view to the waiting state\n *\n * @return {Function} - callback function, should be called to resolve view\n */\n\nView.wait = function() {\n\tif (!this.waitAvailable) {\n\t\tthrow new Error('Method .wait() is available only in the constructor');\n\t}\n\n\tvar self = this;\n\n\tthis.waitsCounter++;\n\n\t// TODO: think about promises\n\treturn _.once(function() {\n\t\t_.defer(function() {\n\t\t\tself.waitsCounter--;\n\t\t\tif (!self.isWaiting()) {\n\t\t\t\tself.trigger('resolve');\n\t\t\t}\n\t\t});\n\t});\n};\n\n/**\n * @return {Boolean}\n */\n\nView.isWaiting = function() {\n\treturn this.waitsCounter > 0;\n};\n\n/**\n * Render view\n *\n * @override render\n * @param {Object} options\n * @param {Boolean} options.force\n * @return {Esencia.View} - view instance for chaining\n */\n\nView._render = function(options) {\n\t// stop rendering if view in `waiting` state, resolve it first\n\tif (this.isWaiting()) return this;\n\n\toptions = options || {};\n\n\tif (this.template) {\n\t\t// re-render template only if it exists and if it is necessary\n\t\tif (options.force || !this.attached || !this.isUnchanged()) {\n\t\t\t// detach view from DOM element\n\t\t\tthis.detach();\n\n\t\t\t// render template with data\n\t\t\tvar html = this.renderTemplate(this.template, this.getTemplateData());\n\n\t\t\t// render html with jqeury (or other lib) call\n\t\t\tvar $el = $(html);\n\n\t\t\tif (!$el.length) {\n\t\t\t\tthrow new Error('View template produces empty html');\n\t\t\t}\n\n\t\t\tif ($el.length > 1) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t'View template produces html with more than one root elements'\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tthis.setElement($el);\n\t\t}\n\t} else {\n\t\t// re-ensure element if it is not ensured\n\t\tif (!this.$el.length) this._ensureElement();\n\t}\n\n\t// render nested views\n\tthis.renderViews(options);\n\n\tif (!this.parent || this.$container) {\n\t\t// attach all nested views first\n\t\tthis.attachViews(options);\n\n\t\t// attach current view\n\t\tthis.attach();\n\t}\n\n\t// return this for chaining\n\treturn this;\n};\n\n/**\n * Render view by calling private _render method\n *\n * @override render\n * @return {Esencia.View} - view instance for chaining\n */\n\nView.render = function(options) {\n\treturn this._render(options);\n};\n\n/*\n * Get data for template rendering\n * Returns data by default, could be overriden\n *\n * @return {Object}\n */\n\nView.getTemplateData = function() {\n\treturn this.data;\n};\n\n/*\n * Render template with data. Returns html.\n *\n * @param {Function} template - template function for rendering\n * @param {Object} data - data for rendering\n * @return {String} - rendered html\n */\n\nView.renderTemplate = function(template, data) {\n\tdata = _(this).chain().result('templateHelpers').extend(data).value();\n\n\t// get html\n\treturn template(data);\n};\n\n/*\n * Render all nested view\n *\n * @param {Object} options\n * @param {Boolean} options.force\n * @return {Esencia.View} - view instance for chaining\n*/\n\nView.renderViews = function(options) {\n\tvar self = this;\n\n\t// iterate by each views group\n\t_(this.views).each(function(viewsGroup, container) {\n\t\tif (isContainerSkipped(container, options)) return;\n\n\t\t// return if view group is empty\n\t\tif (!viewsGroup.length) return;\n\n\t\t// call render for each views from view group\n\t\t_(viewsGroup).each(function(view) {\n\t\t\tview.render(_(options).omit('include', 'exclude'));\n\t\t});\n\n\t\t// get first container or $el\n\t\tvar $container = container ? self.$(container).first() : self.$el;\n\n\t\tif (!$container.length) {\n\t\t\tthrow new Error('Container \"' + container + '\" is not found');\n\t\t}\n\n\t\tvar containerEl = $container.get(0);\n\n\t\t// dom is changed if some view from group is not in current container\n\t\tvar domChanged = _(viewsGroup).some(function(view) {\n\t\t\treturn (\n\t\t\t\t!view.attached ||\n\t\t\t\t!view.$container ||\n\t\t\t\tview.$container.get(0) !== containerEl\n\t\t\t);\n\t\t});\n\n\t\tif (domChanged) {\n\t\t\t// re-append views group to container\n\t\t\tvar $els = [];\n\n\t\t\t_(viewsGroup).each(function(view) {\n\t\t\t\tview.$container = $container;\n\t\t\t\t$els.push(view.$el);\n\t\t\t});\n\n\t\t\t// TODO: add some rendering optimizations here\n\n\t\t\t// put all views to $container\n\t\t\t$container.append($els);\n\t\t}\n\t});\n\n\t// return this for chaining\n\treturn this;\n};\n\n/*\n * Set view to views group or replace some view in specified position\n * If index is passed it replace only one view with index in views group\n *\n * @param {Esencia.View} view - view to set\n * @param {String} container - container to set\n * @param {Number} [index] - index of view to replace\n * @return {Esencia.View} - view instance for chaining\n */\n\nView.setView = function(view, container, index) {\n\treturn this._updateViews([view], container, index);\n};\n\n/*\n * Set views to views group or replace some view in specified position\n * If index is passed it replace only one view with index in views group\n *\n * @param {Esencia.View[]} views - views to set\n * @param {String} container - container to set\n * @param {Number} [index] - index of view to replace\n * @return {Esencia.View} - view instance for chaining\n */\n\nView.setViews = function(views, container, index) {\n\treturn this._updateViews(views, container, index);\n};\n\n/*\n * Append view to end of views group\n * This method is alias for insertView without index argument\n *\n * @param {Esencia.View} view - view to append\n * @param {String} container - container of views group\n * @return {Esencia.View} - view instance for chaining\n */\n\nView.appendView = function(view, container) {\n\treturn this._insertViews([view], container);\n};\n\n/*\n * Append views to end of views group\n * This method is alias for insertViews without index argument\n *\n * @param {Esencia.View[]} views - views to append\n * @param {String} container - container of views group\n * @return {Esencia.View} - view instance for chaining\n */\n\nView.appendViews = function(views, container) {\n\treturn this._insertViews(views, container);\n};\n\n/*\n * Prepend view to start of views group\n * This method is alias for insertView with `0` as index argument value\n *\n * @param {Esencia.View} view - view to prepend\n * @param {String} container - container of views group\n * @return {Esencia.View} - view instance for chaining\n */\n\nView.prependView = function(view, container) {\n\treturn this._insertViews([view], container, 0);\n};\n\n/*\n * Prepend views to start of views group\n * This method is alias for insertViews with `0` as index argument value\n *\n * @param {Esencia.View[]} views - view to prepend\n * @param {String} container - container of views group\n  * @return {Esencia.View} - view instance for chaining\n */\n\nView.prependViews = function(views, container) {\n\treturn this._insertViews(views, container, 0);\n};\n\n/*\n * Insert view to specified position of views group in the container\n * If index is not passed method inserts view to the end of views group (append)\n *\n * @param {Esencia.View} view - view to insert\n * @param {String} container - container of views group\n * @param {Number} [index] - position in views group\n * @return {Esencia.View} - view instance for chaining\n */\n\nView.insertView = function(view, container, index) {\n\treturn this._insertViews([view], container, index);\n};\n\n/*\n * Insert views to specified position of views group container\n * If index is not passed method inserts views to the end of views group\n *\n * @param {Esencia.View[]} views - views to insert\n * @param {String} container - container of views group\n * @param {Number} [index] - position in views group\n * @return {Esencia.View} - view instance for chaining\n */\n\nView.insertViews = function(views, container, index) {\n\treturn this._insertViews(views, container, index);\n};\n\n/*\n * Remove view from views group container by index or view instance\n * If index is passed it remove view in the index position\n *\n * @param {Esencia.View} [view] - view to remove\n * @param {String} container - container of views group\n * @param {Number} [index] - index of view in views group\n * @return {Esencia.View} - view instance for chaining\n */\n\nView.removeView = function(view, container, index) {\n\tif (arguments.length < 2) {\n\t\tthrow new Error('\"view\" or \"index\" arguments must be specified');\n\t}\n\n\tif (_.isString(view)) {\n\t\tindex = container;\n\t\tcontainer = view;\n\t\tview = this.getView(container, index);\n\t\tif (!view) return this;\n\t}\n\n\treturn this._removeViews([view], container);\n};\n\n/*\n * Remove views from views group container\n * If views are passed remove only these views\n * Othervise remove all views from container\n *\n * @param {Esencia.View[]} [views] - views to remove\n * @param {String} container - container of views group\n * @return {Esencia.View} - view instance for chaining\n */\n\nView.removeViews = function(views, container) {\n\tif (_.isString(views)) {\n\t\tcontainer = views;\n\t\tviews = this.getViews(container);\n\t}\n\n\treturn this._removeViews(views, container);\n};\n\n/*\n * Get single view from container by index\n *\n * @param {String} container - container of views group\n * @param {Number} [index] - index of view in views group\n * @return {Esencia.View}\n */\n\nView.getView = function(container, index) {\n\treturn this.getViews(container)[index || 0] || null;\n};\n\n/*\n * Get views group from container\n *\n * @param {String} container - container of views group\n * @return {Esencia.View[]}\n */\n\nView.getViews = function(container) {\n\treturn _.clone(this.views[container]) || [];\n};\n\nView._insertViews = function(views, container, index) {\n\tvar self = this;\n\n\tvar viewsGroup = this.getViews(container);\n\n\t_(views).each(function(view) {\n\t\tif (view.parent) {\n\t\t\tview.parent.removeView(view, view.container);\n\t\t}\n\t});\n\n\tif (viewsGroup.length) {\n\t\t// if index is not specified set it value as last index of views group\n\t\tif (typeof index === 'undefined') {\n\t\t\tindex = viewsGroup.length;\n\t\t}\n\n\t\t// insert views\n\t\tsplice.apply(this.views[container], [index, 0].concat(views));\n\t} else {\n\t\t// if group is empty - set views as whole views group value\n\t\tthis.views[container] = views;\n\t}\n\n\t// set each view parent to current\n\t_(views).each(function(view) {\n\t\tview.parent = self;\n\t\tview.container = container;\n\t});\n\n\tthis.delegateNestedEvents('views', container, views);\n\n\treturn this;\n};\n\nView._updateViews = function(views, container, index) {\n\tvar oldViews;\n\n\tif (typeof index === 'undefined') {\n\t\t// if no index - get all views from group as old\n\t\toldViews = this.getViews(container);\n\t} else {\n\t\t// if index is specified get view from specific position as old\n\t\toldViews = this.getView(container, index);\n\t\toldViews = oldViews ? [oldViews] : [];\n\t}\n\n\t// exit if views equal oldViews\n\tif (\n\t\toldViews.length === views.length &&\n\t\t_(oldViews).all(function(oldView, index) {\n\t\t\treturn oldView === views[index];\n\t\t})\n\t) return this;\n\n\tif (oldViews.length) {\n\t\t// if old views array is not empty remove them from parent view\n\t\tthis._removeViews(oldViews, container);\n\n\t\t// and remove views from DOM\n\t\t_(oldViews).each(function(view) {\n\t\t\tview.remove();\n\t\t});\n\t}\n\n\t// insert new views\n\treturn this._insertViews(views, container, index);\n};\n\nView._removeViews = function(views, container) {\n\tvar self = this;\n\n\tvar viewsGroup = this.getViews(container);\n\n\tif (!viewsGroup.length) return this;\n\n\tvar viewObjs = _(views)\n\t\t.chain()\n\t\t.uniq()\n\t\t.map(function(view) {\n\t\t\treturn {\n\t\t\t\tview: view,\n\t\t\t\tindex: _.indexOf(viewsGroup, view)\n\t\t\t};\n\t\t})\n\t\t.filter(function(viewObj) {\n\t\t\treturn viewObj.index >= 0;\n\t\t})\n\t\t.sortBy(function(viewObj) {\n\t\t\treturn -viewObj.index;\n\t\t})\n\t\t.value();\n\n\tif (!viewObjs.length) return this;\n\n\t_(viewObjs).each(function(viewObj) {\n\t\tvar view = viewObj.view;\n\n\t\t// remove item from group\n\t\tsplice.call(self.views[container], viewObj.index, 1);\n\n\t\t// undelegate all nested entity events\n\t\tself.undelegateNestedEvents(view);\n\n\t\t// unset view parent\n\t\tdelete view.parent;\n\t});\n\n\treturn this;\n};\n\n/*\n * Original setElement do undelegateEvents/delegateEvents, we remove it\n * because we have special detach/attach methods for this purpose\n *\n * @override setElement\n * @return {Esencia.View} - view instance for chaining\n */\n\nView.setElement = function(element) {\n\tvar $previousEl = this.$el;\n\n\tthis._setElement(element);\n\n\t// insert html to $el\n\tif ($previousEl && this.$container) {\n\t\t$previousEl.replaceWith(this.$el);\n\t}\n\n\treturn this;\n};\n\n/*\n * @override delegateEvents\n */\n\nView.delegateEvents = function(events) {\n\tevents = events || _.result(this, 'events');\n\tif (!events) return this;\n\tevents = _(events).omit(nestedEventTypes);\n\treturn backbone.View.prototype.delegateEvents.call(this, events);\n};\n\nView.delegateNestedEvents = function(type, key, entities) {\n\tvar self = this;\n\tif (!_.isArray(entities)) entities = [entities];\n\tvar listeners = this._nestedEventsHash[type][key];\n\tif (listeners) {\n\t\t_(listeners).each(function(listener) {\n\t\t\t_(entities).each(function(entity) {\n\t\t\t\tself.listenTo(entity, listener.eventName, listener.handler);\n\t\t\t});\n\t\t});\n\t}\n\treturn this;\n};\n\nView.undelegateNestedEvents = function(entities) {\n\tvar self = this;\n\tif (!_.isArray(entities)) entities = [entities];\n\t_(entities).each(function(entity) {\n\t\tself.stopListening(entity);\n\t});\n\treturn this;\n};\n\nView._prepareEvents = function(events) {\n\tvar self = this;\n\n\t// Hash for nested views events fast search\n\tthis._nestedEventsHash = {};\n\t_(nestedEventTypes).each(function(type) {\n\t\tself._nestedEventsHash[type] = {};\n\t});\n\n\tevents = events || _.result(this, 'events');\n\tif (!events) return;\n\n\t// bind all prefixed events to view then call native delegate events\n\t_(nestedEventTypes).each(function(type) {\n\t\tvar typeEventsHash = self._nestedEventsHash[type];\n\n\t\tif (!_(events).has(type) || !_.isObject(events[type])) return;\n\n\t\t_(events[type]).each(function(method, key) {\n\t\t\tif (!_.isFunction(method)) method = self[method];\n\t\t\tif (!method) return;\n\t\t\tvar match = key.match(delegateEventSplitter);\n\t\t\tvar eventName = match[1];\n\t\t\tvar entityKeys = match[2].replace(/ *, */g, ',').split(',');\n\t\t\tmethod = _.bind(method, self);\n\n\t\t\t// fill _nestedEventsHash\n\t\t\t_(entityKeys).each(function(entityKey) {\n\t\t\t\ttypeEventsHash[entityKey] = typeEventsHash[entityKey] || [];\n\t\t\t\ttypeEventsHash[entityKey].push({\n\t\t\t\t\teventName: eventName,\n\t\t\t\t\thandler: method\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t});\n};\n\n/*\n * Wrap all non-array view groups to arrays with one element and delegate events\n */\n\nView._prepareViews = function() {\n\tvar self = this;\n\n\t_(this.views).each(function(views, container) {\n\t\tif (!_.isArray(views)) views = [views];\n\t\tself.views[container] = views;\n\t\tself.delegateNestedEvents('views', container, views);\n\t});\n};\n\n/**\n * Attach all nested views\n *\n * @return {Esencia.View} - view instance for chaining\n */\n\nView.attachViews = function(options) {\n\toptions = options || {};\n\n\t// iterate by each nested views groups\n\t_(this.views).each(function(viewsGroup, container) {\n\t\tif (isContainerSkipped(container, options)) return;\n\n\t\t// return if views group is empty\n\t\tif (!viewsGroup.length) return;\n\n\t\t// call attach method for each nested view from views group\n\t\t_(viewsGroup).each(function(view) {\n\t\t\t// recursive attach all nested views\n\t\t\tview.attachViews(_(options).omit('include', 'exclude'));\n\n\t\t\t// attach current view\n\t\t\tview.attach();\n\t\t});\n\t});\n\n\t// return this for chaining\n\treturn this;\n};\n\n/*\n * afterAttach is empty by default\n * It called after attach call, could be verriden to add some specific logic\n * for DOM manipulations\n *\n * @return {Esencia.View} - view instance for chaining\n */\n\nView.afterAttach = function() {\n\treturn this;\n};\n\n/*\n * Attach new view to current view $el\n *\n * @return {Esencia.View} - view instance for chaining\n */\n\nView.attach = function() {\n\t// return if current view is already attached\n\tif (this.attached) return this;\n\n\t// detach previous view\n\tvar previousView = this.$el.data('esencia-view');\n\tif (previousView) previousView.detach();\n\n\t// attach current view and set attr\n\tthis.$el.data('esencia-view', this).attr('esencia-view', this.cid);\n\n\t// enable all DOM events\n\tthis.delegateEvents();\n\n\tthis.attached = true;\n\n\t// do some user afterAttach actions\n\tthis.afterAttach();\n\n\t// trigger attach event\n\tthis.trigger('attach');\n\n\treturn this;\n};\n\n/**\n * Detach all nested views\n *\n * @return {Esencia.View} - view instance for chaining\n */\n\nView.detachViews = function() {\n\t// iterate by each views groups\n\t_(this.views).each(function(viewsGroup) {\n\t\t// return if views group is empty\n\t\tif (!viewsGroup.length) return;\n\n\t\t// call detach method for each nested view from views group\n\t\t_(viewsGroup).each(function(view) {\n\t\t\t// recursive detach all nested views\n\t\t\tview.detachViews();\n\n\t\t\t// detach current view\n\t\t\tview.detach();\n\t\t});\n\t});\n\n\t// return this for chaining\n\treturn this;\n};\n\n/*\n * beforeDetach is empty by default\n * It called before detach method call, could be overriden to add some specific\n * logic before view detach from dom\n *\n * @return {Esencia.View} - view instance for chaining\n */\n\nView.beforeDetach = function() {\n\treturn this;\n};\n\n/*\n * Detach view from current view $el\n *\n * @return {Esencia.View} - view instance for chaining\n */\n\nView.detach = function() {\n\t// return if current view is not already attached\n\tif (!this.attached) return this;\n\n\t// trigger detach event\n\tthis.trigger('detach');\n\n\t// do some user beforeDetach actions\n\tthis.beforeDetach();\n\n\t// remove attr and data from $el\n\tthis.$el.removeData('esencia-view').removeAttr('esencia-view');\n\n\t// disable all DOM events\n\tthis.undelegateEvents();\n\n\tthis.attached = false;\n\n\t// return this for chaining\n\treturn this;\n};\n\n/**\n * Remove view from parent container and remove element from DOM\n */\n\nView.remove = function() {\n\t// remove current view from parent view container\n\tif (this.parent) {\n\t\tthis.parent.removeView(this, this.container);\n\t}\n\n\t// detach all nested views first\n\tthis.detachViews();\n\n\t// detach current view\n\tthis.detach();\n\n\t// remove DOM element\n\treturn backbone.View.prototype.remove.call(this);\n};\n\n/*\n * Get view, that attached to closest element with attr `esencia-view`\n *\n * @param {String | $} selector\n * @return {Esencia.View | Null}\n */\n\nView.getClosestView = function(selector) {\n\tvar $selector = $(selector);\n\n\tif (!$selector.is('[esencia-view]')) {\n\t\t$selector = $selector.closest('[esencia-view]');\n\t}\n\n\treturn $selector.length ? $selector.data('esencia-view') : null;\n};\n\nmodule.exports = backbone.View.extend(View);\n"],"sourceRoot":"."}