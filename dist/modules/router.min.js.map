{"version":3,"sources":["router.js","lib/router.js","lib/view.js"],"names":["factory","define","amd","exports","module","require","this","Esencia","Router","_","Backbone","__external__","__external_Backbone","_require","id","cache","modules","call","backbone","View","root","rootViewEl","modulesPath","defaultModuleName","pushState","namedParameters","autoloadModules","debug","config","onModuleError","nowhereUrl","routerOptions","constructor","options","extend","pick","components","componentsTree","urlParams","history","apply","arguments","route","params","setModule","_initRootComponent","RootView","el","component","name","parent","_populateUrlParams","componentName","key","has","result","componentOptions","router","defaults","defaultUrlParams","viewOptions","process","isUndefined","uniqueId","isString","Error","isNull","url","_processComponent","_calculateComponentsTree","child","node","_isComponentTreeNodeChanged","oldNode","view","isAttached","isUnchanged","_applyComponentsTree","callback","self","parentNode","iterateNode","childNode","onViewResolve","setData","container","setView","renderViews","render","chain","value","isWaiting","once","oldChildNodeContainer","oldChildNode","removeView","noop","newComponentsTree","isFunction","prototype","args","_defaultMiddleware","navigate","fragment","indexOf","substring","length","force","replace","trigger","omit","qs","each","val","undefined","toFragment","next","middleware","defaultMiddleware","moduleName","split","find","identity","moduleInit","start","$","splice","Array","delegateEventSplitter","nestedEventTypes","templateHelpers","wait","_waiting","views","data","template","_normalizeViews","_prepareNestedEvents","collections","collection","delegateNestedEvents","models","model","_createTemplateElement","_isAfterAttachNeeded","attach","$el","_afterAttachViews","getTemplateData","renderTemplate","templateData","html","$html","$newEl","first","replaceWith","setElement","viewsGroup","$container","some","is","append","pluck","setViews","index","_updateViews","replaceView","replaceViews","appendView","appendViews","insertViews","prependView","prependViews","insertView","removeViews","getView","getViews","clone","method","isArray","removedViews","remove","concat","viewObjs","uniq","map","filter","viewObj","sortBy","undelegateNestedEvents","delegateEvents","events","type","entities","listeners","_nestedEventsHash","listener","entity","listenTo","eventName","handler","stopListening","typeEventsHash","isObject","match","entityKeys","bind","entityKey","push","Boolean","afterAttach","previousView","detach","attr","cid","_detachViews","beforeDetach","removeData","removeAttr","undelegateEvents","_removeElement","getClosestView","selector","$selector","closest"],"mappings":"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","file":"router.min.js","sourcesContent":["(function (factory) {\n    if (typeof define === 'function' && define.amd) {\n        define([\n            'underscore',\n            'backbone'\n        ], factory);\n    } else if (typeof exports === 'object') {\n        module.exports = factory(require('underscore'), require('backbone'));\n    } else {\n        this.Esencia.Router = factory(_, Backbone);\n    }\n}(function (__external__, __external_Backbone) {\n    var global = this, define;\n    function _require(id) {\n        var module = _require.cache[id];\n        if (!module) {\n            var exports = {};\n            module = _require.cache[id] = {\n                id: id,\n                exports: exports\n            };\n            _require.modules[id].call(exports, module, exports);\n        }\n        return module.exports;\n    }\n    _require.cache = [];\n    _require.modules = [\n        function (module, exports) {\n            'use strict';\n            var _ = _require(3);\n            var backbone = _require(2);\n            var View = _require(1);\n            var Router = {\n                    root: '/',\n                    rootViewEl: 'html',\n                    modulesPath: 'modules/',\n                    defaultModuleName: 'main',\n                    pushState: false,\n                    namedParameters: false,\n                    autoloadModules: true,\n                    debug: false,\n                    config: {},\n                    onModuleError: function () {\n                    },\n                    nowhereUrl: '___'\n                };\n            var routerOptions = [\n                    'root',\n                    'rootViewEl',\n                    'modulesPath',\n                    'defaultModuleName',\n                    'pushState',\n                    'namedParameters',\n                    'autoloadModules',\n                    'debug',\n                    'config',\n                    'onModuleError',\n                    'nowhereUrl'\n                ];\n            Router.constructor = function (options) {\n                options = options || {};\n                _.extend(this, _.pick(options, routerOptions));\n                this.options = options;\n                this.components = {};\n                this.componentsTree = null;\n                this.urlParams = {};\n                this.modules = {};\n                this.history = backbone.history;\n                backbone.Router.namedParameters = this.namedParameters;\n                backbone.Router.apply(this, arguments);\n                if (options.autoloadModules) {\n                    this.route('*url', function (params) {\n                        this.setModule(params);\n                    });\n                }\n            };\n            Router._initRootComponent = function () {\n                var RootView = View.extend({ el: this.rootViewEl });\n                this.component({\n                    name: '',\n                    parent: null,\n                    View: RootView\n                });\n            };\n            Router._populateUrlParams = function (componentName, params) {\n                var urlParams = this.urlParams;\n                var key;\n                for (key in urlParams) {\n                    if (_(urlParams).has(key)) {\n                        delete urlParams[key];\n                    }\n                }\n                var component = this.components[componentName];\n                return _(urlParams).extend(_(component).result('defaultUrlParams'), params);\n            };\n            var componentOptions = [\n                    'url',\n                    'name',\n                    'parent',\n                    'container',\n                    'View',\n                    'models',\n                    'collections',\n                    'viewOptions',\n                    'defaultUrlParams'\n                ];\n            Router.component = function (options) {\n                var router = this;\n                options = _({}).defaults(options, {\n                    parent: '',\n                    defaultUrlParams: {},\n                    viewOptions: {},\n                    process: false\n                });\n                var component = _(options).pick(componentOptions);\n                if (_.isUndefined(component.name)) {\n                    component.name = _.uniqueId('auto-named-component');\n                }\n                if (!_.isString(component.name)) {\n                    throw new Error('Component `name` option should be a string');\n                }\n                if (component.name in this.components) {\n                    throw new Error('Duplicate component with name \"' + component.name + '\"');\n                }\n                if (!component.View) {\n                    throw new Error('Component `View` option is required');\n                }\n                if (!_.isString(component.parent) && !_.isNull(component.parent)) {\n                    throw new Error('Component `parent` option should be a string or null');\n                }\n                this.components[component.name] = component;\n                if (!_.isUndefined(component.url)) {\n                    this.route(component.url, component.name, function (params) {\n                        router._populateUrlParams(component.name, params);\n                        router._processComponent(component.name);\n                    });\n                }\n                if (options.process) {\n                    this._processComponent(component.name);\n                }\n                return this;\n            };\n            Router._calculateComponentsTree = function (componentName, child) {\n                var component = this.components[componentName];\n                if (!component) {\n                    throw new Error('Unknown component with name \"' + componentName + '\"');\n                }\n                var node = { name: componentName };\n                if (child) {\n                    node.child = child;\n                }\n                if (_.isString(component.parent)) {\n                    return this._calculateComponentsTree(component.parent, node);\n                } else {\n                    return node;\n                }\n            };\n            Router._isComponentTreeNodeChanged = function (oldNode, node) {\n                if (!oldNode || oldNode.name !== node.name || !oldNode.view)\n                    return true;\n                var component = this.components[node.name];\n                if (oldNode.view instanceof component.View === false)\n                    return true;\n                if (!oldNode.view.isAttached())\n                    return true;\n                return !oldNode.view.isUnchanged();\n            };\n            Router._applyComponentsTree = function (params, callback) {\n                var self = this;\n                var parentNode = params.parentNode;\n                var iterateNode = function (oldNode, node) {\n                    var childNode = node.child;\n                    delete node.child;\n                    if (parentNode) {\n                        parentNode.child = node;\n                    } else {\n                        self.componentsTree = node;\n                    }\n                    if (childNode) {\n                        self._applyComponentsTree({\n                            parentNode: node,\n                            oldNode: oldNode && oldNode.child || null,\n                            node: childNode\n                        }, callback);\n                    } else {\n                        callback();\n                    }\n                };\n                var node = params.node;\n                var oldNode = params.oldNode;\n                var component = this.components[node.name];\n                var onViewResolve = function (view) {\n                    node.view = view;\n                    view.setData();\n                    if (component.container) {\n                        if (!parentNode) {\n                            throw new Error('Parent component should exist for component with ' + '`container` option');\n                        }\n                        parentNode.view.setView(view, component.container);\n                        parentNode.view.renderViews();\n                    } else {\n                        view.render();\n                    }\n                    iterateNode(null, node);\n                };\n                var view;\n                if (this._isComponentTreeNodeChanged(oldNode, node)) {\n                    view = new component.View(_(component).chain().pick('models', 'collections').defaults(_(component).result('viewOptions')).extend({ router: this }).value());\n                    if (view.isWaiting()) {\n                        view.once('resolve', function () {\n                            onViewResolve(view);\n                        });\n                    } else {\n                        onViewResolve(view);\n                    }\n                } else {\n                    view = oldNode.view;\n                    var oldChildNode = oldNode.child;\n                    var oldChildNodeContainer;\n                    if (oldChildNode && oldChildNode.view) {\n                        oldChildNodeContainer = oldChildNode.view.container;\n                        view.removeView(oldChildNode.view, oldChildNodeContainer);\n                    }\n                    node.view = view;\n                    view.setData();\n                    view.render();\n                    if (oldChildNode && oldChildNode.view) {\n                        view.setView(oldChildNode.view, oldChildNodeContainer);\n                    }\n                    iterateNode(oldNode, node);\n                }\n            };\n            Router._processComponent = function (componentName, callback) {\n                callback = callback || _.noop;\n                var newComponentsTree = this._calculateComponentsTree(componentName);\n                this._applyComponentsTree({\n                    parentNode: null,\n                    oldNode: this.componentsTree,\n                    node: newComponentsTree\n                }, callback);\n            };\n            Router.route = function (url, name, callback) {\n                var router = this;\n                if (_.isFunction(name)) {\n                    callback = name;\n                    name = '';\n                }\n                backbone.Router.prototype.route.call(this, url, name, function () {\n                    var args = arguments;\n                    router._defaultMiddleware({\n                        url: url,\n                        name: name,\n                        callback: callback\n                    }, function () {\n                        callback.apply(router, args);\n                    });\n                });\n            };\n            Router.navigate = function (fragment, options) {\n                options = options || {};\n                if (fragment.indexOf(this.root) === 0) {\n                    fragment = fragment.substring(this.root.length);\n                }\n                if (options.force) {\n                    this.navigate(this.nowhereUrl, {\n                        replace: options.replace,\n                        trigger: false\n                    });\n                    options = _(options).chain().omit('force').extend({ replace: true }).value();\n                    return this.navigate(fragment, options);\n                }\n                options = _(options || {}).defaults({\n                    trigger: true,\n                    params: {}\n                });\n                var qs = options.qs;\n                if (qs) {\n                    _(qs).each(function (val, key, qs) {\n                        if (val === undefined || val === null)\n                            delete qs[key];\n                    });\n                    fragment = this.toFragment(fragment, qs);\n                    delete options.qs;\n                }\n                backbone.Router.prototype.navigate.call(this, fragment, options);\n            };\n            Router._defaultMiddleware = function (route, next) {\n                next();\n            };\n            Router.middleware = function (middleware) {\n                var router = this;\n                var defaultMiddleware = this._defaultMiddleware;\n                this._defaultMiddleware = function (route, next) {\n                    defaultMiddleware.call(router, route, function () {\n                        middleware.call(router, route, next);\n                    });\n                };\n                return this;\n            };\n            Router.setModule = function (params) {\n                var router = this;\n                var url = params.url;\n                delete params.url;\n                var moduleName = _(url.split('/')).find(_.identity) || this.defaultModuleName;\n                require([this.modulesPath + moduleName], function (moduleInit) {\n                    if (!router.modules[moduleName]) {\n                        moduleInit(router);\n                        router.modules[moduleName] = true;\n                        router.navigate(url, {\n                            replace: true,\n                            force: true,\n                            qs: params\n                        });\n                    }\n                }, this.onModuleError);\n            };\n            Router.start = function () {\n                this._initRootComponent();\n                backbone.history.start({\n                    pushState: this.pushState,\n                    root: this.root\n                });\n            };\n            module.exports = backbone.Router.extend(Router);\n        },\n        function (module, exports) {\n            'use strict';\n            var _ = _require(3);\n            var backbone = _require(2);\n            var $ = backbone.$;\n            var splice = Array.prototype.splice;\n            var delegateEventSplitter = /^(\\S+)\\s*(.*)$/;\n            var nestedEventTypes = [\n                    'views',\n                    'collections',\n                    'models'\n                ];\n            var View = { templateHelpers: {} };\n            var viewOptions = [\n                    'models',\n                    'collections',\n                    'views',\n                    'events',\n                    'data',\n                    'router',\n                    'templateHelpers'\n                ];\n            View.wait = function () {\n                var self = this;\n                this._waiting = true;\n                return function () {\n                    self._waiting = false;\n                    self.trigger('resolve');\n                };\n            };\n            View.isWaiting = function () {\n                return this._waiting;\n            };\n            View.constructor = function (options) {\n                var self = this;\n                options = options || {};\n                this.views = {};\n                this.data = this.data || {};\n                _.extend(this, _.pick(options, viewOptions));\n                this.options = options;\n                if (this.template && !_.isFunction(this.template)) {\n                    throw new Error('View `template` option should be a function');\n                }\n                this._normalizeViews();\n                this._prepareNestedEvents();\n                this._waiting = false;\n                backbone.View.apply(this, arguments);\n                if (this.collections) {\n                    _(this.collections).each(function (collection, key) {\n                        self.delegateNestedEvents('collections', key, collection);\n                    });\n                }\n                if (this.models) {\n                    _(this.models).each(function (model, key) {\n                        self.delegateNestedEvents('models', key, model);\n                    });\n                }\n            };\n            View.setData = function (data) {\n                if (data)\n                    this.data = data;\n            };\n            View.isUnchanged = function () {\n                return true;\n            };\n            View.render = function (options) {\n                if (this.isWaiting())\n                    return this;\n                options = options || {};\n                if (this.template && (options.force || !this.isAttached() || !this.isUnchanged())) {\n                    this._createTemplateElement();\n                    this._isAfterAttachNeeded = true;\n                }\n                this.attach();\n                this.renderViews(options);\n                if (this.$el.parent().length) {\n                    this._afterAttachViews();\n                }\n                return this;\n            };\n            View.getTemplateData = function () {\n                return this.data;\n            };\n            View.renderTemplate = function (template, data) {\n                data = _(this).chain().result('templateHelpers').extend(data).value();\n                return template(data);\n            };\n            View._createTemplateElement = function () {\n                var templateData = this.getTemplateData();\n                var html = this.renderTemplate(this.template, templateData);\n                var $html = $(html);\n                if ($html.length > 1) {\n                }\n                var $newEl = $html.first();\n                if (this.$el.parent().length) {\n                    this.$el.replaceWith($newEl);\n                }\n                this.setElement($newEl, true);\n                return this;\n            };\n            View.renderViews = function (options) {\n                var self = this;\n                _(this.views).each(function (viewsGroup, container) {\n                    if (!viewsGroup.length)\n                        return;\n                    _(viewsGroup).each(function (view) {\n                        view.render(options);\n                    });\n                    var $container = container ? self.$(container).first() : self.$el;\n                    if (!$container.length) {\n                        throw new Error('Container \"' + container + '\" is not found');\n                    }\n                    if (_(viewsGroup).some(function (view) {\n                            return !view.isAttached() || !$container.is(view.$el.parent());\n                        })) {\n                        $container.append(_(viewsGroup).pluck('$el'));\n                    }\n                });\n            };\n            View.setView = View.setViews = function (views, container, index) {\n                return this._updateViews('set', views, container, index);\n            };\n            View.replaceView = View.replaceViews = function (views, container, index) {\n                return this.setViews.apply(this, arguments);\n            };\n            View.appendView = View.appendViews = function (views, container) {\n                return this.insertViews(views, container);\n            };\n            View.prependView = View.prependViews = function (views, container) {\n                return this.insertViews(views, container, 0);\n            };\n            View.insertView = View.insertViews = function (views, container, index) {\n                return this._updateViews('insert', views, container, index);\n            };\n            View.removeView = View.removeViews = function (views, container, index) {\n                if (arguments.length < 2) {\n                    throw new Error('\"views\" or \"index\" arguments must be specified');\n                }\n                if (_.isString(views)) {\n                    index = container;\n                    container = views;\n                    views = this.getView(container, index);\n                    if (!views)\n                        return this;\n                }\n                return this._updateViews('remove', views, container);\n            };\n            View.getView = function (container, index) {\n                return this.getViews(container)[index || 0] || null;\n            };\n            View.getViews = function (container) {\n                return _.clone(this.views[container]) || [];\n            };\n            View._updateViews = function (method, views, container, index) {\n                var self = this;\n                if (!views) {\n                    throw new Error('\"views\" argument must be specified');\n                }\n                if (!_.isArray(views))\n                    views = [views];\n                var viewsGroup = this.getViews(container);\n                switch (method) {\n                case 'set':\n                    if (viewsGroup.length) {\n                        var removedViews = [];\n                        if (typeof index !== 'undefined') {\n                            removedViews = this.getView(container, index);\n                            removedViews = removedViews ? [removedViews] : [];\n                        } else {\n                            removedViews = viewsGroup;\n                        }\n                        if (removedViews.length) {\n                            this._updateViews('remove', removedViews, container);\n                            _(removedViews).each(function (view) {\n                                view.remove();\n                            });\n                        }\n                    }\n                    this._updateViews('insert', views, container, index);\n                    break;\n                case 'insert':\n                    _(views).each(function (view) {\n                        if (view.parent) {\n                            view.parent.removeView(view, view.container);\n                        }\n                    });\n                    if (viewsGroup.length) {\n                        if (typeof index === 'undefined') {\n                            index = viewsGroup.length;\n                        }\n                        splice.apply(this.views[container], [\n                            index,\n                            0\n                        ].concat(views));\n                    } else {\n                        this.views[container] = views;\n                    }\n                    _(views).each(function (view) {\n                        view.parent = self;\n                        view.container = container;\n                    });\n                    this.delegateNestedEvents('views', container, views);\n                    break;\n                case 'remove':\n                    if (!viewsGroup.length)\n                        break;\n                    var viewObjs = _.chain(views).uniq().map(function (view) {\n                            return {\n                                view: view,\n                                index: _.indexOf(viewsGroup, view)\n                            };\n                        }).filter(function (viewObj) {\n                            return viewObj.index >= 0;\n                        }).sortBy(function (viewObj) {\n                            return -viewObj.index;\n                        }).value();\n                    if (!viewObjs.length)\n                        break;\n                    _(viewObjs).each(function (viewObj) {\n                        var view = viewObj.view;\n                        splice.call(self.views[container], viewObj.index, 1);\n                        self.undelegateNestedEvents(view);\n                        delete view.parent;\n                    });\n                }\n                return this;\n            };\n            View.delegateEvents = function (events) {\n                events = events || _.result(this, 'events');\n                if (!events)\n                    return this;\n                events = _(events).omit(nestedEventTypes);\n                return backbone.View.prototype.delegateEvents.call(this, events);\n            };\n            View.delegateNestedEvents = function (type, key, entities) {\n                var self = this;\n                if (!_.isArray(entities))\n                    entities = [entities];\n                var listeners = this._nestedEventsHash[type][key];\n                if (listeners) {\n                    _(listeners).each(function (listener) {\n                        _(entities).each(function (entity) {\n                            self.listenTo(entity, listener.eventName, listener.handler);\n                        });\n                    });\n                }\n                return this;\n            };\n            View.undelegateNestedEvents = function (entities) {\n                var self = this;\n                if (!_.isArray(entities))\n                    entities = [entities];\n                _(entities).each(function (entity) {\n                    self.stopListening(entity);\n                });\n                return this;\n            };\n            View._prepareNestedEvents = function (events) {\n                var self = this;\n                this._nestedEventsHash = {};\n                _(nestedEventTypes).each(function (type) {\n                    self._nestedEventsHash[type] = {};\n                });\n                events = events || _.result(this, 'events');\n                if (!events)\n                    return;\n                _(nestedEventTypes).each(function (type) {\n                    var typeEventsHash = self._nestedEventsHash[type];\n                    if (!_(events).has(type) || !_.isObject(events[type]))\n                        return;\n                    _(events[type]).each(function (method, key) {\n                        if (!_.isFunction(method))\n                            method = self[method];\n                        if (!method)\n                            return;\n                        var match = key.match(delegateEventSplitter);\n                        var eventName = match[1];\n                        var entityKeys = match[2].replace(/ *, */g, ',').split(',');\n                        method = _.bind(method, self);\n                        _(entityKeys).each(function (entityKey) {\n                            typeEventsHash[entityKey] = typeEventsHash[entityKey] || [];\n                            typeEventsHash[entityKey].push({\n                                eventName: eventName,\n                                handler: method\n                            });\n                        });\n                    });\n                });\n            };\n            View._normalizeViews = function () {\n                var self = this;\n                _(this.views).each(function (views, container) {\n                    if (!_.isArray(views)) {\n                        self.views[container] = [views];\n                    }\n                });\n            };\n            View.isAttached = function () {\n                var view = this.$el.data('esencia-view');\n                return Boolean(view && view === this);\n            };\n            View._afterAttachViews = function () {\n                _(this.views).each(function (viewsGroup) {\n                    if (!viewsGroup.length)\n                        return;\n                    _(viewsGroup).each(function (view) {\n                        view._afterAttachViews();\n                    });\n                });\n                if (this._isAfterAttachNeeded) {\n                    delete this._isAfterAttachNeeded;\n                    this.afterAttach();\n                }\n            };\n            View.afterAttach = function () {\n                return this;\n            };\n            View.attach = function () {\n                if (this.isAttached())\n                    return this;\n                var previousView = this.$el.data('esencia-view');\n                if (previousView)\n                    previousView.detach();\n                this.$el.data('esencia-view', this).attr('esencia-view', this.cid);\n                return this;\n            };\n            View._detachViews = function () {\n                _(this.views).each(function (viewsGroup) {\n                    if (!viewsGroup.length)\n                        return;\n                    _(viewsGroup).each(function (view) {\n                        view.detach();\n                    });\n                });\n            };\n            View.beforeDetach = function () {\n                return this;\n            };\n            View.detach = function () {\n                if (!this.isAttached())\n                    return this;\n                this._detachViews();\n                this.beforeDetach();\n                this.$el.removeData('esencia-view').removeAttr('esencia-view');\n                this.undelegateEvents();\n                this.stopListening();\n                return this;\n            };\n            View.remove = function () {\n                if (this.parent) {\n                    this.parent.removeView(this, this.container);\n                }\n                this.detach();\n                this._removeElement();\n                return this;\n            };\n            View.getClosestView = function (selector) {\n                var $selector = $(selector);\n                if (!$selector.is('[esencia-view]')) {\n                    $selector = $selector.closest('[esencia-view]');\n                }\n                return $selector.length ? $selector.data('esencia-view') : null;\n            };\n            module.exports = backbone.View.extend(View);\n        },\n        function (module, exports) {\n            module.exports = __external_Backbone;\n        },\n        function (module, exports) {\n            module.exports = __external__;\n        }\n    ];\n    return _require(0);\n}));\n//# sourceMappingURL=router.js.map\n","'use strict';\n\nvar _ = require('underscore');\nvar backbone = require('backbone');\nvar View = require('./view');\n\n/**\n * Router extends default backbone Router\n */\n\nvar Router = {\n\troot: '/',\n\trootViewEl: 'html',\n\tmodulesPath: 'modules/',\n\tdefaultModuleName: 'main',\n\tpushState: false,\n\tnamedParameters: false,\n\tautoloadModules: true,\n\tdebug: false,\n\tconfig: {},\n\tonModuleError: function() {},\n\tnowhereUrl: '___'\n};\n\nvar routerOptions = [\n\t'root', 'rootViewEl', 'modulesPath', 'defaultModuleName', 'pushState',\n\t'namedParameters', 'autoloadModules', 'debug', 'config', 'onModuleError',\n\t'nowhereUrl'\n];\n\n/*\n * Override `constructor`\n * @param {Object} [options]\n */\n\nRouter.constructor = function(options) {\n\toptions = options || {};\n\n\t// populate Router instance with fields from options\n\t_.extend(this, _.pick(options, routerOptions));\n\n\t// save original options, it is sometimes usefull\n\tthis.options = options;\n\n\tthis.components = {};\n\tthis.componentsTree = null;\n\tthis.urlParams = {};\n\tthis.modules = {};\n\n\tthis.history = backbone.history;\n\n\t/*\n\t * All query parameters can be passed in a single hash using the key\n\t * referenced from the route definition (backbone queryparams will\n\t * do it for us)\n\t */\n\n\tbackbone.Router.namedParameters = this.namedParameters;\n\n\tbackbone.Router.apply(this, arguments);\n\n\tif (options.autoloadModules) {\n\t\tthis.route('*url', function(params) {\n\t\t\tthis.setModule(params);\n\t\t});\n\t}\n};\n\nRouter._initRootComponent = function() {\n\tvar RootView = View.extend({\n\t\tel: this.rootViewEl\n\t});\n\n\tthis.component({\n\t\tname: '',\n\t\tparent: null,\n\t\tView: RootView\n\t});\n};\n\nRouter._populateUrlParams = function(componentName, params) {\n\tvar urlParams = this.urlParams;\n\n\t// clean old values from urlParams object\n\tvar key;\n\tfor (key in urlParams) {\n\t\tif (_(urlParams).has(key)) {\n\t\t\tdelete urlParams[key];\n\t\t}\n\t}\n\n\tvar component = this.components[componentName];\n\n\t// populate urlParams with new params\n\treturn _(urlParams).extend(\n\t\t_(component).result('defaultUrlParams'),\n\t\tparams\n\t);\n};\n\n/*\n * Add component to router and bind it to url\n *\n * @param {Object} component\n */\n\n var componentOptions = [\n\t'url', 'name', 'parent', 'container', 'View', 'models', 'collections',\n\t'viewOptions', 'defaultUrlParams'\n];\n\nRouter.component = function(options) {\n\tvar router = this;\n\n\toptions = _({}).defaults(options, {\n\t\tparent: '',\n\t\tdefaultUrlParams: {},\n\t\tviewOptions: {},\n\t\tprocess: false\n\t});\n\n\tvar component = _(options).pick(componentOptions);\n\n\t// generate uniq component name if name is omitted\n\tif (_.isUndefined(component.name)) {\n\t\tcomponent.name = _.uniqueId('auto-named-component');\n\t}\n\n\tif (!_.isString(component.name)) {\n\t\tthrow new Error('Component `name` option should be a string');\n\t}\n\n\tif (component.name in this.components) {\n\t\tthrow new Error('Duplicate component with name \"' + component.name + '\"');\n\t}\n\n\tif (!component.View) {\n\t\tthrow new Error('Component `View` option is required');\n\t}\n\n\tif (!_.isString(component.parent) && !_.isNull(component.parent)) {\n\t\tthrow new Error('Component `parent` option should be a string or null');\n\t}\n\n\tthis.components[component.name] = component;\n\n\t// bind component to route\n\tif (!_.isUndefined(component.url)) {\n\t\tthis.route(component.url, component.name, function(params) {\n\t\t\trouter._populateUrlParams(component.name, params);\n\n\t\t\t// process components tree\n\t\t\trouter._processComponent(component.name);\n\t\t});\n\t}\n\n\t// process components tree in force mode\n\tif (options.process) {\n\t\tthis._processComponent(component.name);\n\t}\n\n\treturn this;\n};\n\nRouter._calculateComponentsTree = function(componentName, child) {\n\tvar component = this.components[componentName];\n\n\tif (!component) {\n\t\tthrow new Error('Unknown component with name \"' + componentName + '\"');\n\t}\n\n\tvar node = {name: componentName};\n\tif (child) {\n\t\tnode.child = child;\n\t}\n\n\tif (_.isString(component.parent)) {\n\t\treturn this._calculateComponentsTree(component.parent, node);\n\t} else {\n\t\treturn node;\n\t}\n};\n\nRouter._isComponentTreeNodeChanged = function(oldNode, node) {\n\tif (!oldNode || oldNode.name !== node.name || !oldNode.view) return true;\n\tvar component = this.components[node.name];\n\tif (oldNode.view instanceof component.View === false) return true;\n\tif (!oldNode.view.isAttached()) return true;\n\treturn !oldNode.view.isUnchanged();\n};\n\nRouter._applyComponentsTree = function(params, callback) {\n\tvar self = this;\n\n\tvar parentNode = params.parentNode;\n\n\tvar iterateNode = function(oldNode, node) {\n\t\t// omit child field in new node because it will set recursive\n\t\t// and should not exist if error case\n\t\tvar childNode = node.child;\n\t\tdelete node.child;\n\n\t\tif (parentNode) {\n\t\t\tparentNode.child = node;\n\t\t} else {\n\t\t\tself.componentsTree = node;\n\t\t}\n\n\t\tif (childNode) {\n\t\t\tself._applyComponentsTree({\n\t\t\t\tparentNode: node,\n\t\t\t\toldNode: oldNode && oldNode.child || null,\n\t\t\t\tnode: childNode\n\t\t\t}, callback);\n\t\t} else {\n\t\t\tcallback();\n\t\t}\n\t};\n\n\tvar node = params.node;\n\tvar oldNode = params.oldNode;\n\tvar component = this.components[node.name];\n\n\tvar onViewResolve = function(view) {\n\t\tnode.view = view;\n\t\tview.setData();\n\n\t\tif (component.container) {\n\t\t\tif (!parentNode) {\n\t\t\t\tthrow new Error('Parent component should exist for component with ' +\n\t\t\t\t\t'`container` option');\n\t\t\t}\n\n\t\t\tparentNode.view.setView(view, component.container);\n\t\t\tparentNode.view.renderViews();\n\t\t} else {\n\t\t\tview.render();\n\t\t}\n\n\t\t// stop processing old components tree\n\t\titerateNode(null, node);\n\t};\n\n\tvar view;\n\tif (this._isComponentTreeNodeChanged(oldNode, node)) {\n\t\t// @TODO: we need to clean previous view container here, because new view\n\t\t// may not replace it\n\n\t\t// create new view\n\t\tview = new (component.View)(\n\t\t\t_(component)\n\t\t\t\t.chain()\n\t\t\t\t.pick('models', 'collections')\n\t\t\t\t.defaults(_(component).result('viewOptions'))\n\t\t\t\t.extend({router: this})\n\t\t\t\t.value()\n\t\t);\n\n\t\tif (view.isWaiting()) {\n\t\t\t// wait when view will be resolved\n\t\t\tview.once('resolve', function() {\n\t\t\t\tonViewResolve(view);\n\t\t\t});\n\t\t} else {\n\t\t\tonViewResolve(view);\n\t\t}\n\t} else {\n\t\t// get view from old node because it is not changed\n\t\tview = oldNode.view;\n\n\t\tvar oldChildNode = oldNode.child;\n\n\t\t// temporary remove child node view\n\t\tvar oldChildNodeContainer;\n\t\tif (oldChildNode && oldChildNode.view) {\n\t\t\toldChildNodeContainer = oldChildNode.view.container;\n\t\t\tview.removeView(oldChildNode.view, oldChildNodeContainer);\n\t\t}\n\n\t\tnode.view = view;\n\t\tview.setData();\n\t\tview.render();\n\n\t\t// revert child node view\n\t\tif (oldChildNode && oldChildNode.view) {\n\t\t\tview.setView(oldChildNode.view, oldChildNodeContainer);\n\t\t}\n\n\t\t// proprocessing old components tree\n\t\titerateNode(oldNode, node);\n\t}\n};\n\nRouter._processComponent = function(componentName, callback) {\n\tcallback = callback || _.noop;\n\n\tvar newComponentsTree = this._calculateComponentsTree(componentName);\n\n\tthis._applyComponentsTree({\n\t\tparentNode: null,\n\t\toldNode: this.componentsTree,\n\t\tnode: newComponentsTree\n\t}, callback);\n};\n\n/*\n * Override `route` to add middleware processing functionality\n */\n\nRouter.route = function(url, name, callback) {\n\tvar router = this;\n\n\tif (_.isFunction(name)) {\n\t\tcallback = name;\n\t\tname = '';\n\t}\n\n\tbackbone.Router.prototype.route.call(this, url, name, function() {\n\t\tvar args = arguments;\n\n\t\trouter._defaultMiddleware({\n\t\t\turl: url,\n\t\t\tname: name,\n\t\t\tcallback: callback\n\t\t}, function() {\n\t\t\tcallback.apply(router, args);\n\t\t});\n\t});\n};\n\n/*\n * Override `navigate`\n * @param {String} fragment\n * @param {Object} [options] - hash of params\n * @param {Object} [options.qs] - query string hash\n */\n\nRouter.navigate = function(fragment, options) {\n\toptions = options || {};\n\n\tif (fragment.indexOf(this.root) === 0) {\n\t\tfragment = fragment.substring(this.root.length);\n\t}\n\n\t// force to go to the selected fragment even if we currently on it\n\t// @TODO: block nowhere url via `execute` after upgrade backbone (1.1.1)\n\tif (options.force) {\n\t\tthis.navigate(this.nowhereUrl, {\n\t\t\treplace: options.replace,\n\t\t\ttrigger: false\n\t\t});\n\n\t\toptions = _(options).chain().omit('force').extend({replace: true}).value();\n\n\t\treturn this.navigate(fragment, options);\n\t}\n\n\t// set `trigger` to true by default\n\toptions = _(options || {}).defaults({\n\t\ttrigger: true,\n\t\tparams: {}\n\t});\n\n\t// add support of query string using `toFragment` from backbone.queryparams\n\tvar qs = options.qs;\n\n\tif (qs) {\n\t\t// reject undefined and null qs parameters\n\t\t_(qs).each(function(val, key, qs) {\n\t\t\tif (val === undefined || val === null) delete qs[key];\n\t\t});\n\t\t// qs = _(qs).chain().omit(_.isNull).omit(_.isUndefined).value();\n\n\t\tfragment = this.toFragment(fragment, qs);\n\n\t\tdelete options.qs;\n\t}\n\n\tbackbone.Router.prototype.navigate.call(this, fragment, options);\n};\n\n\n/*\n * Default middleware function\n */\n\nRouter._defaultMiddleware = function(route, next) {\n\tnext();\n};\n\n/**\n * Use passed function as `middleware`\n *\n * @param {Function} middleware - middleware function,\n * `route` and `next` will be passed as arguments.\n * context (`this`) is link to the router object.\n */\n\nRouter.middleware = function(middleware) {\n\tvar router = this;\n\n\tvar defaultMiddleware = this._defaultMiddleware;\n\n\tthis._defaultMiddleware = function(route, next) {\n\t\tdefaultMiddleware.call(router, route, function() {\n\t\t\tmiddleware.call(router, route, next);\n\t\t});\n\t};\n\n\treturn this;\n};\n\n/*\n * Require module file and init it\n * @param {String} params.url Url without query string\n */\n\nRouter.setModule = function(params) {\n\tvar router = this;\n\n\tvar url = params.url;\n\tdelete params.url;\n\n\tvar moduleName = _(url.split('/')).find(_.identity) || this.defaultModuleName;\n\n\t// require module file\n\trequire([this.modulesPath + moduleName], function(moduleInit) {\n\t\t// if module is loaded first time\n\t\tif (!router.modules[moduleName]) {\n\t\t\t// init it\n\t\t\tmoduleInit(router);\n\n\t\t\t// set module init flag to true\n\t\t\trouter.modules[moduleName] = true;\n\n\t\t\t// and navigate again with force flag\n\t\t\trouter.navigate(url, {\n\t\t\t\treplace: true,\n\t\t\t\tforce: true,\n\t\t\t\tqs: params\n\t\t\t});\n\t\t}\n\t}, this.onModuleError);\n};\n\n/*\n * Start routes handling\n */\n\nRouter.start = function() {\n\tthis._initRootComponent();\n\n\tbackbone.history.start({\n\t\tpushState: this.pushState,\n\t\troot: this.root\n\t});\n};\n\nmodule.exports = backbone.Router.extend(Router);\n","'use strict';\n\nvar _ = require('underscore');\nvar backbone = require('backbone');\n\n/*\n * Take jquery or other selectors lib from backbone\n */\n\nvar $ = backbone.$;\n\n/*\n * Helpers\n */\n\nvar splice = Array.prototype.splice;\n\n/*\n * Cached regex to split keys for `delegate`.\n */\n\nvar delegateEventSplitter = /^(\\S+)\\s*(.*)$/;\n\nvar nestedEventTypes = ['views', 'collections', 'models'];\n\n/*\n * Base View class extend backbone View class\n */\n\nvar View = {\n\t/*\n\t * Helpers (Object|Fuction) which will be passed to the template\n\t */\n\n\ttemplateHelpers: {}\n};\n\nvar viewOptions = [\n\t'models', 'collections', 'views', 'events', 'data', 'router',\n\t'templateHelpers'\n];\n\nView.wait = function() {\n\tvar self = this;\n\tthis._waiting = true;\n\n\treturn function() {\n\t\tself._waiting = false;\n\t\tself.trigger('resolve');\n\t};\n};\n\nView.isWaiting = function() {\n\treturn this._waiting;\n};\n\n/*\n * Override constructor\n *\n * @param {Object} [options]\n */\n\nView.constructor = function(options) {\n\tvar self = this;\n\n\toptions = options || {};\n\n\t// Nested views hash is empty by default\n\tthis.views = {};\n\n\tthis.data = this.data || {};\n\n\t// populate View instance with fields from options\n\t_.extend(this, _.pick(options, viewOptions));\n\t// save original options, it is sometimes usefull\n\tthis.options = options;\n\n\tif (this.template && !_.isFunction(this.template)) {\n\t\tthrow new Error('View `template` option should be a function');\n\t}\n\n\tthis._normalizeViews();\n\tthis._prepareNestedEvents();\n\n\tthis._waiting = false;\n\n\t// apply backbone.View constructor\n\tbackbone.View.apply(this, arguments);\n\n\t// delegate events for each collection\n\tif (this.collections) {\n\t\t_(this.collections).each(function(collection, key) {\n\t\t\tself.delegateNestedEvents('collections', key, collection);\n\t\t});\n\t}\n\n\t// delegate events for each model\n\tif (this.models) {\n\t\t_(this.models).each(function(model, key) {\n\t\t\tself.delegateNestedEvents('models', key, model);\n\t\t});\n\t}\n};\n\nView.setData = function(data) {\n\tif (data) this.data = data;\n};\n\nView.isUnchanged = function() {\n\treturn true;\n};\n\n/*\n * Override `render`\n */\n\nView.render = function(options) {\n\tif (this.isWaiting()) return this;\n\n\toptions = options || {};\n\n\tif (\n\t\tthis.template &&\n\t\t(options.force || !this.isAttached() || !this.isUnchanged())\n\t) {\n\t\tthis._createTemplateElement();\n\n\t\t// set tricky flag that used for calling after render\n\t\t// only after _createTemplateElement\n\t\tthis._isAfterAttachNeeded = true;\n\t}\n\n\t// attach view to dom element\n\tthis.attach();\n\n\t// render nested views\n\tthis.renderViews(options);\n\n\t// call after attach method if el was set in parent view\n\tif (this.$el.parent().length) {\n\t\tthis._afterAttachViews();\n\t}\n\n\treturn this;\n};\n\n/*\n * Get data for template rendering\n */\n\nView.getTemplateData = function() {\n\treturn this.data;\n};\n\n/*\n * Render template with data. Returns html.\n *\n * @param {function} template for rendering\n * @params {object} data for rendering\n */\n\nView.renderTemplate = function(template, data) {\n\tdata = _(this).chain().result('templateHelpers').extend(data).value();\n\n\t// get html\n\treturn template(data);\n};\n\n/*\n * Set html to $el element\n *\n * @param {object} [data] data for rendering (return value of getData)\n */\n\nView._createTemplateElement = function() {\n\tvar templateData = this.getTemplateData();\n\tvar html = this.renderTemplate(this.template, templateData);\n\tvar $html = $(html);\n\n\tif ($html.length > 1) {\n\t\t// @TODO: show warning here or something better?\n\t}\n\n\tvar $newEl = $html.first();\n\n\t// insert html to $el\n\tif (this.$el.parent().length) {\n\t\tthis.$el.replaceWith($newEl);\n\t}\n\n\tthis.setElement($newEl, true);\n\n\treturn this;\n};\n\n\n/*\n * Render all nested view\n *\n * @TODO: add some rendering optimizations\n*/\n\nView.renderViews = function(options) {\n\tvar self = this;\n\n\t// iterate by each views group\n\t_(this.views).each(function(viewsGroup, container) {\n\t\t// return if view group is empty\n\t\tif (!viewsGroup.length) return;\n\n\t\t// call render for each views from view group\n\t\t_(viewsGroup).each(function(view) {\n\t\t\tview.render(options);\n\t\t});\n\n\t\t// get first container or $el\n\t\tvar $container = container ? self.$(container).first() : self.$el;\n\n\t\tif (!$container.length) {\n\t\t\tthrow new Error('Container \"' + container + '\" is not found');\n\t\t}\n\n\t\tif (_(viewsGroup).some(function(view) {\n\t\t\treturn !view.isAttached() || !$container.is(view.$el.parent());\n\t\t})) {\n\t\t\t// put to $container\n\t\t\t$container.append(_(viewsGroup).pluck('$el'));\n\t\t}\n\t});\n};\n\n/*\n * Set view(s) to views group or replace some view in specified position\n * If index is passed it replace only one view with index in views group\n *\n * @param {View | View[]} views - view(s) to set\n * @param {String} container - container to set\n * @param {Number} [index] - index of view to replace\n */\n\nView.setView = View.setViews = function(views, container, index) {\n\treturn this._updateViews('set', views, container, index);\n};\n\n/*\n * Alias for setViews\n */\n\nView.replaceView = View.replaceViews = function(views, container, index) {\n\treturn this.setViews.apply(this, arguments);\n};\n\n/*\n * Append view(s) to end of views group\n * This method is alias for insertViews without index argument\n *\n * @param {View | View[]} views\n * @param {String} container - container of views group\n */\n\nView.appendView = View.appendViews = function(views, container) {\n\treturn this.insertViews(views, container);\n};\n\n/*\n * Prepend view(s) to start of views group\n * This method is alias for insertViews with `0` as index argument value\n *\n * @param {View | View[]} views\n * @param {String} container - container of views group\n */\n\nView.prependView = View.prependViews = function(views, container) {\n\treturn this.insertViews(views, container, 0);\n};\n\n/*\n * Insert view(s) to specified position of views group\n * If index is not passed views will insert to end of views group (append)\n *\n * @param {View | View[]} views\n * @param {String} container - container of views group\n * @param {Number} [index] - position in views group\n */\n\nView.insertView = View.insertViews = function(views, container, index) {\n\treturn this._updateViews('insert', views, container, index);\n};\n\n/*\n * Remove view(s) from views group by index or views instances list\n * If index is passed it remove only one view in index position\n * If views is passed it remove some of them, that places in views group\n *\n * @param {View | View[]} [views] - view(s) to remove\n * @param {String} container - container of views group\n * @param {Number} [index] - index of view in views group\n */\n\nView.removeView = View.removeViews = function(views, container, index) {\n\tif (arguments.length < 2) {\n\t\tthrow new Error('\"views\" or \"index\" arguments must be specified');\n\t}\n\n\tif (_.isString(views)) {\n\t\tindex = container;\n\t\tcontainer = views;\n\t\tviews = this.getView(container, index);\n\t\tif (!views) return this;\n\t}\n\n\treturn this._updateViews('remove', views, container);\n};\n\n/*\n * Get single view by container and index\n *\n * @param {String} container - container of views group\n * @param {Number} [index] - index of view in views group\n */\n\nView.getView = function(container, index) {\n\treturn this.getViews(container)[index || 0] || null;\n};\n\n/*\n * Get views group by container\n *\n * @param {String} container - container of views group\n */\n\nView.getViews = function(container) {\n\treturn _.clone(this.views[container]) || [];\n};\n\n/*\n * Common method for updating view(s) in views group with method\n *  `set`, `insert` or `remove`.\n *\n * @param {String} method - `set`, `insert` or `remove`\n * @paran {View | View[]} views\n * @param {String} container - container of views group\n * @param {Number} [index] - index of view in group\n */\n\nView._updateViews = function(method, views, container, index) {\n\tvar self = this;\n\n\tif (!views) {\n\t\tthrow new Error('\"views\" argument must be specified');\n\t}\n\n\tif (!_.isArray(views)) views = [views];\n\n\tvar viewsGroup = this.getViews(container);\n\n\tswitch (method) {\n\t\tcase 'set':\n\t\t\tif (viewsGroup.length) {\n\t\t\t\tvar removedViews = [];\n\n\t\t\t\t// if views group is not empty\n\t\t\t\tif (typeof index !== 'undefined') {\n\t\t\t\t\t// if index is specified\n\t\t\t\t\t// remove view from specific position\n\t\t\t\t\tremovedViews = this.getView(container, index);\n\t\t\t\t\tremovedViews = removedViews ? [removedViews] : [];\n\t\t\t\t} else {\n\t\t\t\t\t// if no index - remove all views from views group\n\t\t\t\t\tremovedViews = viewsGroup;\n\t\t\t\t}\n\n\t\t\t\tif (removedViews.length) {\n\t\t\t\t\t// if remove views array is not empty\n\t\t\t\t\t// remove from parent\n\t\t\t\t\tthis._updateViews('remove', removedViews, container);\n\n\t\t\t\t\t// and remove views\n\t\t\t\t\t_(removedViews).each(function(view) {\n\t\t\t\t\t\tview.remove();\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// insert new views\n\t\t\tthis._updateViews('insert', views, container, index);\n\n\t\t\tbreak;\n\n\t\tcase 'insert':\n\t\t\t_(views).each(function(view) {\n\t\t\t\tif (view.parent) {\n\t\t\t\t\tview.parent.removeView(view, view.container);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tif (viewsGroup.length) {\n\t\t\t\t// if index is not specified set it value as last index of views group\n\t\t\t\tif (typeof index === 'undefined') {\n\t\t\t\t\tindex = viewsGroup.length;\n\t\t\t\t}\n\n\t\t\t\t// insert views\n\t\t\t\tsplice.apply(this.views[container], [index, 0].concat(views));\n\t\t\t} else {\n\t\t\t\t// if group is empty - set views as whole views group value\n\t\t\t\tthis.views[container] = views;\n\t\t\t}\n\n\t\t\t// set each view parent to current\n\t\t\t_(views).each(function(view) {\n\t\t\t\tview.parent = self;\n\t\t\t\tview.container = container;\n\t\t\t});\n\n\t\t\tthis.delegateNestedEvents('views', container, views);\n\n\t\t\tbreak;\n\n\t\tcase 'remove':\n\t\t\tif (!viewsGroup.length) break;\n\n\t\t\tvar viewObjs = _.chain(views).uniq().map(function(view) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tview: view,\n\t\t\t\t\t\tindex: _.indexOf(viewsGroup, view)\n\t\t\t\t\t};\n\t\t\t\t}).filter(function(viewObj) {\n\t\t\t\t\treturn viewObj.index >= 0;\n\t\t\t\t}).sortBy(function(viewObj) {\n\t\t\t\t\treturn -viewObj.index;\n\t\t\t\t}).value();\n\n\t\t\tif (!viewObjs.length) break;\n\n\t\t\t_(viewObjs).each(function(viewObj) {\n\t\t\t\tvar view = viewObj.view;\n\n\t\t\t\t// remove item from group\n\t\t\t\tsplice.call(self.views[container], viewObj.index, 1);\n\n\t\t\t\t// undelegate all nested entity events\n\t\t\t\tself.undelegateNestedEvents(view);\n\n\t\t\t\t// unset view parent\n\t\t\t\tdelete view.parent;\n\t\t\t});\n\t}\n\n\treturn this;\n};\n\n/*\n * Override delegateEvents\n */\n\nView.delegateEvents = function(events) {\n\tevents = events || _.result(this, 'events');\n\tif (!events) return this;\n\tevents = _(events).omit(nestedEventTypes);\n\treturn backbone.View.prototype.delegateEvents.call(this, events);\n};\n\nView.delegateNestedEvents = function(type, key, entities) {\n\tvar self = this;\n\tif (!_.isArray(entities)) entities = [entities];\n\tvar listeners = this._nestedEventsHash[type][key];\n\tif (listeners) {\n\t\t_(listeners).each(function(listener) {\n\t\t\t_(entities).each(function(entity) {\n\t\t\t\tself.listenTo(entity, listener.eventName, listener.handler);\n\t\t\t});\n\t\t});\n\t}\n\treturn this;\n};\n\nView.undelegateNestedEvents = function(entities) {\n\tvar self = this;\n\tif (!_.isArray(entities)) entities = [entities];\n\t_(entities).each(function(entity) {\n\t\tself.stopListening(entity);\n\t});\n\treturn this;\n};\n\nView._prepareNestedEvents = function(events) {\n\tvar self = this;\n\n\t// Hash for nested views events fast search\n\tthis._nestedEventsHash = {};\n\t_(nestedEventTypes).each(function(type) {\n\t\tself._nestedEventsHash[type] = {};\n\t});\n\n\tevents = events || _.result(this, 'events');\n\tif (!events) return;\n\n\t// bind all prefixed events to view then call native delegate events\n\t_(nestedEventTypes).each(function(type) {\n\t\tvar typeEventsHash = self._nestedEventsHash[type];\n\n\t\tif (!_(events).has(type) || !_.isObject(events[type])) return;\n\n\t\t_(events[type]).each(function(method, key) {\n\t\t\tif (!_.isFunction(method)) method = self[method];\n\t\t\tif (!method) return;\n\t\t\tvar match = key.match(delegateEventSplitter);\n\t\t\tvar eventName = match[1];\n\t\t\tvar entityKeys = match[2].replace(/ *, */g, ',').split(',');\n\t\t\tmethod = _.bind(method, self);\n\n\t\t\t// fill _nestedEventsHash\n\t\t\t_(entityKeys).each(function(entityKey) {\n\t\t\t\ttypeEventsHash[entityKey] = typeEventsHash[entityKey] || [];\n\t\t\t\ttypeEventsHash[entityKey].push({\n\t\t\t\t\teventName: eventName,\n\t\t\t\t\thandler: method\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t});\n};\n\n/*\n * Wrap all non-array views groups to arrays with one element\n */\n\nView._normalizeViews = function() {\n\tvar self = this;\n\n\t_(this.views).each(function(views, container) {\n\t\tif (!_.isArray(views)) {\n\t\t\tself.views[container] = [views];\n\t\t}\n\t});\n};\n\n/*\n * Get view attached state\n */\n\nView.isAttached = function() {\n\tvar view = this.$el.data('esencia-view');\n\treturn Boolean(view && view === this);\n};\n\nView._afterAttachViews = function() {\n\t// iterate by each nested views groups\n\t_(this.views).each(function(viewsGroup) {\n\t\t// return if views group is empty\n\t\tif (!viewsGroup.length) return;\n\n\t\t// call _afterAttachViews for each views from views group\n\t\t_(viewsGroup).each(function(view) {\n\t\t\tview._afterAttachViews();\n\t\t});\n\t});\n\n\t// call afterAttach for current view\n\tif (this._isAfterAttachNeeded) {\n\t\t// remove after attach flag\n\t\tdelete this._isAfterAttachNeeded;\n\n\t\t// call after attach\n\t\tthis.afterAttach();\n\t}\n};\n\n/*\n * afterAttach is empty by default.\n * It called after _createTemplateElement, renderViews and attach calls\n * Override it to add some specific logic after template render.\n */\n\nView.afterAttach = function() {\n\treturn this;\n};\n\n/*\n * Detach all previous views and attach new view to current view $el\n */\n\nView.attach = function() {\n\t// return if current view is already attached\n\tif (this.isAttached()) return this;\n\n\t// detach previous instance attached to this element\n\tvar previousView = this.$el.data('esencia-view');\n\tif (previousView) previousView.detach();\n\n\t// attach current view and set attr\n\tthis.$el.data('esencia-view', this).attr('esencia-view', this.cid);\n\n\treturn this;\n};\n\nView._detachViews = function() {\n\t// iterate by each views groups\n\t_(this.views).each(function(viewsGroup) {\n\t\t// return if views group is empty\n\t\tif (!viewsGroup.length) return;\n\n\t\t// call _detachViews for each nested view from views group\n\t\t_(viewsGroup).each(function(view) {\n\t\t\tview.detach();\n\t\t});\n\t});\n};\n\n/*\n * beforeDetach is empty by default.\n * It called before detach calls\n * Override it to add some specific logic before view detach from dom.\n */\n\nView.beforeDetach = function() {\n\treturn this;\n};\n\n/*\n * Detach view from current view $el\n */\n\nView.detach = function() {\n\t// return if current view is not already attached\n\tif (!this.isAttached()) return this;\n\n\t// detach all nested views\n\tthis._detachViews();\n\n\t// do some user actions\n\tthis.beforeDetach();\n\n\t// remove attr and data from $el\n\tthis.$el.removeData('esencia-view').removeAttr('esencia-view');\n\n\t// disable all events\n\tthis.undelegateEvents();\n\tthis.stopListening();\n\n\treturn this;\n};\n\nView.remove = function() {\n\tif (this.parent) {\n\t\tthis.parent.removeView(this, this.container);\n\t}\n\tthis.detach();\n\tthis._removeElement();\n\treturn this;\n};\n\n/*\n * Get view, that attached to closest element with attr `esencia-view`\n *\n * @param {String | $} selector\n */\n\nView.getClosestView = function(selector) {\n\tvar $selector = $(selector);\n\n\tif (!$selector.is('[esencia-view]')) {\n\t\t$selector = $selector.closest('[esencia-view]');\n\t}\n\n\treturn $selector.length ? $selector.data('esencia-view') : null;\n};\n\nmodule.exports = backbone.View.extend(View);\n"],"sourceRoot":"."}