{"version":3,"sources":["router.js","lib/router.js","lib/view.js"],"names":["factory","define","amd","exports","module","require","this","Esencia","Router","_","Backbone","__external__","__external_Backbone","_require","id","cache","modules","call","backbone","View","root","rootViewEl","modulesPath","defaultModuleName","pushState","namedParameters","autoloadModules","debug","config","onModuleError","nowhereUrl","routerOptions","constructor","options","extend","pick","components","componentsTree","urlParams","history","apply","arguments","route","params","setModule","_initRootComponent","RootView","el","component","name","parent","_populateUrlParams","componentName","key","has","result","componentOptions","router","defaults","defaultUrlParams","viewOptions","process","isUndefined","uniqueId","isString","Error","isNull","url","_processComponent","_calculateComponentsTree","child","node","_isComponentTreeNodeChanged","oldNode","view","attached","isUnchanged","_applyComponentsTree","callback","self","parentNode","iterateNode","childNode","onViewResolve","setData","container","setView","renderViews","attachViews","render","oldView","remove","detach","chain","value","waiting","once","oldChildViewContainer","oldChildView","removeView","noop","newComponentsTree","isFunction","prototype","args","_defaultMiddleware","navigate","fragment","indexOf","substring","length","force","replace","trigger","omit","qs","toFragment","each","val","undefined","next","middleware","defaultMiddleware","moduleName","split","find","identity","moduleInit","start","$","splice","Array","delegateEventSplitter","nestedEventTypes","templateHelpers","views","data","template","_normalizeViews","_prepareNestedEvents","collections","collection","delegateNestedEvents","models","model","wait","console","log","$el","html","renderTemplate","getTemplateData","setElement","_ensureElement","$container","attach","viewsGroup","first","containerEl","get","domChanged","some","$els","push","append","index","_updateViews","setViews","replaceView","replaceViews","appendView","_insertViews","appendViews","prependView","prependViews","insertView","insertViews","getView","_removeViews","removeViews","getViews","clone","concat","removedViews","viewObjs","uniq","map","filter","viewObj","sortBy","undelegateNestedEvents","element","$previousEl","_setElement","replaceWith","delegateEvents","events","type","entities","isArray","listeners","_nestedEventsHash","listener","entity","listenTo","eventName","handler","stopListening","typeEventsHash","isObject","method","match","entityKeys","bind","entityKey","afterAttach","previousView","attr","cid","detachViews","beforeDetach","removeData","removeAttr","undelegateEvents","getClosestView","selector","$selector","is","closest"],"mappings":"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","file":"router.min.js","sourcesContent":["(function (factory) {\n    if (typeof define === 'function' && define.amd) {\n        define([\n            'underscore',\n            'backbone'\n        ], factory);\n    } else if (typeof exports === 'object') {\n        module.exports = factory(require('underscore'), require('backbone'));\n    } else {\n        this.Esencia.Router = factory(_, Backbone);\n    }\n}(function (__external__, __external_Backbone) {\n    var global = this, define;\n    function _require(id) {\n        var module = _require.cache[id];\n        if (!module) {\n            var exports = {};\n            module = _require.cache[id] = {\n                id: id,\n                exports: exports\n            };\n            _require.modules[id].call(exports, module, exports);\n        }\n        return module.exports;\n    }\n    _require.cache = [];\n    _require.modules = [\n        function (module, exports) {\n            'use strict';\n            var _ = _require(3);\n            var backbone = _require(2);\n            var View = _require(1);\n            var Router = {\n                    root: '/',\n                    rootViewEl: 'html',\n                    modulesPath: 'modules/',\n                    defaultModuleName: 'main',\n                    pushState: false,\n                    namedParameters: false,\n                    autoloadModules: true,\n                    debug: false,\n                    config: {},\n                    onModuleError: function () {\n                    },\n                    nowhereUrl: '___'\n                };\n            var routerOptions = [\n                    'root',\n                    'rootViewEl',\n                    'modulesPath',\n                    'defaultModuleName',\n                    'pushState',\n                    'namedParameters',\n                    'autoloadModules',\n                    'debug',\n                    'config',\n                    'onModuleError',\n                    'nowhereUrl'\n                ];\n            Router.constructor = function (options) {\n                options = options || {};\n                _.extend(this, _.pick(options, routerOptions));\n                this.options = options;\n                this.components = {};\n                this.componentsTree = null;\n                this.urlParams = {};\n                this.modules = {};\n                this.history = backbone.history;\n                backbone.Router.namedParameters = this.namedParameters;\n                backbone.Router.apply(this, arguments);\n                if (options.autoloadModules) {\n                    this.route('*url', function (params) {\n                        this.setModule(params);\n                    });\n                }\n            };\n            Router._initRootComponent = function () {\n                var RootView = View.extend({ el: this.rootViewEl });\n                this.component({\n                    name: '',\n                    parent: null,\n                    View: RootView\n                });\n            };\n            Router._populateUrlParams = function (componentName, params) {\n                var urlParams = this.urlParams;\n                var key;\n                for (key in urlParams) {\n                    if (_(urlParams).has(key)) {\n                        delete urlParams[key];\n                    }\n                }\n                var component = this.components[componentName];\n                return _(urlParams).extend(_(component).result('defaultUrlParams'), params);\n            };\n            var componentOptions = [\n                    'url',\n                    'name',\n                    'parent',\n                    'container',\n                    'View',\n                    'models',\n                    'collections',\n                    'viewOptions',\n                    'defaultUrlParams'\n                ];\n            Router.component = function (options) {\n                var router = this;\n                options = _({}).defaults(options, {\n                    parent: '',\n                    defaultUrlParams: {},\n                    viewOptions: {},\n                    process: false\n                });\n                var component = _(options).pick(componentOptions);\n                if (_.isUndefined(component.name)) {\n                    component.name = _.uniqueId('auto-named-component');\n                }\n                if (!_.isString(component.name)) {\n                    throw new Error('Component `name` option should be a string');\n                }\n                if (component.name in this.components) {\n                    throw new Error('Duplicate component with name \"' + component.name + '\"');\n                }\n                if (!component.View) {\n                    throw new Error('Component `View` option is required');\n                }\n                if (!_.isString(component.parent) && !_.isNull(component.parent)) {\n                    throw new Error('Component `parent` option should be a string or null');\n                }\n                this.components[component.name] = component;\n                if (!_.isUndefined(component.url)) {\n                    this.route(component.url, component.name, function (params) {\n                        router._populateUrlParams(component.name, params);\n                        router._processComponent(component.name);\n                    });\n                }\n                if (options.process) {\n                    this._processComponent(component.name);\n                }\n                return this;\n            };\n            Router._calculateComponentsTree = function (componentName, child) {\n                var component = this.components[componentName];\n                if (!component) {\n                    throw new Error('Unknown component with name \"' + componentName + '\"');\n                }\n                var node = { name: componentName };\n                if (child) {\n                    node.child = child;\n                }\n                if (_.isString(component.parent)) {\n                    return this._calculateComponentsTree(component.parent, node);\n                } else {\n                    return node;\n                }\n            };\n            Router._isComponentTreeNodeChanged = function (oldNode, node) {\n                if (!oldNode || oldNode.name !== node.name || !oldNode.view)\n                    return true;\n                var component = this.components[node.name];\n                if (oldNode.view instanceof component.View === false)\n                    return true;\n                if (!oldNode.view.attached)\n                    return true;\n                return !oldNode.view.isUnchanged();\n            };\n            Router._applyComponentsTree = function (params, callback) {\n                var self = this;\n                var parentNode = params.parentNode;\n                var iterateNode = function (oldNode, node) {\n                    var childNode = node.child;\n                    delete node.child;\n                    if (parentNode) {\n                        parentNode.child = node;\n                    } else {\n                        self.componentsTree = node;\n                    }\n                    if (childNode) {\n                        self._applyComponentsTree({\n                            parentNode: node,\n                            oldNode: oldNode && oldNode.child || null,\n                            node: childNode\n                        }, callback);\n                    } else {\n                        callback();\n                    }\n                };\n                var node = params.node;\n                var oldNode = params.oldNode;\n                var component = this.components[node.name];\n                var onViewResolve = function (view) {\n                    node.view = view;\n                    view.setData();\n                    if (component.container) {\n                        if (!parentNode) {\n                            throw new Error('Parent component should exist for component with `container` option');\n                        }\n                        parentNode.view.setView(view, component.container).renderViews().attachViews();\n                    } else {\n                        view.render();\n                    }\n                    iterateNode(null, node);\n                };\n                var oldView = oldNode && oldNode.view;\n                if (this._isComponentTreeNodeChanged(oldNode, node)) {\n                    if (oldView) {\n                        if (oldView.container) {\n                            if (!component.container || oldView.container !== component.container) {\n                                oldView.remove();\n                            }\n                        } else {\n                            oldView.detach();\n                        }\n                    }\n                    var view = new component.View(_(component).chain().pick('models', 'collections').defaults(_(component).result('viewOptions')).extend({ router: this }).value());\n                    if (view.waiting) {\n                        view.once('resolve', function () {\n                            onViewResolve(view);\n                        });\n                    } else {\n                        onViewResolve(view);\n                    }\n                } else {\n                    var oldChildView = oldNode.child && oldNode.child.view;\n                    var oldChildViewContainer;\n                    if (oldChildView) {\n                        oldChildViewContainer = oldChildView.container;\n                        if (oldChildViewContainer) {\n                            oldView.removeView(oldChildView, oldChildViewContainer);\n                        }\n                    }\n                    node.view = oldView;\n                    oldView.setData();\n                    oldView.render();\n                    if (oldChildView && oldChildViewContainer) {\n                        oldView.setView(oldChildView, oldChildViewContainer);\n                    }\n                    iterateNode(oldNode, node);\n                }\n            };\n            Router._processComponent = function (componentName, callback) {\n                callback = callback || _.noop;\n                var newComponentsTree = this._calculateComponentsTree(componentName);\n                this._applyComponentsTree({\n                    parentNode: null,\n                    oldNode: this.componentsTree,\n                    node: newComponentsTree\n                }, callback);\n            };\n            Router.route = function (url, name, callback) {\n                var router = this;\n                if (_.isFunction(name)) {\n                    callback = name;\n                    name = '';\n                }\n                backbone.Router.prototype.route.call(this, url, name, function () {\n                    var args = arguments;\n                    router._defaultMiddleware({\n                        url: url,\n                        name: name,\n                        callback: callback\n                    }, function () {\n                        callback.apply(router, args);\n                    });\n                });\n            };\n            Router.navigate = function (fragment, options) {\n                options = options || {};\n                if (fragment.indexOf(this.root) === 0) {\n                    fragment = fragment.substring(this.root.length);\n                }\n                if (options.force) {\n                    this.navigate(this.nowhereUrl, {\n                        replace: options.replace,\n                        trigger: false\n                    });\n                    options = _(options).chain().omit('force').extend({ replace: true }).value();\n                    return this.navigate(fragment, options);\n                }\n                options = _(options || {}).defaults({\n                    trigger: true,\n                    params: {}\n                });\n                var qs = options.qs;\n                if (this.toFragment && qs) {\n                    _(qs).each(function (val, key, qs) {\n                        if (val === undefined || val === null)\n                            delete qs[key];\n                    });\n                    fragment = this.toFragment(fragment, qs);\n                    delete options.qs;\n                }\n                backbone.Router.prototype.navigate.call(this, fragment, options);\n            };\n            Router._defaultMiddleware = function (route, next) {\n                next();\n            };\n            Router.middleware = function (middleware) {\n                var router = this;\n                var defaultMiddleware = this._defaultMiddleware;\n                this._defaultMiddleware = function (route, next) {\n                    defaultMiddleware.call(router, route, function () {\n                        middleware.call(router, route, next);\n                    });\n                };\n                return this;\n            };\n            Router.setModule = function (params) {\n                var router = this;\n                var url = params.url;\n                delete params.url;\n                var moduleName = _(url.split('/')).find(_.identity) || this.defaultModuleName;\n                require([this.modulesPath + moduleName], function (moduleInit) {\n                    if (!router.modules[moduleName]) {\n                        moduleInit(router);\n                        router.modules[moduleName] = true;\n                        router.navigate(url, {\n                            replace: true,\n                            force: true,\n                            qs: params\n                        });\n                    }\n                }, this.onModuleError);\n            };\n            Router.start = function () {\n                this._initRootComponent();\n                backbone.history.start({\n                    pushState: this.pushState,\n                    root: this.root\n                });\n            };\n            module.exports = backbone.Router.extend(Router);\n        },\n        function (module, exports) {\n            'use strict';\n            var _ = _require(3);\n            var backbone = _require(2);\n            var $ = backbone.$;\n            var splice = Array.prototype.splice;\n            var delegateEventSplitter = /^(\\S+)\\s*(.*)$/;\n            var nestedEventTypes = [\n                    'views',\n                    'collections',\n                    'models'\n                ];\n            var View = { templateHelpers: {} };\n            var viewOptions = [\n                    'models',\n                    'collections',\n                    'views',\n                    'events',\n                    'data',\n                    'router',\n                    'templateHelpers'\n                ];\n            View.constructor = function (options) {\n                var self = this;\n                options = options || {};\n                this.views = {};\n                this.data = this.data || {};\n                _.extend(this, _.pick(options, viewOptions));\n                this.options = options;\n                if (this.template && !_.isFunction(this.template)) {\n                    throw new Error('View `template` option should be a function');\n                }\n                this._normalizeViews();\n                this._prepareNestedEvents();\n                this.waiting = false;\n                this.attached = false;\n                backbone.View.apply(this, arguments);\n                if (this.collections) {\n                    _(this.collections).each(function (collection, key) {\n                        self.delegateNestedEvents('collections', key, collection);\n                    });\n                }\n                if (this.models) {\n                    _(this.models).each(function (model, key) {\n                        self.delegateNestedEvents('models', key, model);\n                    });\n                }\n            };\n            View.setData = function (data) {\n                if (data)\n                    this.data = data;\n            };\n            View.isUnchanged = function () {\n                return true;\n            };\n            View.wait = function () {\n                var self = this;\n                this.waiting = true;\n                return function () {\n                    self.waiting = false;\n                    self.trigger('resolve');\n                };\n            };\n            View.render = function (options) {\n                console.log('>>>      render: %o %o', this, this.$el);\n                if (this.waiting)\n                    return this;\n                options = options || {};\n                if (this.template) {\n                    if (options.force || !this.attached || !this.isUnchanged()) {\n                        this.detach();\n                        var html = this.renderTemplate(this.template, this.getTemplateData());\n                        var $el = $(html);\n                        if (!$el.length) {\n                            throw new Error('View template produce empty html');\n                        }\n                        if ($el.length > 1) {\n                            throw new Error('View template produce html with more than one root elements');\n                        }\n                        this.setElement($el);\n                    }\n                } else {\n                    if (!this.$el.length)\n                        this._ensureElement();\n                }\n                this.renderViews(options);\n                if (!this.parent || this.$container) {\n                    this.attachViews();\n                    this.attach();\n                }\n                return this;\n            };\n            View.getTemplateData = function () {\n                return this.data;\n            };\n            View.renderTemplate = function (template, data) {\n                data = _(this).chain().result('templateHelpers').extend(data).value();\n                return template(data);\n            };\n            View.renderViews = function (options) {\n                console.log('>>> renderViews: %o %o', this, this.$el);\n                var self = this;\n                _(this.views).each(function (viewsGroup, container) {\n                    if (!viewsGroup.length)\n                        return;\n                    _(viewsGroup).each(function (view) {\n                        view.render(options);\n                    });\n                    var $container = container ? self.$(container).first() : self.$el;\n                    if (!$container.length) {\n                        throw new Error('Container \"' + container + '\" is not found');\n                    }\n                    var containerEl = $container.get(0);\n                    var domChanged = _(viewsGroup).some(function (view) {\n                            return !view.attached || !view.$container || view.$container.get(0) !== containerEl;\n                        });\n                    if (domChanged) {\n                        var $els = [];\n                        _(viewsGroup).each(function (view) {\n                            view.$container = $container;\n                            $els.push(view.$el);\n                        });\n                        $container.append($els);\n                    }\n                });\n                return this;\n            };\n            View.setView = function (view, container, index) {\n                return this._updateViews([view], container, index);\n            };\n            View.setViews = function (views, container, index) {\n                return this._updateViews(views, container, index);\n            };\n            View.replaceView = function (view, container, index) {\n                return this._updateViews([view], container, index);\n            };\n            View.replaceViews = function (views, container, index) {\n                return this._updateViews(views, container, index);\n            };\n            View.appendView = function (view, container) {\n                return this._insertViews([view], container);\n            };\n            View.appendViews = function (views, container) {\n                return this._insertViews(views, container);\n            };\n            View.prependView = function (view, container) {\n                return this._insertViews([view], container, 0);\n            };\n            View.prependViews = function (views, container) {\n                return this._insertViews(views, container, 0);\n            };\n            View.insertView = function (view, container, index) {\n                return this._insertViews([view], container, index);\n            };\n            View.insertViews = function (views, container, index) {\n                return this._insertViews(views, container, index);\n            };\n            View.removeView = function (view, container, index) {\n                if (arguments.length < 2) {\n                    throw new Error('\"view\" or \"index\" arguments must be specified');\n                }\n                if (_.isString(view)) {\n                    index = container;\n                    container = view;\n                    view = this.getView(container, index);\n                    if (!view)\n                        return this;\n                }\n                return this._removeViews([view], container);\n            };\n            View.removeViews = function (views, container) {\n                if (_.isString(views)) {\n                    container = views;\n                    views = this.getViews(container);\n                }\n                return this._removeViews(views, container);\n            };\n            View.getView = function (container, index) {\n                return this.getViews(container)[index || 0] || null;\n            };\n            View.getViews = function (container) {\n                return _.clone(this.views[container]) || [];\n            };\n            View._insertViews = function (views, container, index) {\n                console.log('>>> _insertViews:', views, container, index);\n                var self = this;\n                var viewsGroup = this.getViews(container);\n                _(views).each(function (view) {\n                    if (view.parent) {\n                        view.parent.removeView(view, view.container);\n                    }\n                });\n                if (viewsGroup.length) {\n                    if (typeof index === 'undefined') {\n                        index = viewsGroup.length;\n                    }\n                    splice.apply(this.views[container], [\n                        index,\n                        0\n                    ].concat(views));\n                } else {\n                    this.views[container] = views;\n                }\n                _(views).each(function (view) {\n                    view.parent = self;\n                    view.container = container;\n                });\n                this.delegateNestedEvents('views', container, views);\n                return this;\n            };\n            View._updateViews = function (views, container, index) {\n                console.log('>>> _updateViews:', views, container, index);\n                var viewsGroup = this.getViews(container);\n                if (viewsGroup.length) {\n                    var removedViews = [];\n                    if (typeof index !== 'undefined') {\n                        removedViews = this.getView(container, index);\n                        removedViews = removedViews ? [removedViews] : [];\n                    } else {\n                        removedViews = viewsGroup;\n                    }\n                    if (removedViews.length) {\n                        this._removeViews(removedViews, container);\n                        _(removedViews).each(function (view) {\n                            view.remove();\n                        });\n                    }\n                }\n                return this._insertViews(views, container, index);\n            };\n            View._removeViews = function (views, container) {\n                console.log('>>> _removeViews:', views, container);\n                var self = this;\n                var viewsGroup = this.getViews(container);\n                if (!viewsGroup.length)\n                    return this;\n                var viewObjs = _.chain(views).uniq().map(function (view) {\n                        return {\n                            view: view,\n                            index: _.indexOf(viewsGroup, view)\n                        };\n                    }).filter(function (viewObj) {\n                        return viewObj.index >= 0;\n                    }).sortBy(function (viewObj) {\n                        return -viewObj.index;\n                    }).value();\n                if (!viewObjs.length)\n                    return this;\n                _(viewObjs).each(function (viewObj) {\n                    var view = viewObj.view;\n                    splice.call(self.views[container], viewObj.index, 1);\n                    self.undelegateNestedEvents(view);\n                    delete view.parent;\n                });\n                return this;\n            };\n            View.setElement = function (element) {\n                var $previousEl = this.$el;\n                this._setElement(element);\n                if ($previousEl && this.$container) {\n                    $previousEl.replaceWith(this.$el);\n                }\n                return this;\n            };\n            View.delegateEvents = function (events) {\n                events = events || _.result(this, 'events');\n                if (!events)\n                    return this;\n                events = _(events).omit(nestedEventTypes);\n                return backbone.View.prototype.delegateEvents.call(this, events);\n            };\n            View.delegateNestedEvents = function (type, key, entities) {\n                var self = this;\n                if (!_.isArray(entities))\n                    entities = [entities];\n                var listeners = this._nestedEventsHash[type][key];\n                if (listeners) {\n                    _(listeners).each(function (listener) {\n                        _(entities).each(function (entity) {\n                            self.listenTo(entity, listener.eventName, listener.handler);\n                        });\n                    });\n                }\n                return this;\n            };\n            View.undelegateNestedEvents = function (entities) {\n                var self = this;\n                if (!_.isArray(entities))\n                    entities = [entities];\n                _(entities).each(function (entity) {\n                    self.stopListening(entity);\n                });\n                return this;\n            };\n            View._prepareNestedEvents = function (events) {\n                var self = this;\n                this._nestedEventsHash = {};\n                _(nestedEventTypes).each(function (type) {\n                    self._nestedEventsHash[type] = {};\n                });\n                events = events || _.result(this, 'events');\n                if (!events)\n                    return;\n                _(nestedEventTypes).each(function (type) {\n                    var typeEventsHash = self._nestedEventsHash[type];\n                    if (!_(events).has(type) || !_.isObject(events[type]))\n                        return;\n                    _(events[type]).each(function (method, key) {\n                        if (!_.isFunction(method))\n                            method = self[method];\n                        if (!method)\n                            return;\n                        var match = key.match(delegateEventSplitter);\n                        var eventName = match[1];\n                        var entityKeys = match[2].replace(/ *, */g, ',').split(',');\n                        method = _.bind(method, self);\n                        _(entityKeys).each(function (entityKey) {\n                            typeEventsHash[entityKey] = typeEventsHash[entityKey] || [];\n                            typeEventsHash[entityKey].push({\n                                eventName: eventName,\n                                handler: method\n                            });\n                        });\n                    });\n                });\n            };\n            View._normalizeViews = function () {\n                var self = this;\n                _(this.views).each(function (views, container) {\n                    if (!_.isArray(views)) {\n                        self.views[container] = [views];\n                    }\n                });\n            };\n            View.attachViews = function () {\n                _(this.views).each(function (viewsGroup) {\n                    if (!viewsGroup.length)\n                        return;\n                    _(viewsGroup).each(function (view) {\n                        view.attachViews();\n                        view.attach();\n                    });\n                });\n                return this;\n            };\n            View.afterAttach = function () {\n                return this;\n            };\n            View.attach = function () {\n                if (this.attached)\n                    return this;\n                var previousView = this.$el.data('esencia-view');\n                if (previousView)\n                    previousView.detach();\n                this.$el.data('esencia-view', this).attr('esencia-view', this.cid);\n                this.delegateEvents();\n                this.attached = true;\n                console.log('>>>      attach: %o %o', this, this.$el);\n                this.afterAttach();\n                return this;\n            };\n            View.detachViews = function () {\n                _(this.views).each(function (viewsGroup) {\n                    if (!viewsGroup.length)\n                        return;\n                    _(viewsGroup).each(function (view) {\n                        view.detachViews();\n                        view.detach();\n                    });\n                });\n                return this;\n            };\n            View.beforeDetach = function () {\n                return this;\n            };\n            View.detach = function () {\n                if (!this.attached)\n                    return this;\n                console.log('>>>      detach: %o %o', this, this.$el);\n                this.beforeDetach();\n                this.$el.removeData('esencia-view').removeAttr('esencia-view');\n                this.undelegateEvents();\n                this.attached = false;\n                return this;\n            };\n            View.remove = function () {\n                if (this.parent) {\n                    this.parent.removeView(this, this.container);\n                }\n                this.detachViews();\n                this.detach();\n                return backbone.View.prototype.remove.call(this);\n            };\n            View.getClosestView = function (selector) {\n                var $selector = $(selector);\n                if (!$selector.is('[esencia-view]')) {\n                    $selector = $selector.closest('[esencia-view]');\n                }\n                return $selector.length ? $selector.data('esencia-view') : null;\n            };\n            module.exports = backbone.View.extend(View);\n        },\n        function (module, exports) {\n            module.exports = __external_Backbone;\n        },\n        function (module, exports) {\n            module.exports = __external__;\n        }\n    ];\n    return _require(0);\n}));\n//# sourceMappingURL=router.js.map\n","'use strict';\n\nvar _ = require('underscore');\nvar backbone = require('backbone');\nvar View = require('./view');\n\n/**\n * Router extends default backbone Router\n */\n\nvar Router = {\n\troot: '/',\n\trootViewEl: 'html',\n\tmodulesPath: 'modules/',\n\tdefaultModuleName: 'main',\n\tpushState: false,\n\tnamedParameters: false,\n\tautoloadModules: true,\n\tdebug: false,\n\tconfig: {},\n\tonModuleError: function() {},\n\tnowhereUrl: '___'\n};\n\nvar routerOptions = [\n\t'root', 'rootViewEl', 'modulesPath', 'defaultModuleName', 'pushState',\n\t'namedParameters', 'autoloadModules', 'debug', 'config', 'onModuleError',\n\t'nowhereUrl'\n];\n\n/*\n * Override `constructor`\n * @param {Object} [options]\n */\n\nRouter.constructor = function(options) {\n\toptions = options || {};\n\n\t// populate Router instance with fields from options\n\t_.extend(this, _.pick(options, routerOptions));\n\n\t// save original options, it is sometimes usefull\n\tthis.options = options;\n\n\tthis.components = {};\n\tthis.componentsTree = null;\n\tthis.urlParams = {};\n\tthis.modules = {};\n\n\tthis.history = backbone.history;\n\n\t/*\n\t * All query parameters can be passed in a single hash using the key\n\t * referenced from the route definition (backbone queryparams will\n\t * do it for us)\n\t */\n\n\tbackbone.Router.namedParameters = this.namedParameters;\n\n\tbackbone.Router.apply(this, arguments);\n\n\tif (options.autoloadModules) {\n\t\tthis.route('*url', function(params) {\n\t\t\tthis.setModule(params);\n\t\t});\n\t}\n};\n\nRouter._initRootComponent = function() {\n\tvar RootView = View.extend({\n\t\tel: this.rootViewEl\n\t});\n\n\tthis.component({\n\t\tname: '',\n\t\tparent: null,\n\t\tView: RootView\n\t});\n};\n\nRouter._populateUrlParams = function(componentName, params) {\n\tvar urlParams = this.urlParams;\n\n\t// clean old values from urlParams object\n\tvar key;\n\tfor (key in urlParams) {\n\t\tif (_(urlParams).has(key)) {\n\t\t\tdelete urlParams[key];\n\t\t}\n\t}\n\n\tvar component = this.components[componentName];\n\n\t// populate urlParams with new params\n\treturn _(urlParams).extend(\n\t\t_(component).result('defaultUrlParams'),\n\t\tparams\n\t);\n};\n\n/*\n * Add component to router and bind it to url\n *\n * @param {Object} component\n */\n\n var componentOptions = [\n\t'url', 'name', 'parent', 'container', 'View', 'models', 'collections',\n\t'viewOptions', 'defaultUrlParams'\n];\n\nRouter.component = function(options) {\n\tvar router = this;\n\n\toptions = _({}).defaults(options, {\n\t\tparent: '',\n\t\tdefaultUrlParams: {},\n\t\tviewOptions: {},\n\t\tprocess: false\n\t});\n\n\tvar component = _(options).pick(componentOptions);\n\n\t// generate uniq component name if name is omitted\n\tif (_.isUndefined(component.name)) {\n\t\tcomponent.name = _.uniqueId('auto-named-component');\n\t}\n\n\tif (!_.isString(component.name)) {\n\t\tthrow new Error('Component `name` option should be a string');\n\t}\n\n\tif (component.name in this.components) {\n\t\tthrow new Error('Duplicate component with name \"' + component.name + '\"');\n\t}\n\n\tif (!component.View) {\n\t\tthrow new Error('Component `View` option is required');\n\t}\n\n\tif (!_.isString(component.parent) && !_.isNull(component.parent)) {\n\t\tthrow new Error('Component `parent` option should be a string or null');\n\t}\n\n\tthis.components[component.name] = component;\n\n\t// bind component to route\n\tif (!_.isUndefined(component.url)) {\n\t\tthis.route(component.url, component.name, function(params) {\n\t\t\trouter._populateUrlParams(component.name, params);\n\n\t\t\t// process components tree\n\t\t\trouter._processComponent(component.name);\n\t\t});\n\t}\n\n\t// process components tree in force mode\n\tif (options.process) {\n\t\tthis._processComponent(component.name);\n\t}\n\n\treturn this;\n};\n\nRouter._calculateComponentsTree = function(componentName, child) {\n\tvar component = this.components[componentName];\n\n\tif (!component) {\n\t\tthrow new Error('Unknown component with name \"' + componentName + '\"');\n\t}\n\n\tvar node = {name: componentName};\n\tif (child) {\n\t\tnode.child = child;\n\t}\n\n\tif (_.isString(component.parent)) {\n\t\treturn this._calculateComponentsTree(component.parent, node);\n\t} else {\n\t\treturn node;\n\t}\n};\n\nRouter._isComponentTreeNodeChanged = function(oldNode, node) {\n\tif (!oldNode || oldNode.name !== node.name || !oldNode.view) return true;\n\tvar component = this.components[node.name];\n\tif (oldNode.view instanceof component.View === false) return true;\n\tif (!oldNode.view.attached) return true;\n\treturn !oldNode.view.isUnchanged();\n};\n\nRouter._applyComponentsTree = function(params, callback) {\n\tvar self = this;\n\n\tvar parentNode = params.parentNode;\n\n\tvar iterateNode = function(oldNode, node) {\n\t\t// omit child field in new node because it will set recursive\n\t\t// and should not exist if error case\n\t\tvar childNode = node.child;\n\t\tdelete node.child;\n\n\t\tif (parentNode) {\n\t\t\tparentNode.child = node;\n\t\t} else {\n\t\t\tself.componentsTree = node;\n\t\t}\n\n\t\tif (childNode) {\n\t\t\tself._applyComponentsTree({\n\t\t\t\tparentNode: node,\n\t\t\t\toldNode: oldNode && oldNode.child || null,\n\t\t\t\tnode: childNode\n\t\t\t}, callback);\n\t\t} else {\n\t\t\tcallback();\n\t\t}\n\t};\n\n\tvar node = params.node;\n\tvar oldNode = params.oldNode;\n\tvar component = this.components[node.name];\n\n\tvar onViewResolve = function(view) {\n\t\tnode.view = view;\n\t\tview.setData();\n\n\t\tif (component.container) {\n\t\t\tif (!parentNode) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t'Parent component should exist for component with `container` option'\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tparentNode.view\n\t\t\t\t.setView(view, component.container)\n\t\t\t\t.renderViews()\n\t\t\t\t.attachViews();\n\t\t} else {\n\t\t\tview.render();\n\t\t}\n\n\t\t// stop processing old components tree\n\t\titerateNode(null, node);\n\t};\n\n\t// get view from old node\n\tvar oldView = oldNode && oldNode.view;\n\n\tif (this._isComponentTreeNodeChanged(oldNode, node)) {\n\t\tif (oldView) {\n\t\t\tif (oldView.container) {\n\t\t\t\t// remove old view if container for new view dirrent\n\t\t\t\tif (!component.container || oldView.container !== component.container) {\n\t\t\t\t\toldView.remove();\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// detach old view if it has not a container\n\t\t\t\toldView.detach();\n\t\t\t}\n\t\t}\n\n\t\t// create new view\n\t\tvar view = new (component.View)(\n\t\t\t_(component)\n\t\t\t\t.chain()\n\t\t\t\t.pick('models', 'collections')\n\t\t\t\t.defaults(_(component).result('viewOptions'))\n\t\t\t\t.extend({router: this})\n\t\t\t\t.value()\n\t\t);\n\n\t\tif (view.waiting) {\n\t\t\t// wait when view will be resolved\n\t\t\tview.once('resolve', function() {\n\t\t\t\tonViewResolve(view);\n\t\t\t});\n\t\t} else {\n\t\t\tonViewResolve(view);\n\t\t}\n\t} else {\n\t\t// get old child view if exists\n\t\tvar oldChildView = oldNode.child && oldNode.child.view;\n\n\t\t// temporary remove child node view from container\n\t\t// to prevent recursive renderViews\n\t\tvar oldChildViewContainer;\n\t\tif (oldChildView) {\n\t\t\toldChildViewContainer = oldChildView.container;\n\n\t\t\tif (oldChildViewContainer) {\n\t\t\t\toldView.removeView(oldChildView, oldChildViewContainer);\n\t\t\t}\n\t\t}\n\n\t\t// save old view to new node\n\t\tnode.view = oldView;\n\n\t\t// set data and re-render old view\n\t\toldView.setData();\n\t\toldView.render();\n\n\t\t// revert child node view\n\t\tif (oldChildView && oldChildViewContainer) {\n\t\t\toldView.setView(oldChildView, oldChildViewContainer);\n\t\t}\n\n\t\t// proprocessing old components tree\n\t\titerateNode(oldNode, node);\n\t}\n};\n\nRouter._processComponent = function(componentName, callback) {\n\tcallback = callback || _.noop;\n\n\tvar newComponentsTree = this._calculateComponentsTree(componentName);\n\n\tthis._applyComponentsTree({\n\t\tparentNode: null,\n\t\toldNode: this.componentsTree,\n\t\tnode: newComponentsTree\n\t}, callback);\n};\n\n/*\n * Override `route` to add middleware processing functionality\n */\n\nRouter.route = function(url, name, callback) {\n\tvar router = this;\n\n\tif (_.isFunction(name)) {\n\t\tcallback = name;\n\t\tname = '';\n\t}\n\n\tbackbone.Router.prototype.route.call(this, url, name, function() {\n\t\tvar args = arguments;\n\n\t\trouter._defaultMiddleware({\n\t\t\turl: url,\n\t\t\tname: name,\n\t\t\tcallback: callback\n\t\t}, function() {\n\t\t\tcallback.apply(router, args);\n\t\t});\n\t});\n};\n\n/*\n * Override `navigate`\n * @param {String} fragment\n * @param {Object} [options] - hash of params\n * @param {Object} [options.qs] - query string hash\n */\n\nRouter.navigate = function(fragment, options) {\n\toptions = options || {};\n\n\tif (fragment.indexOf(this.root) === 0) {\n\t\tfragment = fragment.substring(this.root.length);\n\t}\n\n\t// force to go to the selected fragment even if we currently on it\n\tif (options.force) {\n\t\tthis.navigate(this.nowhereUrl, {\n\t\t\treplace: options.replace,\n\t\t\ttrigger: false\n\t\t});\n\n\t\toptions = _(options).chain().omit('force').extend({replace: true}).value();\n\n\t\treturn this.navigate(fragment, options);\n\t}\n\n\t// set `trigger` to true by default\n\toptions = _(options || {}).defaults({\n\t\ttrigger: true,\n\t\tparams: {}\n\t});\n\n\t// add support of query string using `toFragment` from backbone.queryparams\n\tvar qs = options.qs;\n\n\tif (this.toFragment && qs) {\n\t\t// reject undefined and null qs parameters\n\t\t_(qs).each(function(val, key, qs) {\n\t\t\tif (val === undefined || val === null) delete qs[key];\n\t\t});\n\n\t\tfragment = this.toFragment(fragment, qs);\n\n\t\tdelete options.qs;\n\t}\n\n\tbackbone.Router.prototype.navigate.call(this, fragment, options);\n};\n\n\n/*\n * Default middleware function\n */\n\nRouter._defaultMiddleware = function(route, next) {\n\tnext();\n};\n\n/**\n * Use passed function as `middleware`\n *\n * @param {Function} middleware - middleware function,\n * `route` and `next` will be passed as arguments.\n * context (`this`) is link to the router object.\n */\n\nRouter.middleware = function(middleware) {\n\tvar router = this;\n\n\tvar defaultMiddleware = this._defaultMiddleware;\n\n\tthis._defaultMiddleware = function(route, next) {\n\t\tdefaultMiddleware.call(router, route, function() {\n\t\t\tmiddleware.call(router, route, next);\n\t\t});\n\t};\n\n\treturn this;\n};\n\n/*\n * Require module file and init it\n * @param {String} params.url Url without query string\n */\n\nRouter.setModule = function(params) {\n\tvar router = this;\n\n\tvar url = params.url;\n\tdelete params.url;\n\n\tvar moduleName = _(url.split('/')).find(_.identity) || this.defaultModuleName;\n\n\t// require module file\n\trequire([this.modulesPath + moduleName], function(moduleInit) {\n\t\t// if module is loaded first time\n\t\tif (!router.modules[moduleName]) {\n\t\t\t// init it\n\t\t\tmoduleInit(router);\n\n\t\t\t// set module init flag to true\n\t\t\trouter.modules[moduleName] = true;\n\n\t\t\t// and navigate again with force flag\n\t\t\trouter.navigate(url, {\n\t\t\t\treplace: true,\n\t\t\t\tforce: true,\n\t\t\t\tqs: params\n\t\t\t});\n\t\t}\n\t}, this.onModuleError);\n};\n\n/*\n * Start routes handling\n */\n\nRouter.start = function() {\n\tthis._initRootComponent();\n\n\tbackbone.history.start({\n\t\tpushState: this.pushState,\n\t\troot: this.root\n\t});\n};\n\nmodule.exports = backbone.Router.extend(Router);\n","'use strict';\n\nvar _ = require('underscore');\nvar backbone = require('backbone');\n\n/*\n * Take jquery or other selectors lib from backbone\n */\n\nvar $ = backbone.$;\n\n/*\n * Helpers\n */\n\nvar splice = Array.prototype.splice;\n\n/*\n * Cached regex to split keys for `delegate`.\n */\n\nvar delegateEventSplitter = /^(\\S+)\\s*(.*)$/;\n\nvar nestedEventTypes = ['views', 'collections', 'models'];\n\n/*\n * Base View class extend backbone View class\n */\n\nvar View = {\n\t/*\n\t * Helpers (Object|Fuction) which will be passed to the template\n\t */\n\n\ttemplateHelpers: {}\n};\n\nvar viewOptions = [\n\t'models', 'collections', 'views', 'events', 'data', 'router',\n\t'templateHelpers'\n];\n\n/*\n * @override constructor\n *\n * @param {Object} [options]\n */\n\nView.constructor = function(options) {\n\tvar self = this;\n\n\toptions = options || {};\n\n\t// nested views hash is empty by default\n\tthis.views = {};\n\n\tthis.data = this.data || {};\n\n\t// populate View instance with fields from options\n\t_.extend(this, _.pick(options, viewOptions));\n\t// save original options, it is sometimes usefull\n\tthis.options = options;\n\n\tif (this.template && !_.isFunction(this.template)) {\n\t\tthrow new Error('View `template` option should be a function');\n\t}\n\n\t// normalize nested views hash\n\tthis._normalizeViews();\n\n\t// create special hash for all events for fast search\n\tthis._prepareNestedEvents();\n\n\t// views are in the resolved state by default\n\tthis.waiting = false;\n\n\t// views are not attached by default\n\tthis.attached = false;\n\n\t// apply default backbone.View constructor\n\tbackbone.View.apply(this, arguments);\n\n\t// we should delegate events after constructor call because collections and\n\t// models was created in the initialize method\n\n\t// delegate events for each collection\n\tif (this.collections) {\n\t\t_(this.collections).each(function(collection, key) {\n\t\t\tself.delegateNestedEvents('collections', key, collection);\n\t\t});\n\t}\n\n\t// delegate events for each model\n\tif (this.models) {\n\t\t_(this.models).each(function(model, key) {\n\t\t\tself.delegateNestedEvents('models', key, model);\n\t\t});\n\t}\n};\n\n/*\n * Method to change view data.\n * Router calls this method to update view data.\n *\n * @param {Object} [data]\n */\n\nView.setData = function(data) {\n\tif (data) this.data = data;\n};\n\n/*\n * Method to check that view is changed and should be re-rendered\n * Returns true by default, override this method for specific logic\n */\n\nView.isUnchanged = function() {\n\treturn true;\n};\n\n/*\n * Method to switch view to waiting state\n */\n\nView.wait = function() {\n\tvar self = this;\n\tthis.waiting = true;\n\n\treturn function() {\n\t\tself.waiting = false;\n\t\tself.trigger('resolve');\n\t};\n};\n\n/*\n * @override `render`\n */\n\nView.render = function(options) {\n\tconsole.log('>>>      render: %o %o', this, this.$el)\n\n\t// stop rendering if view in `waiting` state, resolve it first\n\tif (this.waiting) return this;\n\n\toptions = options || {};\n\n\tif (this.template) {\n\t\t// re-render template only if it exists and if it is necessary\n\t\tif (options.force || !this.attached || !this.isUnchanged()) {\n\t\t\t// detach view from DOM element\n\t\t\tthis.detach();\n\n\t\t\t// render template with data\n\t\t\tvar html = this.renderTemplate(this.template, this.getTemplateData());\n\n\t\t\t// render html with jqeury (or other lib) call\n\t\t\tvar $el = $(html);\n\n\t\t\tif (!$el.length) {\n\t\t\t\tthrow new Error('View template produce empty html');\n\t\t\t}\n\n\t\t\tif ($el.length > 1) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t'View template produce html with more than one root elements'\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tthis.setElement($el);\n\t\t}\n\t} else {\n\t\t// re-ensure element if it is not ensured\n\t\tif (!this.$el.length) this._ensureElement();\n\t}\n\n\t// render nested views\n\tthis.renderViews(options);\n\n\tif (!this.parent || this.$container) {\n\t\t// attach all nested views first\n\t\tthis.attachViews();\n\n\t\t// attach current view\n\t\tthis.attach();\n\t}\n\n\t// return this for chaining\n\treturn this;\n};\n\n/*\n * Get data for template rendering\n */\n\nView.getTemplateData = function() {\n\treturn this.data;\n};\n\n/*\n * Render template with data. Returns html.\n *\n * @param {function} template for rendering\n * @params {object} data for rendering\n */\n\nView.renderTemplate = function(template, data) {\n\tdata = _(this).chain().result('templateHelpers').extend(data).value();\n\n\t// get html\n\treturn template(data);\n};\n\n/*\n * Render all nested view\n*/\n\nView.renderViews = function(options) {\n\tconsole.log('>>> renderViews: %o %o', this, this.$el)\n\n\tvar self = this;\n\n\t// iterate by each views group\n\t_(this.views).each(function(viewsGroup, container) {\n\t\t// return if view group is empty\n\t\tif (!viewsGroup.length) return;\n\n\t\t// call render for each views from view group\n\t\t_(viewsGroup).each(function(view) {\n\t\t\tview.render(options);\n\t\t});\n\n\t\t// get first container or $el\n\t\tvar $container = container ? self.$(container).first() : self.$el;\n\n\t\tif (!$container.length) {\n\t\t\tthrow new Error('Container \"' + container + '\" is not found');\n\t\t}\n\n\t\tvar containerEl = $container.get(0);\n\n\t\t// dom is changed if some view from group is not in current container\n\t\tvar domChanged = _(viewsGroup).some(function(view) {\n\t\t\treturn (\n\t\t\t\t!view.attached ||\n\t\t\t\t!view.$container ||\n\t\t\t\tview.$container.get(0) !== containerEl\n\t\t\t);\n\t\t});\n\n\t\tif (domChanged) {\n\t\t\t// re-append views group to container\n\t\t\tvar $els = [];\n\n\t\t\t_(viewsGroup).each(function(view) {\n\t\t\t\tview.$container = $container;\n\t\t\t\t$els.push(view.$el);\n\t\t\t});\n\n\t\t\t// @TODO: add some rendering optimizations here\n\n\t\t\t// put all views to $container\n\t\t\t$container.append($els);\n\t\t}\n\t});\n\n\t// return this for chaining\n\treturn this;\n};\n\n/*\n * Set view to views group or replace some view in specified position\n * If index is passed it replace only one view with index in views group\n *\n * @param {View} view - view to set\n * @param {String} container - container to set\n * @param {Number} [index] - index of view to replace\n */\n\nView.setView = function(view, container, index) {\n\treturn this._updateViews([view], container, index);\n};\n\n/*\n * Set views to views group or replace some view in specified position\n * If index is passed it replace only one view with index in views group\n *\n * @param {View[]} views - views to set\n * @param {String} container - container to set\n * @param {Number} [index] - index of view to replace\n */\n\nView.setViews = function(views, container, index) {\n\treturn this._updateViews(views, container, index);\n};\n\n/*\n * Alias for setView\n *\n * @param {View} view - view to set\n * @param {String} container - container to set\n * @param {Number} [index] - index of view to replace\n */\n\nView.replaceView = function(view, container, index) {\n\treturn this._updateViews([view], container, index);\n};\n\n/*\n * Alias for setViews\n *\n * @param {View[]} views - views to set\n * @param {String} container - container to set\n * @param {Number} [index] - index of view to replace\n */\n\nView.replaceViews = function(views, container, index) {\n\treturn this._updateViews(views, container, index);\n};\n\n/*\n * Append view to end of views group\n * This method is alias for insertView without index argument\n *\n * @param {View} view - view to append\n * @param {String} container - container of views group\n */\n\nView.appendView = function(view, container) {\n\treturn this._insertViews([view], container);\n};\n\n/*\n * Append views to end of views group\n * This method is alias for insertViews without index argument\n *\n * @param {View[]} views - views to append\n * @param {String} container - container of views group\n */\n\nView.appendViews = function(views, container) {\n\treturn this._insertViews(views, container);\n};\n\n/*\n * Prepend view to start of views group\n * This method is alias for insertView with `0` as index argument value\n *\n * @param {View} views - view to prepend\n * @param {String} container - container of views group\n */\n\nView.prependView = function(view, container) {\n\treturn this._insertViews([view], container, 0);\n};\n\n/*\n * Prepend views to start of views group\n * This method is alias for insertViews with `0` as index argument value\n *\n * @param {View[]} views - view to prepend\n * @param {String} container - container of views group\n */\n\nView.prependViews = function(views, container) {\n\treturn this._insertViews(views, container, 0);\n};\n\n/*\n * Insert view to specified position of views group\n * If index is not passed method insert view to the end of views group (append)\n *\n * @param {View} view - view to insert\n * @param {String} container - container of views group\n * @param {Number} [index] - position in views group\n */\n\nView.insertView = function(view, container, index) {\n\treturn this._insertViews([view], container, index);\n};\n\n/*\n * Insert views to specified position of views group\n * If index is not passed method insert views to the end of views group (append)\n *\n * @param {View[]} views - views to insert\n * @param {String} container - container of views group\n * @param {Number} [index] - position in views group\n */\n\nView.insertViews = function(views, container, index) {\n\treturn this._insertViews(views, container, index);\n};\n\n/*\n * Remove view from views group by index or view instance\n * If index is passed it remove view in the index position\n *\n * @param {View} [view] - view to remove\n * @param {String} container - container of views group\n * @param {Number} [index] - index of view in views group\n */\n\nView.removeView = function(view, container, index) {\n\tif (arguments.length < 2) {\n\t\tthrow new Error('\"view\" or \"index\" arguments must be specified');\n\t}\n\n\tif (_.isString(view)) {\n\t\tindex = container;\n\t\tcontainer = view;\n\t\tview = this.getView(container, index);\n\t\tif (!view) return this;\n\t}\n\n\treturn this._removeViews([view], container);\n};\n\n/*\n * Remove views from views group\n * If views are passed remove only these views\n * Othervise remove all views from container\n *\n * @param {View[]} [views] - views to remove\n * @param {String} container - container of views group\n */\n\nView.removeViews = function(views, container) {\n\tif (_.isString(views)) {\n\t\tcontainer = views;\n\t\tviews = this.getViews(container);\n\t}\n\n\treturn this._removeViews(views, container);\n};\n\n/*\n * Get single view by container and index\n *\n * @param {String} container - container of views group\n * @param {Number} [index] - index of view in views group\n */\n\nView.getView = function(container, index) {\n\treturn this.getViews(container)[index || 0] || null;\n};\n\n/*\n * Get views group by container\n *\n * @param {String} container - container of views group\n */\n\nView.getViews = function(container) {\n\treturn _.clone(this.views[container]) || [];\n};\n\nView._insertViews = function(views, container, index) {\n\tconsole.log('>>> _insertViews:', views, container, index)\n\n\tvar self = this;\n\n\tvar viewsGroup = this.getViews(container);\n\n\t_(views).each(function(view) {\n\t\tif (view.parent) {\n\t\t\tview.parent.removeView(view, view.container);\n\t\t}\n\t});\n\n\tif (viewsGroup.length) {\n\t\t// if index is not specified set it value as last index of views group\n\t\tif (typeof index === 'undefined') {\n\t\t\tindex = viewsGroup.length;\n\t\t}\n\n\t\t// insert views\n\t\tsplice.apply(this.views[container], [index, 0].concat(views));\n\t} else {\n\t\t// if group is empty - set views as whole views group value\n\t\tthis.views[container] = views;\n\t}\n\n\t// set each view parent to current\n\t_(views).each(function(view) {\n\t\tview.parent = self;\n\t\tview.container = container;\n\t});\n\n\tthis.delegateNestedEvents('views', container, views);\n\n\treturn this;\n};\n\nView._updateViews = function(views, container, index) {\n\tconsole.log('>>> _updateViews:', views, container, index)\n\n\tvar viewsGroup = this.getViews(container);\n\n\tif (viewsGroup.length) {\n\t\tvar removedViews = [];\n\n\t\t// if views group is not empty\n\t\tif (typeof index !== 'undefined') {\n\t\t\t// if index is specified\n\t\t\t// remove view from specific position\n\t\t\tremovedViews = this.getView(container, index);\n\t\t\tremovedViews = removedViews ? [removedViews] : [];\n\t\t} else {\n\t\t\t// if no index - remove all views from views group\n\t\t\tremovedViews = viewsGroup;\n\t\t}\n\n\t\tif (removedViews.length) {\n\t\t\t// if remove views array is not empty\n\t\t\t// remove from parent\n\t\t\tthis._removeViews(removedViews, container);\n\n\t\t\t// and remove views\n\t\t\t_(removedViews).each(function(view) {\n\t\t\t\tview.remove();\n\t\t\t});\n\t\t}\n\t}\n\n\t// insert new views\n\treturn this._insertViews(views, container, index);\n};\n\nView._removeViews = function(views, container) {\n\tconsole.log('>>> _removeViews:', views, container)\n\n\tvar self = this;\n\n\tvar viewsGroup = this.getViews(container);\n\n\tif (!viewsGroup.length) return this;\n\n\tvar viewObjs = _.chain(views).uniq().map(function(view) {\n\t\t\treturn {\n\t\t\t\tview: view,\n\t\t\t\tindex: _.indexOf(viewsGroup, view)\n\t\t\t};\n\t\t}).filter(function(viewObj) {\n\t\t\treturn viewObj.index >= 0;\n\t\t}).sortBy(function(viewObj) {\n\t\t\treturn -viewObj.index;\n\t\t}).value();\n\n\tif (!viewObjs.length) return this;\n\n\t_(viewObjs).each(function(viewObj) {\n\t\tvar view = viewObj.view;\n\n\t\t// remove item from group\n\t\tsplice.call(self.views[container], viewObj.index, 1);\n\n\t\t// undelegate all nested entity events\n\t\tself.undelegateNestedEvents(view);\n\n\t\t// unset view parent\n\t\tdelete view.parent;\n\t});\n\n\treturn this;\n};\n\n/*\n * @override setElement\n * Original setElement do undelegateEvents/delegateEvents, we remove it\n * because we have special detach/attach methods for this\n */\n\nView.setElement = function(element) {\n\tvar $previousEl = this.$el;\n\n\tthis._setElement(element);\n\n\t// insert html to $el\n\tif ($previousEl && this.$container) {\n\t\t$previousEl.replaceWith(this.$el);\n\t}\n\n\treturn this;\n};\n\n/*\n * @override delegateEvents\n */\n\nView.delegateEvents = function(events) {\n\tevents = events || _.result(this, 'events');\n\tif (!events) return this;\n\tevents = _(events).omit(nestedEventTypes);\n\treturn backbone.View.prototype.delegateEvents.call(this, events);\n};\n\nView.delegateNestedEvents = function(type, key, entities) {\n\tvar self = this;\n\tif (!_.isArray(entities)) entities = [entities];\n\tvar listeners = this._nestedEventsHash[type][key];\n\tif (listeners) {\n\t\t_(listeners).each(function(listener) {\n\t\t\t_(entities).each(function(entity) {\n\t\t\t\tself.listenTo(entity, listener.eventName, listener.handler);\n\t\t\t});\n\t\t});\n\t}\n\treturn this;\n};\n\nView.undelegateNestedEvents = function(entities) {\n\tvar self = this;\n\tif (!_.isArray(entities)) entities = [entities];\n\t_(entities).each(function(entity) {\n\t\tself.stopListening(entity);\n\t});\n\treturn this;\n};\n\nView._prepareNestedEvents = function(events) {\n\tvar self = this;\n\n\t// Hash for nested views events fast search\n\tthis._nestedEventsHash = {};\n\t_(nestedEventTypes).each(function(type) {\n\t\tself._nestedEventsHash[type] = {};\n\t});\n\n\tevents = events || _.result(this, 'events');\n\tif (!events) return;\n\n\t// bind all prefixed events to view then call native delegate events\n\t_(nestedEventTypes).each(function(type) {\n\t\tvar typeEventsHash = self._nestedEventsHash[type];\n\n\t\tif (!_(events).has(type) || !_.isObject(events[type])) return;\n\n\t\t_(events[type]).each(function(method, key) {\n\t\t\tif (!_.isFunction(method)) method = self[method];\n\t\t\tif (!method) return;\n\t\t\tvar match = key.match(delegateEventSplitter);\n\t\t\tvar eventName = match[1];\n\t\t\tvar entityKeys = match[2].replace(/ *, */g, ',').split(',');\n\t\t\tmethod = _.bind(method, self);\n\n\t\t\t// fill _nestedEventsHash\n\t\t\t_(entityKeys).each(function(entityKey) {\n\t\t\t\ttypeEventsHash[entityKey] = typeEventsHash[entityKey] || [];\n\t\t\t\ttypeEventsHash[entityKey].push({\n\t\t\t\t\teventName: eventName,\n\t\t\t\t\thandler: method\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t});\n};\n\n/*\n * Wrap all non-array view groups to arrays with one element\n */\n\nView._normalizeViews = function() {\n\tvar self = this;\n\n\t_(this.views).each(function(views, container) {\n\t\tif (!_.isArray(views)) {\n\t\t\tself.views[container] = [views];\n\t\t}\n\t});\n};\n\nView.attachViews = function() {\n\t// iterate by each nested views groups\n\t_(this.views).each(function(viewsGroup) {\n\t\t// return if views group is empty\n\t\tif (!viewsGroup.length) return;\n\n\t\t// call attach method for each nested view from views group\n\t\t_(viewsGroup).each(function(view) {\n\t\t\t// recursive attach all nested views\n\t\t\tview.attachViews();\n\n\t\t\t// attach current view\n\t\t\tview.attach();\n\t\t});\n\t});\n\n\t// return this for chaining\n\treturn this;\n};\n\n/*\n * afterAttach is empty by default.\n * It called after attach call\n * Override it to add some specific logic for DOM manipulations.\n */\n\nView.afterAttach = function() {\n\treturn this;\n};\n\n/*\n * Detach all previous views and attach new view to current view $el\n */\n\nView.attach = function() {\n\t// return if current view is already attached\n\tif (this.attached) return this;\n\n\t// detach previous view\n\tvar previousView = this.$el.data('esencia-view');\n\tif (previousView) previousView.detach();\n\n\t// attach current view and set attr\n\tthis.$el.data('esencia-view', this).attr('esencia-view', this.cid);\n\n\t// enable all DOM events\n\tthis.delegateEvents();\n\n\tthis.attached = true;\n\n\t// do some user afterAttach actions\n\tconsole.log('>>>      attach: %o %o', this, this.$el)\n\tthis.afterAttach();\n\n\treturn this;\n};\n\nView.detachViews = function() {\n\t// iterate by each views groups\n\t_(this.views).each(function(viewsGroup) {\n\t\t// return if views group is empty\n\t\tif (!viewsGroup.length) return;\n\n\t\t// call detach method for each nested view from views group\n\t\t_(viewsGroup).each(function(view) {\n\t\t\t// recursive detach all nested views\n\t\t\tview.detachViews();\n\n\t\t\t// detach current view\n\t\t\tview.detach();\n\t\t});\n\t});\n\n\t// return this for chaining\n\treturn this;\n};\n\n/*\n * beforeDetach is empty by default.\n * It called before detach calls\n * Override it to add some specific logic before view detach from dom.\n */\n\nView.beforeDetach = function() {\n\treturn this;\n};\n\n/*\n * Detach view from current view $el\n */\n\nView.detach = function() {\n\t// return if current view is not already attached\n\tif (!this.attached) return this;\n\n\t// do some user beforeDetach actions\n\tconsole.log('>>>      detach: %o %o', this, this.$el)\n\tthis.beforeDetach();\n\n\t// remove attr and data from $el\n\tthis.$el.removeData('esencia-view').removeAttr('esencia-view');\n\n\t// disable all DOM events\n\tthis.undelegateEvents();\n\n\tthis.attached = false;\n\n\t// return this for chaining\n\treturn this;\n};\n\nView.remove = function() {\n\t// remove current view from parent view container\n\tif (this.parent) {\n\t\tthis.parent.removeView(this, this.container);\n\t}\n\n\t// detach all nested views first\n\tthis.detachViews();\n\n\t// detach current view\n\tthis.detach();\n\n\t// remove DOM element\n\treturn backbone.View.prototype.remove.call(this);\n};\n\n/*\n * Get view, that attached to closest element with attr `esencia-view`\n *\n * @param {String | $} selector\n */\n\nView.getClosestView = function(selector) {\n\tvar $selector = $(selector);\n\n\tif (!$selector.is('[esencia-view]')) {\n\t\t$selector = $selector.closest('[esencia-view]');\n\t}\n\n\treturn $selector.length ? $selector.data('esencia-view') : null;\n};\n\nmodule.exports = backbone.View.extend(View);\n"],"sourceRoot":"."}