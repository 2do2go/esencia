{"version":3,"sources":["lib/collection.js"],"names":["_","_require","backbone","Collection","baseMethods","execMethodType","sync","method","model","options","contains","params","type","dataType","contentType","processData","url","result","urlError","charAt","length","data","isObject","JSON","stringify","xhr","ajax","extend","trigger","prototype","call","exec","clone","collection","success","resp","error","Error","module","exports"],"mappings":"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","file":"collection.js","sourceRoot":".","sourcesContent":["'use strict';\n\nvar _ = require('underscore');\nvar backbone = require('backbone');\n\nvar Collection = {};\n\n// base methods map\nvar baseMethods = ['create', 'update', 'patch', 'delete', 'read'];\n\nvar execMethodType = 'PUT';\n\n/*\n * Override `sync` to add exec custom method functionality\n */\n\nCollection.sync = function(method, model, options) {\n\t// if sync is called for custom exec method\n\tif (!_.contains(baseMethods, method)) {\n\t\toptions = options || {};\n\n\t\tvar params = {\n\t\t\ttype: execMethodType,\n\t\t\tdataType: 'json',\n\t\t\tcontentType: 'application/json',\n\t\t\tprocessData: false\n\t\t};\n\n\t\t// Ensure that we have a URL and add method name to it\n\t\tif (!options.url) {\n\t\t\tvar url = _.result(model, 'url') || urlError();\n\t\t\tparams.url = url + (url.charAt(url.length - 1) === '/' ? '' : '/') + method;\n\t\t}\n\n\t\t// stringify data to json\n\t\tif (options.data && _.isObject(options.data)) {\n\t\t\toptions.data = JSON.stringify(options.data);\n\t\t}\n\n\t\t// Make the request, allowing the user to override any Ajax options.\n\t\tvar xhr = options.xhr = backbone.ajax(_.extend(params, options));\n\t\tmodel.trigger('request', model, xhr, options);\n\t\treturn xhr;\n\t} else {\n\t\t// call default backbone.Collection sync for base REST methods\n\t\treturn backbone.Collection.prototype.sync.call(this, method, model, options);\n\t}\n};\n\n/*\n * Exec custom non-REST method on collection\n * It trigger `exec:[method]` event after success collection sync\n *\n * @param {String} method\n * @param {Object} options\n */\n\nCollection.exec = function(method, options) {\n\toptions = options ? _.clone(options) : {};\n\n\tvar collection = this;\n\tvar success = options.success;\n\toptions.success = function(resp) {\n\t\tif (success) success(collection, resp, options);\n\t\tcollection.trigger('exec:' + method, collection, resp, options);\n\t};\n\n\tvar error = options.error;\n\toptions.error = function(resp) {\n\t\tif (error) error(collection, resp, options);\n\t\tcollection.trigger('error', collection, resp, options);\n\t};\n\n\treturn this.sync(method, this, options);\n};\n\n// Throw an error when a URL is needed, and none is supplied.\nvar urlError = function() {\n\tthrow new Error('A \"url\" property or function must be specified');\n};\n\nmodule.exports = backbone.Collection.extend(Collection);\n"]}