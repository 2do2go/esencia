{"version":3,"sources":["view.js","lib/view.js"],"names":["factory","define","amd","exports","module","require","this","Esencia","View","_","Backbone","__external__","__external_Backbone","_require","id","cache","modules","call","backbone","$","splice","Array","prototype","delegateEventSplitter","nestedEventTypes","templateHelpers","viewOptions","wait","self","_waiting","trigger","isWaiting","constructor","options","views","data","extend","pick","template","isFunction","Error","_normalizeViews","_prepareNestedEvents","apply","arguments","collections","each","collection","key","delegateNestedEvents","models","model","setData","isUnchanged","render","force","isAttached","_createTemplateElement","_isAfterAttachNeeded","attach","renderViews","$el","parent","length","_afterAttachViews","getTemplateData","renderTemplate","chain","result","value","templateData","html","$html","$newEl","first","replaceWith","setElement","viewsGroup","container","view","$container","some","is","append","pluck","setView","setViews","index","_updateViews","replaceView","replaceViews","appendView","appendViews","insertViews","prependView","prependViews","insertView","removeView","removeViews","isString","getView","getViews","clone","method","isArray","removedViews","remove","concat","viewObjs","uniq","map","indexOf","filter","viewObj","sortBy","undelegateNestedEvents","delegateEvents","events","omit","type","entities","listeners","_nestedEventsHash","listener","entity","listenTo","eventName","handler","stopListening","typeEventsHash","has","isObject","match","entityKeys","replace","split","bind","entityKey","push","Boolean","afterAttach","previousView","detach","attr","cid","_detachViews","beforeDetach","removeData","removeAttr","undelegateEvents","_removeElement","getClosestView","selector","$selector","closest"],"mappings":"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","file":"view.min.js","sourcesContent":["(function (factory) {\n    if (typeof define === 'function' && define.amd) {\n        define([\n            'underscore',\n            'backbone'\n        ], factory);\n    } else if (typeof exports === 'object') {\n        module.exports = factory(require('underscore'), require('backbone'));\n    } else {\n        this.Esencia.View = factory(_, Backbone);\n    }\n}(function (__external__, __external_Backbone) {\n    var global = this, define;\n    function _require(id) {\n        var module = _require.cache[id];\n        if (!module) {\n            var exports = {};\n            module = _require.cache[id] = {\n                id: id,\n                exports: exports\n            };\n            _require.modules[id].call(exports, module, exports);\n        }\n        return module.exports;\n    }\n    _require.cache = [];\n    _require.modules = [\n        function (module, exports) {\n            'use strict';\n            var _ = _require(2);\n            var backbone = _require(1);\n            var $ = backbone.$;\n            var splice = Array.prototype.splice;\n            var delegateEventSplitter = /^(\\S+)\\s*(.*)$/;\n            var nestedEventTypes = [\n                    'views',\n                    'collections',\n                    'models'\n                ];\n            var View = { templateHelpers: {} };\n            var viewOptions = [\n                    'models',\n                    'collections',\n                    'views',\n                    'events',\n                    'data',\n                    'router',\n                    'templateHelpers'\n                ];\n            View.wait = function () {\n                var self = this;\n                this._waiting = true;\n                return function () {\n                    self._waiting = false;\n                    self.trigger('resolve');\n                };\n            };\n            View.isWaiting = function () {\n                return this._waiting;\n            };\n            View.constructor = function (options) {\n                var self = this;\n                options = options || {};\n                this.views = {};\n                this.data = this.data || {};\n                _.extend(this, _.pick(options, viewOptions));\n                this.options = options;\n                if (this.template && !_.isFunction(this.template)) {\n                    throw new Error('View `template` option should be a function');\n                }\n                this._normalizeViews();\n                this._prepareNestedEvents();\n                this._waiting = false;\n                backbone.View.apply(this, arguments);\n                if (this.collections) {\n                    _(this.collections).each(function (collection, key) {\n                        self.delegateNestedEvents('collections', key, collection);\n                    });\n                }\n                if (this.models) {\n                    _(this.models).each(function (model, key) {\n                        self.delegateNestedEvents('models', key, model);\n                    });\n                }\n            };\n            View.setData = function (data) {\n                if (data)\n                    this.data = data;\n            };\n            View.isUnchanged = function () {\n                return true;\n            };\n            View.render = function (options) {\n                if (this.isWaiting())\n                    return this;\n                options = options || {};\n                if (this.template && (options.force || !this.isAttached() || !this.isUnchanged())) {\n                    this._createTemplateElement();\n                    this._isAfterAttachNeeded = true;\n                }\n                this.attach();\n                this.renderViews(options);\n                if (this.$el.parent().length) {\n                    this._afterAttachViews();\n                }\n                return this;\n            };\n            View.getTemplateData = function () {\n                return this.data;\n            };\n            View.renderTemplate = function (template, data) {\n                data = _(this).chain().result('templateHelpers').extend(data).value();\n                return template(data);\n            };\n            View._createTemplateElement = function () {\n                var templateData = this.getTemplateData();\n                var html = this.renderTemplate(this.template, templateData);\n                var $html = $(html);\n                if ($html.length > 1) {\n                }\n                var $newEl = $html.first();\n                if (this.$el.parent().length) {\n                    this.$el.replaceWith($newEl);\n                }\n                this.setElement($newEl, true);\n                return this;\n            };\n            View.renderViews = function (options) {\n                var self = this;\n                _(this.views).each(function (viewsGroup, container) {\n                    if (!viewsGroup.length)\n                        return;\n                    _(viewsGroup).each(function (view) {\n                        view.render(options);\n                    });\n                    var $container = container ? self.$(container).first() : self.$el;\n                    if (!$container.length) {\n                        throw new Error('Container \"' + container + '\" is not found');\n                    }\n                    if (_(viewsGroup).some(function (view) {\n                            return !view.isAttached() || !$container.is(view.$el.parent());\n                        })) {\n                        $container.append(_(viewsGroup).pluck('$el'));\n                    }\n                });\n            };\n            View.setView = View.setViews = function (views, container, index) {\n                return this._updateViews('set', views, container, index);\n            };\n            View.replaceView = View.replaceViews = function (views, container, index) {\n                return this.setViews.apply(this, arguments);\n            };\n            View.appendView = View.appendViews = function (views, container) {\n                return this.insertViews(views, container);\n            };\n            View.prependView = View.prependViews = function (views, container) {\n                return this.insertViews(views, container, 0);\n            };\n            View.insertView = View.insertViews = function (views, container, index) {\n                return this._updateViews('insert', views, container, index);\n            };\n            View.removeView = View.removeViews = function (views, container, index) {\n                if (arguments.length < 2) {\n                    throw new Error('\"views\" or \"index\" arguments must be specified');\n                }\n                if (_.isString(views)) {\n                    index = container;\n                    container = views;\n                    views = this.getView(container, index);\n                    if (!views)\n                        return this;\n                }\n                return this._updateViews('remove', views, container);\n            };\n            View.getView = function (container, index) {\n                return this.getViews(container)[index || 0] || null;\n            };\n            View.getViews = function (container) {\n                return _.clone(this.views[container]) || [];\n            };\n            View._updateViews = function (method, views, container, index) {\n                var self = this;\n                if (!views) {\n                    throw new Error('\"views\" argument must be specified');\n                }\n                if (!_.isArray(views))\n                    views = [views];\n                var viewsGroup = this.getViews(container);\n                switch (method) {\n                case 'set':\n                    if (viewsGroup.length) {\n                        var removedViews = [];\n                        if (typeof index !== 'undefined') {\n                            removedViews = this.getView(container, index);\n                            removedViews = removedViews ? [removedViews] : [];\n                        } else {\n                            removedViews = viewsGroup;\n                        }\n                        if (removedViews.length) {\n                            this._updateViews('remove', removedViews, container);\n                            _(removedViews).each(function (view) {\n                                view.remove();\n                            });\n                        }\n                    }\n                    this._updateViews('insert', views, container, index);\n                    break;\n                case 'insert':\n                    _(views).each(function (view) {\n                        if (view.parent) {\n                            view.parent.removeView(view, view.container);\n                        }\n                    });\n                    if (viewsGroup.length) {\n                        if (typeof index === 'undefined') {\n                            index = viewsGroup.length;\n                        }\n                        splice.apply(this.views[container], [\n                            index,\n                            0\n                        ].concat(views));\n                    } else {\n                        this.views[container] = views;\n                    }\n                    _(views).each(function (view) {\n                        view.parent = self;\n                        view.container = container;\n                    });\n                    this.delegateNestedEvents('views', container, views);\n                    break;\n                case 'remove':\n                    if (!viewsGroup.length)\n                        break;\n                    var viewObjs = _.chain(views).uniq().map(function (view) {\n                            return {\n                                view: view,\n                                index: _.indexOf(viewsGroup, view)\n                            };\n                        }).filter(function (viewObj) {\n                            return viewObj.index >= 0;\n                        }).sortBy(function (viewObj) {\n                            return -viewObj.index;\n                        }).value();\n                    if (!viewObjs.length)\n                        break;\n                    _(viewObjs).each(function (viewObj) {\n                        var view = viewObj.view;\n                        splice.call(self.views[container], viewObj.index, 1);\n                        self.undelegateNestedEvents(view);\n                        delete view.parent;\n                    });\n                }\n                return this;\n            };\n            View.delegateEvents = function (events) {\n                events = events || _.result(this, 'events');\n                if (!events)\n                    return this;\n                events = _(events).omit(nestedEventTypes);\n                return backbone.View.prototype.delegateEvents.call(this, events);\n            };\n            View.delegateNestedEvents = function (type, key, entities) {\n                var self = this;\n                if (!_.isArray(entities))\n                    entities = [entities];\n                var listeners = this._nestedEventsHash[type][key];\n                if (listeners) {\n                    _(listeners).each(function (listener) {\n                        _(entities).each(function (entity) {\n                            self.listenTo(entity, listener.eventName, listener.handler);\n                        });\n                    });\n                }\n                return this;\n            };\n            View.undelegateNestedEvents = function (entities) {\n                var self = this;\n                if (!_.isArray(entities))\n                    entities = [entities];\n                _(entities).each(function (entity) {\n                    self.stopListening(entity);\n                });\n                return this;\n            };\n            View._prepareNestedEvents = function (events) {\n                var self = this;\n                this._nestedEventsHash = {};\n                _(nestedEventTypes).each(function (type) {\n                    self._nestedEventsHash[type] = {};\n                });\n                events = events || _.result(this, 'events');\n                if (!events)\n                    return;\n                _(nestedEventTypes).each(function (type) {\n                    var typeEventsHash = self._nestedEventsHash[type];\n                    if (!_(events).has(type) || !_.isObject(events[type]))\n                        return;\n                    _(events[type]).each(function (method, key) {\n                        if (!_.isFunction(method))\n                            method = self[method];\n                        if (!method)\n                            return;\n                        var match = key.match(delegateEventSplitter);\n                        var eventName = match[1];\n                        var entityKeys = match[2].replace(/ *, */g, ',').split(',');\n                        method = _.bind(method, self);\n                        _(entityKeys).each(function (entityKey) {\n                            typeEventsHash[entityKey] = typeEventsHash[entityKey] || [];\n                            typeEventsHash[entityKey].push({\n                                eventName: eventName,\n                                handler: method\n                            });\n                        });\n                    });\n                });\n            };\n            View._normalizeViews = function () {\n                var self = this;\n                _(this.views).each(function (views, container) {\n                    if (!_.isArray(views)) {\n                        self.views[container] = [views];\n                    }\n                });\n            };\n            View.isAttached = function () {\n                var view = this.$el.data('esencia-view');\n                return Boolean(view && view === this);\n            };\n            View._afterAttachViews = function () {\n                _(this.views).each(function (viewsGroup) {\n                    if (!viewsGroup.length)\n                        return;\n                    _(viewsGroup).each(function (view) {\n                        view._afterAttachViews();\n                    });\n                });\n                if (this._isAfterAttachNeeded) {\n                    delete this._isAfterAttachNeeded;\n                    this.afterAttach();\n                }\n            };\n            View.afterAttach = function () {\n                return this;\n            };\n            View.attach = function () {\n                if (this.isAttached())\n                    return this;\n                var previousView = this.$el.data('esencia-view');\n                if (previousView)\n                    previousView.detach();\n                this.$el.data('esencia-view', this).attr('esencia-view', this.cid);\n                return this;\n            };\n            View._detachViews = function () {\n                _(this.views).each(function (viewsGroup) {\n                    if (!viewsGroup.length)\n                        return;\n                    _(viewsGroup).each(function (view) {\n                        view.detach();\n                    });\n                });\n            };\n            View.beforeDetach = function () {\n                return this;\n            };\n            View.detach = function () {\n                if (!this.isAttached())\n                    return this;\n                this._detachViews();\n                this.beforeDetach();\n                this.$el.removeData('esencia-view').removeAttr('esencia-view');\n                this.undelegateEvents();\n                this.stopListening();\n                return this;\n            };\n            View.remove = function () {\n                if (this.parent) {\n                    this.parent.removeView(this, this.container);\n                }\n                this.detach();\n                this._removeElement();\n                return this;\n            };\n            View.getClosestView = function (selector) {\n                var $selector = $(selector);\n                if (!$selector.is('[esencia-view]')) {\n                    $selector = $selector.closest('[esencia-view]');\n                }\n                return $selector.length ? $selector.data('esencia-view') : null;\n            };\n            module.exports = backbone.View.extend(View);\n        },\n        function (module, exports) {\n            module.exports = __external_Backbone;\n        },\n        function (module, exports) {\n            module.exports = __external__;\n        }\n    ];\n    return _require(0);\n}));\n//# sourceMappingURL=view.js.map\n","'use strict';\n\nvar _ = require('underscore');\nvar backbone = require('backbone');\n\n/*\n * Take jquery or other selectors lib from backbone\n */\n\nvar $ = backbone.$;\n\n/*\n * Helpers\n */\n\nvar splice = Array.prototype.splice;\n\n/*\n * Cached regex to split keys for `delegate`.\n */\n\nvar delegateEventSplitter = /^(\\S+)\\s*(.*)$/;\n\nvar nestedEventTypes = ['views', 'collections', 'models'];\n\n/*\n * Base View class extend backbone View class\n */\n\nvar View = {\n\t/*\n\t * Helpers (Object|Fuction) which will be passed to the template\n\t */\n\n\ttemplateHelpers: {}\n};\n\nvar viewOptions = [\n\t'models', 'collections', 'views', 'events', 'data', 'router',\n\t'templateHelpers'\n];\n\nView.wait = function() {\n\tvar self = this;\n\tthis._waiting = true;\n\n\treturn function() {\n\t\tself._waiting = false;\n\t\tself.trigger('resolve');\n\t};\n};\n\nView.isWaiting = function() {\n\treturn this._waiting;\n};\n\n/*\n * Override constructor\n *\n * @param {Object} [options]\n */\n\nView.constructor = function(options) {\n\tvar self = this;\n\n\toptions = options || {};\n\n\t// Nested views hash is empty by default\n\tthis.views = {};\n\n\tthis.data = this.data || {};\n\n\t// populate View instance with fields from options\n\t_.extend(this, _.pick(options, viewOptions));\n\t// save original options, it is sometimes usefull\n\tthis.options = options;\n\n\tif (this.template && !_.isFunction(this.template)) {\n\t\tthrow new Error('View `template` option should be a function');\n\t}\n\n\tthis._normalizeViews();\n\tthis._prepareNestedEvents();\n\n\tthis._waiting = false;\n\n\t// apply backbone.View constructor\n\tbackbone.View.apply(this, arguments);\n\n\t// delegate events for each collection\n\tif (this.collections) {\n\t\t_(this.collections).each(function(collection, key) {\n\t\t\tself.delegateNestedEvents('collections', key, collection);\n\t\t});\n\t}\n\n\t// delegate events for each model\n\tif (this.models) {\n\t\t_(this.models).each(function(model, key) {\n\t\t\tself.delegateNestedEvents('models', key, model);\n\t\t});\n\t}\n};\n\nView.setData = function(data) {\n\tif (data) this.data = data;\n};\n\nView.isUnchanged = function() {\n\treturn true;\n};\n\n/*\n * Override `render`\n */\n\nView.render = function(options) {\n\tif (this.isWaiting()) return this;\n\n\toptions = options || {};\n\n\tif (\n\t\tthis.template &&\n\t\t(options.force || !this.isAttached() || !this.isUnchanged())\n\t) {\n\t\tthis._createTemplateElement();\n\n\t\t// set tricky flag that used for calling after render\n\t\t// only after _createTemplateElement\n\t\tthis._isAfterAttachNeeded = true;\n\t}\n\n\t// attach view to dom element\n\tthis.attach();\n\n\t// render nested views\n\tthis.renderViews(options);\n\n\t// call after attach method if el was set in parent view\n\tif (this.$el.parent().length) {\n\t\tthis._afterAttachViews();\n\t}\n\n\treturn this;\n};\n\n/*\n * Get data for template rendering\n */\n\nView.getTemplateData = function() {\n\treturn this.data;\n};\n\n/*\n * Render template with data. Returns html.\n *\n * @param {function} template for rendering\n * @params {object} data for rendering\n */\n\nView.renderTemplate = function(template, data) {\n\tdata = _(this).chain().result('templateHelpers').extend(data).value();\n\n\t// get html\n\treturn template(data);\n};\n\n/*\n * Set html to $el element\n *\n * @param {object} [data] data for rendering (return value of getData)\n */\n\nView._createTemplateElement = function() {\n\tvar templateData = this.getTemplateData();\n\tvar html = this.renderTemplate(this.template, templateData);\n\tvar $html = $(html);\n\n\tif ($html.length > 1) {\n\t\t// @TODO: show warning here or something better?\n\t}\n\n\tvar $newEl = $html.first();\n\n\t// insert html to $el\n\tif (this.$el.parent().length) {\n\t\tthis.$el.replaceWith($newEl);\n\t}\n\n\tthis.setElement($newEl, true);\n\n\treturn this;\n};\n\n\n/*\n * Render all nested view\n *\n * @TODO: add some rendering optimizations\n*/\n\nView.renderViews = function(options) {\n\tvar self = this;\n\n\t// iterate by each views group\n\t_(this.views).each(function(viewsGroup, container) {\n\t\t// return if view group is empty\n\t\tif (!viewsGroup.length) return;\n\n\t\t// call render for each views from view group\n\t\t_(viewsGroup).each(function(view) {\n\t\t\tview.render(options);\n\t\t});\n\n\t\t// get first container or $el\n\t\tvar $container = container ? self.$(container).first() : self.$el;\n\n\t\tif (!$container.length) {\n\t\t\tthrow new Error('Container \"' + container + '\" is not found');\n\t\t}\n\n\t\tif (_(viewsGroup).some(function(view) {\n\t\t\treturn !view.isAttached() || !$container.is(view.$el.parent());\n\t\t})) {\n\t\t\t// put to $container\n\t\t\t$container.append(_(viewsGroup).pluck('$el'));\n\t\t}\n\t});\n};\n\n/*\n * Set view(s) to views group or replace some view in specified position\n * If index is passed it replace only one view with index in views group\n *\n * @param {View | View[]} views - view(s) to set\n * @param {String} container - container to set\n * @param {Number} [index] - index of view to replace\n */\n\nView.setView = View.setViews = function(views, container, index) {\n\treturn this._updateViews('set', views, container, index);\n};\n\n/*\n * Alias for setViews\n */\n\nView.replaceView = View.replaceViews = function(views, container, index) {\n\treturn this.setViews.apply(this, arguments);\n};\n\n/*\n * Append view(s) to end of views group\n * This method is alias for insertViews without index argument\n *\n * @param {View | View[]} views\n * @param {String} container - container of views group\n */\n\nView.appendView = View.appendViews = function(views, container) {\n\treturn this.insertViews(views, container);\n};\n\n/*\n * Prepend view(s) to start of views group\n * This method is alias for insertViews with `0` as index argument value\n *\n * @param {View | View[]} views\n * @param {String} container - container of views group\n */\n\nView.prependView = View.prependViews = function(views, container) {\n\treturn this.insertViews(views, container, 0);\n};\n\n/*\n * Insert view(s) to specified position of views group\n * If index is not passed views will insert to end of views group (append)\n *\n * @param {View | View[]} views\n * @param {String} container - container of views group\n * @param {Number} [index] - position in views group\n */\n\nView.insertView = View.insertViews = function(views, container, index) {\n\treturn this._updateViews('insert', views, container, index);\n};\n\n/*\n * Remove view(s) from views group by index or views instances list\n * If index is passed it remove only one view in index position\n * If views is passed it remove some of them, that places in views group\n *\n * @param {View | View[]} [views] - view(s) to remove\n * @param {String} container - container of views group\n * @param {Number} [index] - index of view in views group\n */\n\nView.removeView = View.removeViews = function(views, container, index) {\n\tif (arguments.length < 2) {\n\t\tthrow new Error('\"views\" or \"index\" arguments must be specified');\n\t}\n\n\tif (_.isString(views)) {\n\t\tindex = container;\n\t\tcontainer = views;\n\t\tviews = this.getView(container, index);\n\t\tif (!views) return this;\n\t}\n\n\treturn this._updateViews('remove', views, container);\n};\n\n/*\n * Get single view by container and index\n *\n * @param {String} container - container of views group\n * @param {Number} [index] - index of view in views group\n */\n\nView.getView = function(container, index) {\n\treturn this.getViews(container)[index || 0] || null;\n};\n\n/*\n * Get views group by container\n *\n * @param {String} container - container of views group\n */\n\nView.getViews = function(container) {\n\treturn _.clone(this.views[container]) || [];\n};\n\n/*\n * Common method for updating view(s) in views group with method\n *  `set`, `insert` or `remove`.\n *\n * @param {String} method - `set`, `insert` or `remove`\n * @paran {View | View[]} views\n * @param {String} container - container of views group\n * @param {Number} [index] - index of view in group\n */\n\nView._updateViews = function(method, views, container, index) {\n\tvar self = this;\n\n\tif (!views) {\n\t\tthrow new Error('\"views\" argument must be specified');\n\t}\n\n\tif (!_.isArray(views)) views = [views];\n\n\tvar viewsGroup = this.getViews(container);\n\n\tswitch (method) {\n\t\tcase 'set':\n\t\t\tif (viewsGroup.length) {\n\t\t\t\tvar removedViews = [];\n\n\t\t\t\t// if views group is not empty\n\t\t\t\tif (typeof index !== 'undefined') {\n\t\t\t\t\t// if index is specified\n\t\t\t\t\t// remove view from specific position\n\t\t\t\t\tremovedViews = this.getView(container, index);\n\t\t\t\t\tremovedViews = removedViews ? [removedViews] : [];\n\t\t\t\t} else {\n\t\t\t\t\t// if no index - remove all views from views group\n\t\t\t\t\tremovedViews = viewsGroup;\n\t\t\t\t}\n\n\t\t\t\tif (removedViews.length) {\n\t\t\t\t\t// if remove views array is not empty\n\t\t\t\t\t// remove from parent\n\t\t\t\t\tthis._updateViews('remove', removedViews, container);\n\n\t\t\t\t\t// and remove views\n\t\t\t\t\t_(removedViews).each(function(view) {\n\t\t\t\t\t\tview.remove();\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// insert new views\n\t\t\tthis._updateViews('insert', views, container, index);\n\n\t\t\tbreak;\n\n\t\tcase 'insert':\n\t\t\t_(views).each(function(view) {\n\t\t\t\tif (view.parent) {\n\t\t\t\t\tview.parent.removeView(view, view.container);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tif (viewsGroup.length) {\n\t\t\t\t// if index is not specified set it value as last index of views group\n\t\t\t\tif (typeof index === 'undefined') {\n\t\t\t\t\tindex = viewsGroup.length;\n\t\t\t\t}\n\n\t\t\t\t// insert views\n\t\t\t\tsplice.apply(this.views[container], [index, 0].concat(views));\n\t\t\t} else {\n\t\t\t\t// if group is empty - set views as whole views group value\n\t\t\t\tthis.views[container] = views;\n\t\t\t}\n\n\t\t\t// set each view parent to current\n\t\t\t_(views).each(function(view) {\n\t\t\t\tview.parent = self;\n\t\t\t\tview.container = container;\n\t\t\t});\n\n\t\t\tthis.delegateNestedEvents('views', container, views);\n\n\t\t\tbreak;\n\n\t\tcase 'remove':\n\t\t\tif (!viewsGroup.length) break;\n\n\t\t\tvar viewObjs = _.chain(views).uniq().map(function(view) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tview: view,\n\t\t\t\t\t\tindex: _.indexOf(viewsGroup, view)\n\t\t\t\t\t};\n\t\t\t\t}).filter(function(viewObj) {\n\t\t\t\t\treturn viewObj.index >= 0;\n\t\t\t\t}).sortBy(function(viewObj) {\n\t\t\t\t\treturn -viewObj.index;\n\t\t\t\t}).value();\n\n\t\t\tif (!viewObjs.length) break;\n\n\t\t\t_(viewObjs).each(function(viewObj) {\n\t\t\t\tvar view = viewObj.view;\n\n\t\t\t\t// remove item from group\n\t\t\t\tsplice.call(self.views[container], viewObj.index, 1);\n\n\t\t\t\t// undelegate all nested entity events\n\t\t\t\tself.undelegateNestedEvents(view);\n\n\t\t\t\t// unset view parent\n\t\t\t\tdelete view.parent;\n\t\t\t});\n\t}\n\n\treturn this;\n};\n\n/*\n * Override delegateEvents\n */\n\nView.delegateEvents = function(events) {\n\tevents = events || _.result(this, 'events');\n\tif (!events) return this;\n\tevents = _(events).omit(nestedEventTypes);\n\treturn backbone.View.prototype.delegateEvents.call(this, events);\n};\n\nView.delegateNestedEvents = function(type, key, entities) {\n\tvar self = this;\n\tif (!_.isArray(entities)) entities = [entities];\n\tvar listeners = this._nestedEventsHash[type][key];\n\tif (listeners) {\n\t\t_(listeners).each(function(listener) {\n\t\t\t_(entities).each(function(entity) {\n\t\t\t\tself.listenTo(entity, listener.eventName, listener.handler);\n\t\t\t});\n\t\t});\n\t}\n\treturn this;\n};\n\nView.undelegateNestedEvents = function(entities) {\n\tvar self = this;\n\tif (!_.isArray(entities)) entities = [entities];\n\t_(entities).each(function(entity) {\n\t\tself.stopListening(entity);\n\t});\n\treturn this;\n};\n\nView._prepareNestedEvents = function(events) {\n\tvar self = this;\n\n\t// Hash for nested views events fast search\n\tthis._nestedEventsHash = {};\n\t_(nestedEventTypes).each(function(type) {\n\t\tself._nestedEventsHash[type] = {};\n\t});\n\n\tevents = events || _.result(this, 'events');\n\tif (!events) return;\n\n\t// bind all prefixed events to view then call native delegate events\n\t_(nestedEventTypes).each(function(type) {\n\t\tvar typeEventsHash = self._nestedEventsHash[type];\n\n\t\tif (!_(events).has(type) || !_.isObject(events[type])) return;\n\n\t\t_(events[type]).each(function(method, key) {\n\t\t\tif (!_.isFunction(method)) method = self[method];\n\t\t\tif (!method) return;\n\t\t\tvar match = key.match(delegateEventSplitter);\n\t\t\tvar eventName = match[1];\n\t\t\tvar entityKeys = match[2].replace(/ *, */g, ',').split(',');\n\t\t\tmethod = _.bind(method, self);\n\n\t\t\t// fill _nestedEventsHash\n\t\t\t_(entityKeys).each(function(entityKey) {\n\t\t\t\ttypeEventsHash[entityKey] = typeEventsHash[entityKey] || [];\n\t\t\t\ttypeEventsHash[entityKey].push({\n\t\t\t\t\teventName: eventName,\n\t\t\t\t\thandler: method\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t});\n};\n\n/*\n * Wrap all non-array views groups to arrays with one element\n */\n\nView._normalizeViews = function() {\n\tvar self = this;\n\n\t_(this.views).each(function(views, container) {\n\t\tif (!_.isArray(views)) {\n\t\t\tself.views[container] = [views];\n\t\t}\n\t});\n};\n\n/*\n * Get view attached state\n */\n\nView.isAttached = function() {\n\tvar view = this.$el.data('esencia-view');\n\treturn Boolean(view && view === this);\n};\n\nView._afterAttachViews = function() {\n\t// iterate by each nested views groups\n\t_(this.views).each(function(viewsGroup) {\n\t\t// return if views group is empty\n\t\tif (!viewsGroup.length) return;\n\n\t\t// call _afterAttachViews for each views from views group\n\t\t_(viewsGroup).each(function(view) {\n\t\t\tview._afterAttachViews();\n\t\t});\n\t});\n\n\t// call afterAttach for current view\n\tif (this._isAfterAttachNeeded) {\n\t\t// remove after attach flag\n\t\tdelete this._isAfterAttachNeeded;\n\n\t\t// call after attach\n\t\tthis.afterAttach();\n\t}\n};\n\n/*\n * afterAttach is empty by default.\n * It called after _createTemplateElement, renderViews and attach calls\n * Override it to add some specific logic after template render.\n */\n\nView.afterAttach = function() {\n\treturn this;\n};\n\n/*\n * Detach all previous views and attach new view to current view $el\n */\n\nView.attach = function() {\n\t// return if current view is already attached\n\tif (this.isAttached()) return this;\n\n\t// detach previous instance attached to this element\n\tvar previousView = this.$el.data('esencia-view');\n\tif (previousView) previousView.detach();\n\n\t// attach current view and set attr\n\tthis.$el.data('esencia-view', this).attr('esencia-view', this.cid);\n\n\treturn this;\n};\n\nView._detachViews = function() {\n\t// iterate by each views groups\n\t_(this.views).each(function(viewsGroup) {\n\t\t// return if views group is empty\n\t\tif (!viewsGroup.length) return;\n\n\t\t// call _detachViews for each nested view from views group\n\t\t_(viewsGroup).each(function(view) {\n\t\t\tview.detach();\n\t\t});\n\t});\n};\n\n/*\n * beforeDetach is empty by default.\n * It called before detach calls\n * Override it to add some specific logic before view detach from dom.\n */\n\nView.beforeDetach = function() {\n\treturn this;\n};\n\n/*\n * Detach view from current view $el\n */\n\nView.detach = function() {\n\t// return if current view is not already attached\n\tif (!this.isAttached()) return this;\n\n\t// detach all nested views\n\tthis._detachViews();\n\n\t// do some user actions\n\tthis.beforeDetach();\n\n\t// remove attr and data from $el\n\tthis.$el.removeData('esencia-view').removeAttr('esencia-view');\n\n\t// disable all events\n\tthis.undelegateEvents();\n\tthis.stopListening();\n\n\treturn this;\n};\n\nView.remove = function() {\n\tif (this.parent) {\n\t\tthis.parent.removeView(this, this.container);\n\t}\n\tthis.detach();\n\tthis._removeElement();\n\treturn this;\n};\n\n/*\n * Get view, that attached to closest element with attr `esencia-view`\n *\n * @param {String | $} selector\n */\n\nView.getClosestView = function(selector) {\n\tvar $selector = $(selector);\n\n\tif (!$selector.is('[esencia-view]')) {\n\t\t$selector = $selector.closest('[esencia-view]');\n\t}\n\n\treturn $selector.length ? $selector.data('esencia-view') : null;\n};\n\nmodule.exports = backbone.View.extend(View);\n"],"sourceRoot":"."}