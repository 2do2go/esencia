{"version":3,"sources":["view.js","lib/view.js"],"names":["factory","define","amd","exports","module","require","this","Esencia","View","_","Backbone","__external__","__external_Backbone","_require","id","cache","modules","call","backbone","$","splice","Array","prototype","delegateEventSplitter","nestedEventTypes","templateHelpers","viewOptions","constructor","options","self","views","data","extend","pick","template","isFunction","Error","_normalizeViews","_prepareNestedEvents","waiting","attached","apply","arguments","collections","each","collection","key","delegateNestedEvents","models","model","setData","isUnchanged","wait","trigger","render","console","log","$el","force","detach","html","renderTemplate","getTemplateData","length","setElement","_ensureElement","renderViews","parent","$container","attachViews","attach","chain","result","value","viewsGroup","container","view","first","containerEl","get","domChanged","some","$els","push","append","setView","index","_updateViews","setViews","replaceView","replaceViews","appendView","_insertViews","appendViews","prependView","prependViews","insertView","insertViews","removeView","isString","getView","_removeViews","removeViews","getViews","clone","concat","removedViews","remove","viewObjs","uniq","map","indexOf","filter","viewObj","sortBy","undelegateNestedEvents","element","$previousEl","_setElement","replaceWith","delegateEvents","events","omit","type","entities","isArray","listeners","_nestedEventsHash","listener","entity","listenTo","eventName","handler","stopListening","typeEventsHash","has","isObject","method","match","entityKeys","replace","split","bind","entityKey","afterAttach","previousView","attr","cid","detachViews","beforeDetach","removeData","removeAttr","undelegateEvents","getClosestView","selector","$selector","is","closest"],"mappings":"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","file":"view.min.js","sourcesContent":["(function (factory) {\n    if (typeof define === 'function' && define.amd) {\n        define([\n            'underscore',\n            'backbone'\n        ], factory);\n    } else if (typeof exports === 'object') {\n        module.exports = factory(require('underscore'), require('backbone'));\n    } else {\n        this.Esencia.View = factory(_, Backbone);\n    }\n}(function (__external__, __external_Backbone) {\n    var global = this, define;\n    function _require(id) {\n        var module = _require.cache[id];\n        if (!module) {\n            var exports = {};\n            module = _require.cache[id] = {\n                id: id,\n                exports: exports\n            };\n            _require.modules[id].call(exports, module, exports);\n        }\n        return module.exports;\n    }\n    _require.cache = [];\n    _require.modules = [\n        function (module, exports) {\n            'use strict';\n            var _ = _require(2);\n            var backbone = _require(1);\n            var $ = backbone.$;\n            var splice = Array.prototype.splice;\n            var delegateEventSplitter = /^(\\S+)\\s*(.*)$/;\n            var nestedEventTypes = [\n                    'views',\n                    'collections',\n                    'models'\n                ];\n            var View = { templateHelpers: {} };\n            var viewOptions = [\n                    'models',\n                    'collections',\n                    'views',\n                    'events',\n                    'data',\n                    'router',\n                    'templateHelpers'\n                ];\n            View.constructor = function (options) {\n                var self = this;\n                options = options || {};\n                this.views = {};\n                this.data = this.data || {};\n                _.extend(this, _.pick(options, viewOptions));\n                this.options = options;\n                if (this.template && !_.isFunction(this.template)) {\n                    throw new Error('View `template` option should be a function');\n                }\n                this._normalizeViews();\n                this._prepareNestedEvents();\n                this.waiting = false;\n                this.attached = false;\n                backbone.View.apply(this, arguments);\n                if (this.collections) {\n                    _(this.collections).each(function (collection, key) {\n                        self.delegateNestedEvents('collections', key, collection);\n                    });\n                }\n                if (this.models) {\n                    _(this.models).each(function (model, key) {\n                        self.delegateNestedEvents('models', key, model);\n                    });\n                }\n            };\n            View.setData = function (data) {\n                if (data)\n                    this.data = data;\n            };\n            View.isUnchanged = function () {\n                return true;\n            };\n            View.wait = function () {\n                var self = this;\n                this.waiting = true;\n                return function () {\n                    self.waiting = false;\n                    self.trigger('resolve');\n                };\n            };\n            View.render = function (options) {\n                console.log('>>>      render: %o %o', this, this.$el);\n                if (this.waiting)\n                    return this;\n                options = options || {};\n                if (this.template) {\n                    if (options.force || !this.attached || !this.isUnchanged()) {\n                        this.detach();\n                        var html = this.renderTemplate(this.template, this.getTemplateData());\n                        var $el = $(html);\n                        if (!$el.length) {\n                            throw new Error('View template produce empty html');\n                        }\n                        if ($el.length > 1) {\n                            throw new Error('View template produce html with more than one root elements');\n                        }\n                        this.setElement($el);\n                    }\n                } else {\n                    if (!this.$el.length)\n                        this._ensureElement();\n                }\n                this.renderViews(options);\n                if (!this.parent || this.$container) {\n                    this.attachViews();\n                    this.attach();\n                }\n                return this;\n            };\n            View.getTemplateData = function () {\n                return this.data;\n            };\n            View.renderTemplate = function (template, data) {\n                data = _(this).chain().result('templateHelpers').extend(data).value();\n                return template(data);\n            };\n            View.renderViews = function (options) {\n                console.log('>>> renderViews: %o %o', this, this.$el);\n                var self = this;\n                _(this.views).each(function (viewsGroup, container) {\n                    if (!viewsGroup.length)\n                        return;\n                    _(viewsGroup).each(function (view) {\n                        view.render(options);\n                    });\n                    var $container = container ? self.$(container).first() : self.$el;\n                    if (!$container.length) {\n                        throw new Error('Container \"' + container + '\" is not found');\n                    }\n                    var containerEl = $container.get(0);\n                    var domChanged = _(viewsGroup).some(function (view) {\n                            return !view.attached || !view.$container || view.$container.get(0) !== containerEl;\n                        });\n                    if (domChanged) {\n                        var $els = [];\n                        _(viewsGroup).each(function (view) {\n                            view.$container = $container;\n                            $els.push(view.$el);\n                        });\n                        $container.append($els);\n                    }\n                });\n                return this;\n            };\n            View.setView = function (view, container, index) {\n                return this._updateViews([view], container, index);\n            };\n            View.setViews = function (views, container, index) {\n                return this._updateViews(views, container, index);\n            };\n            View.replaceView = function (view, container, index) {\n                return this._updateViews([view], container, index);\n            };\n            View.replaceViews = function (views, container, index) {\n                return this._updateViews(views, container, index);\n            };\n            View.appendView = function (view, container) {\n                return this._insertViews([view], container);\n            };\n            View.appendViews = function (views, container) {\n                return this._insertViews(views, container);\n            };\n            View.prependView = function (view, container) {\n                return this._insertViews([view], container, 0);\n            };\n            View.prependViews = function (views, container) {\n                return this._insertViews(views, container, 0);\n            };\n            View.insertView = function (view, container, index) {\n                return this._insertViews([view], container, index);\n            };\n            View.insertViews = function (views, container, index) {\n                return this._insertViews(views, container, index);\n            };\n            View.removeView = function (view, container, index) {\n                if (arguments.length < 2) {\n                    throw new Error('\"view\" or \"index\" arguments must be specified');\n                }\n                if (_.isString(view)) {\n                    index = container;\n                    container = view;\n                    view = this.getView(container, index);\n                    if (!view)\n                        return this;\n                }\n                return this._removeViews([view], container);\n            };\n            View.removeViews = function (views, container) {\n                if (_.isString(views)) {\n                    container = views;\n                    views = this.getViews(container);\n                }\n                return this._removeViews(views, container);\n            };\n            View.getView = function (container, index) {\n                return this.getViews(container)[index || 0] || null;\n            };\n            View.getViews = function (container) {\n                return _.clone(this.views[container]) || [];\n            };\n            View._insertViews = function (views, container, index) {\n                console.log('>>> _insertViews:', views, container, index);\n                var self = this;\n                var viewsGroup = this.getViews(container);\n                _(views).each(function (view) {\n                    if (view.parent) {\n                        view.parent.removeView(view, view.container);\n                    }\n                });\n                if (viewsGroup.length) {\n                    if (typeof index === 'undefined') {\n                        index = viewsGroup.length;\n                    }\n                    splice.apply(this.views[container], [\n                        index,\n                        0\n                    ].concat(views));\n                } else {\n                    this.views[container] = views;\n                }\n                _(views).each(function (view) {\n                    view.parent = self;\n                    view.container = container;\n                });\n                this.delegateNestedEvents('views', container, views);\n                return this;\n            };\n            View._updateViews = function (views, container, index) {\n                console.log('>>> _updateViews:', views, container, index);\n                var viewsGroup = this.getViews(container);\n                if (viewsGroup.length) {\n                    var removedViews = [];\n                    if (typeof index !== 'undefined') {\n                        removedViews = this.getView(container, index);\n                        removedViews = removedViews ? [removedViews] : [];\n                    } else {\n                        removedViews = viewsGroup;\n                    }\n                    if (removedViews.length) {\n                        this._removeViews(removedViews, container);\n                        _(removedViews).each(function (view) {\n                            view.remove();\n                        });\n                    }\n                }\n                return this._insertViews(views, container, index);\n            };\n            View._removeViews = function (views, container) {\n                console.log('>>> _removeViews:', views, container);\n                var self = this;\n                var viewsGroup = this.getViews(container);\n                if (!viewsGroup.length)\n                    return this;\n                var viewObjs = _.chain(views).uniq().map(function (view) {\n                        return {\n                            view: view,\n                            index: _.indexOf(viewsGroup, view)\n                        };\n                    }).filter(function (viewObj) {\n                        return viewObj.index >= 0;\n                    }).sortBy(function (viewObj) {\n                        return -viewObj.index;\n                    }).value();\n                if (!viewObjs.length)\n                    return this;\n                _(viewObjs).each(function (viewObj) {\n                    var view = viewObj.view;\n                    splice.call(self.views[container], viewObj.index, 1);\n                    self.undelegateNestedEvents(view);\n                    delete view.parent;\n                });\n                return this;\n            };\n            View.setElement = function (element) {\n                var $previousEl = this.$el;\n                this._setElement(element);\n                if ($previousEl && this.$container) {\n                    $previousEl.replaceWith(this.$el);\n                }\n                return this;\n            };\n            View.delegateEvents = function (events) {\n                events = events || _.result(this, 'events');\n                if (!events)\n                    return this;\n                events = _(events).omit(nestedEventTypes);\n                return backbone.View.prototype.delegateEvents.call(this, events);\n            };\n            View.delegateNestedEvents = function (type, key, entities) {\n                var self = this;\n                if (!_.isArray(entities))\n                    entities = [entities];\n                var listeners = this._nestedEventsHash[type][key];\n                if (listeners) {\n                    _(listeners).each(function (listener) {\n                        _(entities).each(function (entity) {\n                            self.listenTo(entity, listener.eventName, listener.handler);\n                        });\n                    });\n                }\n                return this;\n            };\n            View.undelegateNestedEvents = function (entities) {\n                var self = this;\n                if (!_.isArray(entities))\n                    entities = [entities];\n                _(entities).each(function (entity) {\n                    self.stopListening(entity);\n                });\n                return this;\n            };\n            View._prepareNestedEvents = function (events) {\n                var self = this;\n                this._nestedEventsHash = {};\n                _(nestedEventTypes).each(function (type) {\n                    self._nestedEventsHash[type] = {};\n                });\n                events = events || _.result(this, 'events');\n                if (!events)\n                    return;\n                _(nestedEventTypes).each(function (type) {\n                    var typeEventsHash = self._nestedEventsHash[type];\n                    if (!_(events).has(type) || !_.isObject(events[type]))\n                        return;\n                    _(events[type]).each(function (method, key) {\n                        if (!_.isFunction(method))\n                            method = self[method];\n                        if (!method)\n                            return;\n                        var match = key.match(delegateEventSplitter);\n                        var eventName = match[1];\n                        var entityKeys = match[2].replace(/ *, */g, ',').split(',');\n                        method = _.bind(method, self);\n                        _(entityKeys).each(function (entityKey) {\n                            typeEventsHash[entityKey] = typeEventsHash[entityKey] || [];\n                            typeEventsHash[entityKey].push({\n                                eventName: eventName,\n                                handler: method\n                            });\n                        });\n                    });\n                });\n            };\n            View._normalizeViews = function () {\n                var self = this;\n                _(this.views).each(function (views, container) {\n                    if (!_.isArray(views)) {\n                        self.views[container] = [views];\n                    }\n                });\n            };\n            View.attachViews = function () {\n                _(this.views).each(function (viewsGroup) {\n                    if (!viewsGroup.length)\n                        return;\n                    _(viewsGroup).each(function (view) {\n                        view.attachViews();\n                        view.attach();\n                    });\n                });\n                return this;\n            };\n            View.afterAttach = function () {\n                return this;\n            };\n            View.attach = function () {\n                if (this.attached)\n                    return this;\n                var previousView = this.$el.data('esencia-view');\n                if (previousView)\n                    previousView.detach();\n                this.$el.data('esencia-view', this).attr('esencia-view', this.cid);\n                this.delegateEvents();\n                this.attached = true;\n                console.log('>>>      attach: %o %o', this, this.$el);\n                this.afterAttach();\n                return this;\n            };\n            View.detachViews = function () {\n                _(this.views).each(function (viewsGroup) {\n                    if (!viewsGroup.length)\n                        return;\n                    _(viewsGroup).each(function (view) {\n                        view.detachViews();\n                        view.detach();\n                    });\n                });\n                return this;\n            };\n            View.beforeDetach = function () {\n                return this;\n            };\n            View.detach = function () {\n                if (!this.attached)\n                    return this;\n                console.log('>>>      detach: %o %o', this, this.$el);\n                this.beforeDetach();\n                this.$el.removeData('esencia-view').removeAttr('esencia-view');\n                this.undelegateEvents();\n                this.attached = false;\n                return this;\n            };\n            View.remove = function () {\n                if (this.parent) {\n                    this.parent.removeView(this, this.container);\n                }\n                this.detachViews();\n                this.detach();\n                return backbone.View.prototype.remove.call(this);\n            };\n            View.getClosestView = function (selector) {\n                var $selector = $(selector);\n                if (!$selector.is('[esencia-view]')) {\n                    $selector = $selector.closest('[esencia-view]');\n                }\n                return $selector.length ? $selector.data('esencia-view') : null;\n            };\n            module.exports = backbone.View.extend(View);\n        },\n        function (module, exports) {\n            module.exports = __external_Backbone;\n        },\n        function (module, exports) {\n            module.exports = __external__;\n        }\n    ];\n    return _require(0);\n}));\n//# sourceMappingURL=view.js.map\n","'use strict';\n\nvar _ = require('underscore');\nvar backbone = require('backbone');\n\n/*\n * Take jquery or other selectors lib from backbone\n */\n\nvar $ = backbone.$;\n\n/*\n * Helpers\n */\n\nvar splice = Array.prototype.splice;\n\n/*\n * Cached regex to split keys for `delegate`.\n */\n\nvar delegateEventSplitter = /^(\\S+)\\s*(.*)$/;\n\nvar nestedEventTypes = ['views', 'collections', 'models'];\n\n/*\n * Base View class extend backbone View class\n */\n\nvar View = {\n\t/*\n\t * Helpers (Object|Fuction) which will be passed to the template\n\t */\n\n\ttemplateHelpers: {}\n};\n\nvar viewOptions = [\n\t'models', 'collections', 'views', 'events', 'data', 'router',\n\t'templateHelpers'\n];\n\n/*\n * @override constructor\n *\n * @param {Object} [options]\n */\n\nView.constructor = function(options) {\n\tvar self = this;\n\n\toptions = options || {};\n\n\t// nested views hash is empty by default\n\tthis.views = {};\n\n\tthis.data = this.data || {};\n\n\t// populate View instance with fields from options\n\t_.extend(this, _.pick(options, viewOptions));\n\t// save original options, it is sometimes usefull\n\tthis.options = options;\n\n\tif (this.template && !_.isFunction(this.template)) {\n\t\tthrow new Error('View `template` option should be a function');\n\t}\n\n\t// normalize nested views hash\n\tthis._normalizeViews();\n\n\t// create special hash for all events for fast search\n\tthis._prepareNestedEvents();\n\n\t// views are in the resolved state by default\n\tthis.waiting = false;\n\n\t// views are not attached by default\n\tthis.attached = false;\n\n\t// apply default backbone.View constructor\n\tbackbone.View.apply(this, arguments);\n\n\t// we should delegate events after constructor call because collections and\n\t// models was created in the initialize method\n\n\t// delegate events for each collection\n\tif (this.collections) {\n\t\t_(this.collections).each(function(collection, key) {\n\t\t\tself.delegateNestedEvents('collections', key, collection);\n\t\t});\n\t}\n\n\t// delegate events for each model\n\tif (this.models) {\n\t\t_(this.models).each(function(model, key) {\n\t\t\tself.delegateNestedEvents('models', key, model);\n\t\t});\n\t}\n};\n\n/*\n * Method to change view data.\n * Router calls this method to update view data.\n *\n * @param {Object} [data]\n */\n\nView.setData = function(data) {\n\tif (data) this.data = data;\n};\n\n/*\n * Method to check that view is changed and should be re-rendered\n * Returns true by default, override this method for specific logic\n */\n\nView.isUnchanged = function() {\n\treturn true;\n};\n\n/*\n * Method to switch view to waiting state\n */\n\nView.wait = function() {\n\tvar self = this;\n\tthis.waiting = true;\n\n\treturn function() {\n\t\tself.waiting = false;\n\t\tself.trigger('resolve');\n\t};\n};\n\n/*\n * @override `render`\n */\n\nView.render = function(options) {\n\tconsole.log('>>>      render: %o %o', this, this.$el)\n\n\t// stop rendering if view in `waiting` state, resolve it first\n\tif (this.waiting) return this;\n\n\toptions = options || {};\n\n\tif (this.template) {\n\t\t// re-render template only if it exists and if it is necessary\n\t\tif (options.force || !this.attached || !this.isUnchanged()) {\n\t\t\t// detach view from DOM element\n\t\t\tthis.detach();\n\n\t\t\t// render template with data\n\t\t\tvar html = this.renderTemplate(this.template, this.getTemplateData());\n\n\t\t\t// render html with jqeury (or other lib) call\n\t\t\tvar $el = $(html);\n\n\t\t\tif (!$el.length) {\n\t\t\t\tthrow new Error('View template produce empty html');\n\t\t\t}\n\n\t\t\tif ($el.length > 1) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t'View template produce html with more than one root elements'\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tthis.setElement($el);\n\t\t}\n\t} else {\n\t\t// re-ensure element if it is not ensured\n\t\tif (!this.$el.length) this._ensureElement();\n\t}\n\n\t// render nested views\n\tthis.renderViews(options);\n\n\tif (!this.parent || this.$container) {\n\t\t// attach all nested views first\n\t\tthis.attachViews();\n\n\t\t// attach current view\n\t\tthis.attach();\n\t}\n\n\t// return this for chaining\n\treturn this;\n};\n\n/*\n * Get data for template rendering\n */\n\nView.getTemplateData = function() {\n\treturn this.data;\n};\n\n/*\n * Render template with data. Returns html.\n *\n * @param {function} template for rendering\n * @params {object} data for rendering\n */\n\nView.renderTemplate = function(template, data) {\n\tdata = _(this).chain().result('templateHelpers').extend(data).value();\n\n\t// get html\n\treturn template(data);\n};\n\n/*\n * Render all nested view\n*/\n\nView.renderViews = function(options) {\n\tconsole.log('>>> renderViews: %o %o', this, this.$el)\n\n\tvar self = this;\n\n\t// iterate by each views group\n\t_(this.views).each(function(viewsGroup, container) {\n\t\t// return if view group is empty\n\t\tif (!viewsGroup.length) return;\n\n\t\t// call render for each views from view group\n\t\t_(viewsGroup).each(function(view) {\n\t\t\tview.render(options);\n\t\t});\n\n\t\t// get first container or $el\n\t\tvar $container = container ? self.$(container).first() : self.$el;\n\n\t\tif (!$container.length) {\n\t\t\tthrow new Error('Container \"' + container + '\" is not found');\n\t\t}\n\n\t\tvar containerEl = $container.get(0);\n\n\t\t// dom is changed if some view from group is not in current container\n\t\tvar domChanged = _(viewsGroup).some(function(view) {\n\t\t\treturn (\n\t\t\t\t!view.attached ||\n\t\t\t\t!view.$container ||\n\t\t\t\tview.$container.get(0) !== containerEl\n\t\t\t);\n\t\t});\n\n\t\tif (domChanged) {\n\t\t\t// re-append views group to container\n\t\t\tvar $els = [];\n\n\t\t\t_(viewsGroup).each(function(view) {\n\t\t\t\tview.$container = $container;\n\t\t\t\t$els.push(view.$el);\n\t\t\t});\n\n\t\t\t// @TODO: add some rendering optimizations here\n\n\t\t\t// put all views to $container\n\t\t\t$container.append($els);\n\t\t}\n\t});\n\n\t// return this for chaining\n\treturn this;\n};\n\n/*\n * Set view to views group or replace some view in specified position\n * If index is passed it replace only one view with index in views group\n *\n * @param {View} view - view to set\n * @param {String} container - container to set\n * @param {Number} [index] - index of view to replace\n */\n\nView.setView = function(view, container, index) {\n\treturn this._updateViews([view], container, index);\n};\n\n/*\n * Set views to views group or replace some view in specified position\n * If index is passed it replace only one view with index in views group\n *\n * @param {View[]} views - views to set\n * @param {String} container - container to set\n * @param {Number} [index] - index of view to replace\n */\n\nView.setViews = function(views, container, index) {\n\treturn this._updateViews(views, container, index);\n};\n\n/*\n * Alias for setView\n *\n * @param {View} view - view to set\n * @param {String} container - container to set\n * @param {Number} [index] - index of view to replace\n */\n\nView.replaceView = function(view, container, index) {\n\treturn this._updateViews([view], container, index);\n};\n\n/*\n * Alias for setViews\n *\n * @param {View[]} views - views to set\n * @param {String} container - container to set\n * @param {Number} [index] - index of view to replace\n */\n\nView.replaceViews = function(views, container, index) {\n\treturn this._updateViews(views, container, index);\n};\n\n/*\n * Append view to end of views group\n * This method is alias for insertView without index argument\n *\n * @param {View} view - view to append\n * @param {String} container - container of views group\n */\n\nView.appendView = function(view, container) {\n\treturn this._insertViews([view], container);\n};\n\n/*\n * Append views to end of views group\n * This method is alias for insertViews without index argument\n *\n * @param {View[]} views - views to append\n * @param {String} container - container of views group\n */\n\nView.appendViews = function(views, container) {\n\treturn this._insertViews(views, container);\n};\n\n/*\n * Prepend view to start of views group\n * This method is alias for insertView with `0` as index argument value\n *\n * @param {View} views - view to prepend\n * @param {String} container - container of views group\n */\n\nView.prependView = function(view, container) {\n\treturn this._insertViews([view], container, 0);\n};\n\n/*\n * Prepend views to start of views group\n * This method is alias for insertViews with `0` as index argument value\n *\n * @param {View[]} views - view to prepend\n * @param {String} container - container of views group\n */\n\nView.prependViews = function(views, container) {\n\treturn this._insertViews(views, container, 0);\n};\n\n/*\n * Insert view to specified position of views group\n * If index is not passed method insert view to the end of views group (append)\n *\n * @param {View} view - view to insert\n * @param {String} container - container of views group\n * @param {Number} [index] - position in views group\n */\n\nView.insertView = function(view, container, index) {\n\treturn this._insertViews([view], container, index);\n};\n\n/*\n * Insert views to specified position of views group\n * If index is not passed method insert views to the end of views group (append)\n *\n * @param {View[]} views - views to insert\n * @param {String} container - container of views group\n * @param {Number} [index] - position in views group\n */\n\nView.insertViews = function(views, container, index) {\n\treturn this._insertViews(views, container, index);\n};\n\n/*\n * Remove view from views group by index or view instance\n * If index is passed it remove view in the index position\n *\n * @param {View} [view] - view to remove\n * @param {String} container - container of views group\n * @param {Number} [index] - index of view in views group\n */\n\nView.removeView = function(view, container, index) {\n\tif (arguments.length < 2) {\n\t\tthrow new Error('\"view\" or \"index\" arguments must be specified');\n\t}\n\n\tif (_.isString(view)) {\n\t\tindex = container;\n\t\tcontainer = view;\n\t\tview = this.getView(container, index);\n\t\tif (!view) return this;\n\t}\n\n\treturn this._removeViews([view], container);\n};\n\n/*\n * Remove views from views group\n * If views are passed remove only these views\n * Othervise remove all views from container\n *\n * @param {View[]} [views] - views to remove\n * @param {String} container - container of views group\n */\n\nView.removeViews = function(views, container) {\n\tif (_.isString(views)) {\n\t\tcontainer = views;\n\t\tviews = this.getViews(container);\n\t}\n\n\treturn this._removeViews(views, container);\n};\n\n/*\n * Get single view by container and index\n *\n * @param {String} container - container of views group\n * @param {Number} [index] - index of view in views group\n */\n\nView.getView = function(container, index) {\n\treturn this.getViews(container)[index || 0] || null;\n};\n\n/*\n * Get views group by container\n *\n * @param {String} container - container of views group\n */\n\nView.getViews = function(container) {\n\treturn _.clone(this.views[container]) || [];\n};\n\nView._insertViews = function(views, container, index) {\n\tconsole.log('>>> _insertViews:', views, container, index)\n\n\tvar self = this;\n\n\tvar viewsGroup = this.getViews(container);\n\n\t_(views).each(function(view) {\n\t\tif (view.parent) {\n\t\t\tview.parent.removeView(view, view.container);\n\t\t}\n\t});\n\n\tif (viewsGroup.length) {\n\t\t// if index is not specified set it value as last index of views group\n\t\tif (typeof index === 'undefined') {\n\t\t\tindex = viewsGroup.length;\n\t\t}\n\n\t\t// insert views\n\t\tsplice.apply(this.views[container], [index, 0].concat(views));\n\t} else {\n\t\t// if group is empty - set views as whole views group value\n\t\tthis.views[container] = views;\n\t}\n\n\t// set each view parent to current\n\t_(views).each(function(view) {\n\t\tview.parent = self;\n\t\tview.container = container;\n\t});\n\n\tthis.delegateNestedEvents('views', container, views);\n\n\treturn this;\n};\n\nView._updateViews = function(views, container, index) {\n\tconsole.log('>>> _updateViews:', views, container, index)\n\n\tvar viewsGroup = this.getViews(container);\n\n\tif (viewsGroup.length) {\n\t\tvar removedViews = [];\n\n\t\t// if views group is not empty\n\t\tif (typeof index !== 'undefined') {\n\t\t\t// if index is specified\n\t\t\t// remove view from specific position\n\t\t\tremovedViews = this.getView(container, index);\n\t\t\tremovedViews = removedViews ? [removedViews] : [];\n\t\t} else {\n\t\t\t// if no index - remove all views from views group\n\t\t\tremovedViews = viewsGroup;\n\t\t}\n\n\t\tif (removedViews.length) {\n\t\t\t// if remove views array is not empty\n\t\t\t// remove from parent\n\t\t\tthis._removeViews(removedViews, container);\n\n\t\t\t// and remove views\n\t\t\t_(removedViews).each(function(view) {\n\t\t\t\tview.remove();\n\t\t\t});\n\t\t}\n\t}\n\n\t// insert new views\n\treturn this._insertViews(views, container, index);\n};\n\nView._removeViews = function(views, container) {\n\tconsole.log('>>> _removeViews:', views, container)\n\n\tvar self = this;\n\n\tvar viewsGroup = this.getViews(container);\n\n\tif (!viewsGroup.length) return this;\n\n\tvar viewObjs = _.chain(views).uniq().map(function(view) {\n\t\t\treturn {\n\t\t\t\tview: view,\n\t\t\t\tindex: _.indexOf(viewsGroup, view)\n\t\t\t};\n\t\t}).filter(function(viewObj) {\n\t\t\treturn viewObj.index >= 0;\n\t\t}).sortBy(function(viewObj) {\n\t\t\treturn -viewObj.index;\n\t\t}).value();\n\n\tif (!viewObjs.length) return this;\n\n\t_(viewObjs).each(function(viewObj) {\n\t\tvar view = viewObj.view;\n\n\t\t// remove item from group\n\t\tsplice.call(self.views[container], viewObj.index, 1);\n\n\t\t// undelegate all nested entity events\n\t\tself.undelegateNestedEvents(view);\n\n\t\t// unset view parent\n\t\tdelete view.parent;\n\t});\n\n\treturn this;\n};\n\n/*\n * @override setElement\n * Original setElement do undelegateEvents/delegateEvents, we remove it\n * because we have special detach/attach methods for this\n */\n\nView.setElement = function(element) {\n\tvar $previousEl = this.$el;\n\n\tthis._setElement(element);\n\n\t// insert html to $el\n\tif ($previousEl && this.$container) {\n\t\t$previousEl.replaceWith(this.$el);\n\t}\n\n\treturn this;\n};\n\n/*\n * @override delegateEvents\n */\n\nView.delegateEvents = function(events) {\n\tevents = events || _.result(this, 'events');\n\tif (!events) return this;\n\tevents = _(events).omit(nestedEventTypes);\n\treturn backbone.View.prototype.delegateEvents.call(this, events);\n};\n\nView.delegateNestedEvents = function(type, key, entities) {\n\tvar self = this;\n\tif (!_.isArray(entities)) entities = [entities];\n\tvar listeners = this._nestedEventsHash[type][key];\n\tif (listeners) {\n\t\t_(listeners).each(function(listener) {\n\t\t\t_(entities).each(function(entity) {\n\t\t\t\tself.listenTo(entity, listener.eventName, listener.handler);\n\t\t\t});\n\t\t});\n\t}\n\treturn this;\n};\n\nView.undelegateNestedEvents = function(entities) {\n\tvar self = this;\n\tif (!_.isArray(entities)) entities = [entities];\n\t_(entities).each(function(entity) {\n\t\tself.stopListening(entity);\n\t});\n\treturn this;\n};\n\nView._prepareNestedEvents = function(events) {\n\tvar self = this;\n\n\t// Hash for nested views events fast search\n\tthis._nestedEventsHash = {};\n\t_(nestedEventTypes).each(function(type) {\n\t\tself._nestedEventsHash[type] = {};\n\t});\n\n\tevents = events || _.result(this, 'events');\n\tif (!events) return;\n\n\t// bind all prefixed events to view then call native delegate events\n\t_(nestedEventTypes).each(function(type) {\n\t\tvar typeEventsHash = self._nestedEventsHash[type];\n\n\t\tif (!_(events).has(type) || !_.isObject(events[type])) return;\n\n\t\t_(events[type]).each(function(method, key) {\n\t\t\tif (!_.isFunction(method)) method = self[method];\n\t\t\tif (!method) return;\n\t\t\tvar match = key.match(delegateEventSplitter);\n\t\t\tvar eventName = match[1];\n\t\t\tvar entityKeys = match[2].replace(/ *, */g, ',').split(',');\n\t\t\tmethod = _.bind(method, self);\n\n\t\t\t// fill _nestedEventsHash\n\t\t\t_(entityKeys).each(function(entityKey) {\n\t\t\t\ttypeEventsHash[entityKey] = typeEventsHash[entityKey] || [];\n\t\t\t\ttypeEventsHash[entityKey].push({\n\t\t\t\t\teventName: eventName,\n\t\t\t\t\thandler: method\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t});\n};\n\n/*\n * Wrap all non-array view groups to arrays with one element\n */\n\nView._normalizeViews = function() {\n\tvar self = this;\n\n\t_(this.views).each(function(views, container) {\n\t\tif (!_.isArray(views)) {\n\t\t\tself.views[container] = [views];\n\t\t}\n\t});\n};\n\nView.attachViews = function() {\n\t// iterate by each nested views groups\n\t_(this.views).each(function(viewsGroup) {\n\t\t// return if views group is empty\n\t\tif (!viewsGroup.length) return;\n\n\t\t// call attach method for each nested view from views group\n\t\t_(viewsGroup).each(function(view) {\n\t\t\t// recursive attach all nested views\n\t\t\tview.attachViews();\n\n\t\t\t// attach current view\n\t\t\tview.attach();\n\t\t});\n\t});\n\n\t// return this for chaining\n\treturn this;\n};\n\n/*\n * afterAttach is empty by default.\n * It called after attach call\n * Override it to add some specific logic for DOM manipulations.\n */\n\nView.afterAttach = function() {\n\treturn this;\n};\n\n/*\n * Detach all previous views and attach new view to current view $el\n */\n\nView.attach = function() {\n\t// return if current view is already attached\n\tif (this.attached) return this;\n\n\t// detach previous view\n\tvar previousView = this.$el.data('esencia-view');\n\tif (previousView) previousView.detach();\n\n\t// attach current view and set attr\n\tthis.$el.data('esencia-view', this).attr('esencia-view', this.cid);\n\n\t// enable all DOM events\n\tthis.delegateEvents();\n\n\tthis.attached = true;\n\n\t// do some user afterAttach actions\n\tconsole.log('>>>      attach: %o %o', this, this.$el)\n\tthis.afterAttach();\n\n\treturn this;\n};\n\nView.detachViews = function() {\n\t// iterate by each views groups\n\t_(this.views).each(function(viewsGroup) {\n\t\t// return if views group is empty\n\t\tif (!viewsGroup.length) return;\n\n\t\t// call detach method for each nested view from views group\n\t\t_(viewsGroup).each(function(view) {\n\t\t\t// recursive detach all nested views\n\t\t\tview.detachViews();\n\n\t\t\t// detach current view\n\t\t\tview.detach();\n\t\t});\n\t});\n\n\t// return this for chaining\n\treturn this;\n};\n\n/*\n * beforeDetach is empty by default.\n * It called before detach calls\n * Override it to add some specific logic before view detach from dom.\n */\n\nView.beforeDetach = function() {\n\treturn this;\n};\n\n/*\n * Detach view from current view $el\n */\n\nView.detach = function() {\n\t// return if current view is not already attached\n\tif (!this.attached) return this;\n\n\t// do some user beforeDetach actions\n\tconsole.log('>>>      detach: %o %o', this, this.$el)\n\tthis.beforeDetach();\n\n\t// remove attr and data from $el\n\tthis.$el.removeData('esencia-view').removeAttr('esencia-view');\n\n\t// disable all DOM events\n\tthis.undelegateEvents();\n\n\tthis.attached = false;\n\n\t// return this for chaining\n\treturn this;\n};\n\nView.remove = function() {\n\t// remove current view from parent view container\n\tif (this.parent) {\n\t\tthis.parent.removeView(this, this.container);\n\t}\n\n\t// detach all nested views first\n\tthis.detachViews();\n\n\t// detach current view\n\tthis.detach();\n\n\t// remove DOM element\n\treturn backbone.View.prototype.remove.call(this);\n};\n\n/*\n * Get view, that attached to closest element with attr `esencia-view`\n *\n * @param {String | $} selector\n */\n\nView.getClosestView = function(selector) {\n\tvar $selector = $(selector);\n\n\tif (!$selector.is('[esencia-view]')) {\n\t\t$selector = $selector.closest('[esencia-view]');\n\t}\n\n\treturn $selector.length ? $selector.data('esencia-view') : null;\n};\n\nmodule.exports = backbone.View.extend(View);\n"],"sourceRoot":"."}