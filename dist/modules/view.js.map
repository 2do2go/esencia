{"version":3,"sources":["lib/view.js"],"names":["_","_require","backbone","$","splice","Array","prototype","delegateEventSplitter","nestedEventTypes","View","templateHelpers","viewOptions","constructor","options","self","views","data","extend","pick","template","isFunction","Error","_normalizeViews","_prepareNestedEvents","waiting","attached","apply","arguments","collections","each","collection","key","delegateNestedEvents","models","model","setData","isUnchanged","wait","trigger","render","console","log","$el","force","detach","html","renderTemplate","getTemplateData","length","setElement","_ensureElement","renderViews","parent","$container","attachViews","attach","chain","result","value","viewsGroup","container","view","first","containerEl","get","domChanged","some","$els","push","append","setView","index","_updateViews","setViews","replaceView","replaceViews","appendView","_insertViews","appendViews","prependView","prependViews","insertView","insertViews","removeView","isString","getView","_removeViews","removeViews","getViews","clone","concat","removedViews","remove","viewObjs","uniq","map","indexOf","filter","viewObj","sortBy","call","undelegateNestedEvents","element","$previousEl","_setElement","replaceWith","delegateEvents","events","omit","type","entities","isArray","listeners","_nestedEventsHash","listener","entity","listenTo","eventName","handler","stopListening","typeEventsHash","has","isObject","method","match","entityKeys","replace","split","bind","entityKey","afterAttach","previousView","attr","cid","detachViews","beforeDetach","removeData","removeAttr","undelegateEvents","getClosestView","selector","$selector","is","closest","module","exports"],"mappings":"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","file":"view.js","sourceRoot":".","sourcesContent":["'use strict';\n\nvar _ = require('underscore');\nvar backbone = require('backbone');\n\n/*\n * Take jquery or other selectors lib from backbone\n */\n\nvar $ = backbone.$;\n\n/*\n * Helpers\n */\n\nvar splice = Array.prototype.splice;\n\n/*\n * Cached regex to split keys for `delegate`.\n */\n\nvar delegateEventSplitter = /^(\\S+)\\s*(.*)$/;\n\nvar nestedEventTypes = ['views', 'collections', 'models'];\n\n/*\n * Base View class extend backbone View class\n */\n\nvar View = {\n\t/*\n\t * Helpers (Object|Fuction) which will be passed to the template\n\t */\n\n\ttemplateHelpers: {}\n};\n\nvar viewOptions = [\n\t'models', 'collections', 'views', 'events', 'data', 'router',\n\t'templateHelpers'\n];\n\n/*\n * @override constructor\n *\n * @param {Object} [options]\n */\n\nView.constructor = function(options) {\n\tvar self = this;\n\n\toptions = options || {};\n\n\t// nested views hash is empty by default\n\tthis.views = {};\n\n\tthis.data = this.data || {};\n\n\t// populate View instance with fields from options\n\t_.extend(this, _.pick(options, viewOptions));\n\t// save original options, it is sometimes usefull\n\tthis.options = options;\n\n\tif (this.template && !_.isFunction(this.template)) {\n\t\tthrow new Error('View `template` option should be a function');\n\t}\n\n\t// normalize nested views hash\n\tthis._normalizeViews();\n\n\t// create special hash for all events for fast search\n\tthis._prepareNestedEvents();\n\n\t// views are in the resolved state by default\n\tthis.waiting = false;\n\n\t// views are not attached by default\n\tthis.attached = false;\n\n\t// apply default backbone.View constructor\n\tbackbone.View.apply(this, arguments);\n\n\t// we should delegate events after constructor call because collections and\n\t// models was created in the initialize method\n\n\t// delegate events for each collection\n\tif (this.collections) {\n\t\t_(this.collections).each(function(collection, key) {\n\t\t\tself.delegateNestedEvents('collections', key, collection);\n\t\t});\n\t}\n\n\t// delegate events for each model\n\tif (this.models) {\n\t\t_(this.models).each(function(model, key) {\n\t\t\tself.delegateNestedEvents('models', key, model);\n\t\t});\n\t}\n};\n\n/*\n * Method to change view data.\n * Router calls this method to update view data.\n *\n * @param {Object} [data]\n */\n\nView.setData = function(data) {\n\tif (data) this.data = data;\n};\n\n/*\n * Method to check that view is changed and should be re-rendered\n * Returns true by default, override this method for specific logic\n */\n\nView.isUnchanged = function() {\n\treturn true;\n};\n\n/*\n * Method to switch view to waiting state\n */\n\nView.wait = function() {\n\tvar self = this;\n\tthis.waiting = true;\n\n\treturn function() {\n\t\tself.waiting = false;\n\t\tself.trigger('resolve');\n\t};\n};\n\n/*\n * @override `render`\n */\n\nView.render = function(options) {\n\tconsole.log('>>>      render: %o %o', this, this.$el)\n\n\t// stop rendering if view in `waiting` state, resolve it first\n\tif (this.waiting) return this;\n\n\toptions = options || {};\n\n\tif (this.template) {\n\t\t// re-render template only if it exists and if it is necessary\n\t\tif (options.force || !this.attached || !this.isUnchanged()) {\n\t\t\t// detach view from DOM element\n\t\t\tthis.detach();\n\n\t\t\t// render template with data\n\t\t\tvar html = this.renderTemplate(this.template, this.getTemplateData());\n\n\t\t\t// render html with jqeury (or other lib) call\n\t\t\tvar $el = $(html);\n\n\t\t\tif (!$el.length) {\n\t\t\t\tthrow new Error('View template produce empty html');\n\t\t\t}\n\n\t\t\tif ($el.length > 1) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t'View template produce html with more than one root elements'\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tthis.setElement($el);\n\t\t}\n\t} else {\n\t\t// re-ensure element if it is not ensured\n\t\tif (!this.$el.length) this._ensureElement();\n\t}\n\n\t// render nested views\n\tthis.renderViews(options);\n\n\tif (!this.parent || this.$container) {\n\t\t// attach all nested views first\n\t\tthis.attachViews();\n\n\t\t// attach current view\n\t\tthis.attach();\n\t}\n\n\t// return this for chaining\n\treturn this;\n};\n\n/*\n * Get data for template rendering\n */\n\nView.getTemplateData = function() {\n\treturn this.data;\n};\n\n/*\n * Render template with data. Returns html.\n *\n * @param {function} template for rendering\n * @params {object} data for rendering\n */\n\nView.renderTemplate = function(template, data) {\n\tdata = _(this).chain().result('templateHelpers').extend(data).value();\n\n\t// get html\n\treturn template(data);\n};\n\n/*\n * Render all nested view\n*/\n\nView.renderViews = function(options) {\n\tconsole.log('>>> renderViews: %o %o', this, this.$el)\n\n\tvar self = this;\n\n\t// iterate by each views group\n\t_(this.views).each(function(viewsGroup, container) {\n\t\t// return if view group is empty\n\t\tif (!viewsGroup.length) return;\n\n\t\t// call render for each views from view group\n\t\t_(viewsGroup).each(function(view) {\n\t\t\tview.render(options);\n\t\t});\n\n\t\t// get first container or $el\n\t\tvar $container = container ? self.$(container).first() : self.$el;\n\n\t\tif (!$container.length) {\n\t\t\tthrow new Error('Container \"' + container + '\" is not found');\n\t\t}\n\n\t\tvar containerEl = $container.get(0);\n\n\t\t// dom is changed if some view from group is not in current container\n\t\tvar domChanged = _(viewsGroup).some(function(view) {\n\t\t\treturn (\n\t\t\t\t!view.attached ||\n\t\t\t\t!view.$container ||\n\t\t\t\tview.$container.get(0) !== containerEl\n\t\t\t);\n\t\t});\n\n\t\tif (domChanged) {\n\t\t\t// re-append views group to container\n\t\t\tvar $els = [];\n\n\t\t\t_(viewsGroup).each(function(view) {\n\t\t\t\tview.$container = $container;\n\t\t\t\t$els.push(view.$el);\n\t\t\t});\n\n\t\t\t// @TODO: add some rendering optimizations here\n\n\t\t\t// put all views to $container\n\t\t\t$container.append($els);\n\t\t}\n\t});\n\n\t// return this for chaining\n\treturn this;\n};\n\n/*\n * Set view to views group or replace some view in specified position\n * If index is passed it replace only one view with index in views group\n *\n * @param {View} view - view to set\n * @param {String} container - container to set\n * @param {Number} [index] - index of view to replace\n */\n\nView.setView = function(view, container, index) {\n\treturn this._updateViews([view], container, index);\n};\n\n/*\n * Set views to views group or replace some view in specified position\n * If index is passed it replace only one view with index in views group\n *\n * @param {View[]} views - views to set\n * @param {String} container - container to set\n * @param {Number} [index] - index of view to replace\n */\n\nView.setViews = function(views, container, index) {\n\treturn this._updateViews(views, container, index);\n};\n\n/*\n * Alias for setView\n *\n * @param {View} view - view to set\n * @param {String} container - container to set\n * @param {Number} [index] - index of view to replace\n */\n\nView.replaceView = function(view, container, index) {\n\treturn this._updateViews([view], container, index);\n};\n\n/*\n * Alias for setViews\n *\n * @param {View[]} views - views to set\n * @param {String} container - container to set\n * @param {Number} [index] - index of view to replace\n */\n\nView.replaceViews = function(views, container, index) {\n\treturn this._updateViews(views, container, index);\n};\n\n/*\n * Append view to end of views group\n * This method is alias for insertView without index argument\n *\n * @param {View} view - view to append\n * @param {String} container - container of views group\n */\n\nView.appendView = function(view, container) {\n\treturn this._insertViews([view], container);\n};\n\n/*\n * Append views to end of views group\n * This method is alias for insertViews without index argument\n *\n * @param {View[]} views - views to append\n * @param {String} container - container of views group\n */\n\nView.appendViews = function(views, container) {\n\treturn this._insertViews(views, container);\n};\n\n/*\n * Prepend view to start of views group\n * This method is alias for insertView with `0` as index argument value\n *\n * @param {View} views - view to prepend\n * @param {String} container - container of views group\n */\n\nView.prependView = function(view, container) {\n\treturn this._insertViews([view], container, 0);\n};\n\n/*\n * Prepend views to start of views group\n * This method is alias for insertViews with `0` as index argument value\n *\n * @param {View[]} views - view to prepend\n * @param {String} container - container of views group\n */\n\nView.prependViews = function(views, container) {\n\treturn this._insertViews(views, container, 0);\n};\n\n/*\n * Insert view to specified position of views group\n * If index is not passed method insert view to the end of views group (append)\n *\n * @param {View} view - view to insert\n * @param {String} container - container of views group\n * @param {Number} [index] - position in views group\n */\n\nView.insertView = function(view, container, index) {\n\treturn this._insertViews([view], container, index);\n};\n\n/*\n * Insert views to specified position of views group\n * If index is not passed method insert views to the end of views group (append)\n *\n * @param {View[]} views - views to insert\n * @param {String} container - container of views group\n * @param {Number} [index] - position in views group\n */\n\nView.insertViews = function(views, container, index) {\n\treturn this._insertViews(views, container, index);\n};\n\n/*\n * Remove view from views group by index or view instance\n * If index is passed it remove view in the index position\n *\n * @param {View} [view] - view to remove\n * @param {String} container - container of views group\n * @param {Number} [index] - index of view in views group\n */\n\nView.removeView = function(view, container, index) {\n\tif (arguments.length < 2) {\n\t\tthrow new Error('\"view\" or \"index\" arguments must be specified');\n\t}\n\n\tif (_.isString(view)) {\n\t\tindex = container;\n\t\tcontainer = view;\n\t\tview = this.getView(container, index);\n\t\tif (!view) return this;\n\t}\n\n\treturn this._removeViews([view], container);\n};\n\n/*\n * Remove views from views group\n * If views are passed remove only these views\n * Othervise remove all views from container\n *\n * @param {View[]} [views] - views to remove\n * @param {String} container - container of views group\n */\n\nView.removeViews = function(views, container) {\n\tif (_.isString(views)) {\n\t\tcontainer = views;\n\t\tviews = this.getViews(container);\n\t}\n\n\treturn this._removeViews(views, container);\n};\n\n/*\n * Get single view by container and index\n *\n * @param {String} container - container of views group\n * @param {Number} [index] - index of view in views group\n */\n\nView.getView = function(container, index) {\n\treturn this.getViews(container)[index || 0] || null;\n};\n\n/*\n * Get views group by container\n *\n * @param {String} container - container of views group\n */\n\nView.getViews = function(container) {\n\treturn _.clone(this.views[container]) || [];\n};\n\nView._insertViews = function(views, container, index) {\n\tconsole.log('>>> _insertViews:', views, container, index)\n\n\tvar self = this;\n\n\tvar viewsGroup = this.getViews(container);\n\n\t_(views).each(function(view) {\n\t\tif (view.parent) {\n\t\t\tview.parent.removeView(view, view.container);\n\t\t}\n\t});\n\n\tif (viewsGroup.length) {\n\t\t// if index is not specified set it value as last index of views group\n\t\tif (typeof index === 'undefined') {\n\t\t\tindex = viewsGroup.length;\n\t\t}\n\n\t\t// insert views\n\t\tsplice.apply(this.views[container], [index, 0].concat(views));\n\t} else {\n\t\t// if group is empty - set views as whole views group value\n\t\tthis.views[container] = views;\n\t}\n\n\t// set each view parent to current\n\t_(views).each(function(view) {\n\t\tview.parent = self;\n\t\tview.container = container;\n\t});\n\n\tthis.delegateNestedEvents('views', container, views);\n\n\treturn this;\n};\n\nView._updateViews = function(views, container, index) {\n\tconsole.log('>>> _updateViews:', views, container, index)\n\n\tvar viewsGroup = this.getViews(container);\n\n\tif (viewsGroup.length) {\n\t\tvar removedViews = [];\n\n\t\t// if views group is not empty\n\t\tif (typeof index !== 'undefined') {\n\t\t\t// if index is specified\n\t\t\t// remove view from specific position\n\t\t\tremovedViews = this.getView(container, index);\n\t\t\tremovedViews = removedViews ? [removedViews] : [];\n\t\t} else {\n\t\t\t// if no index - remove all views from views group\n\t\t\tremovedViews = viewsGroup;\n\t\t}\n\n\t\tif (removedViews.length) {\n\t\t\t// if remove views array is not empty\n\t\t\t// remove from parent\n\t\t\tthis._removeViews(removedViews, container);\n\n\t\t\t// and remove views\n\t\t\t_(removedViews).each(function(view) {\n\t\t\t\tview.remove();\n\t\t\t});\n\t\t}\n\t}\n\n\t// insert new views\n\treturn this._insertViews(views, container, index);\n};\n\nView._removeViews = function(views, container) {\n\tconsole.log('>>> _removeViews:', views, container)\n\n\tvar self = this;\n\n\tvar viewsGroup = this.getViews(container);\n\n\tif (!viewsGroup.length) return this;\n\n\tvar viewObjs = _.chain(views).uniq().map(function(view) {\n\t\t\treturn {\n\t\t\t\tview: view,\n\t\t\t\tindex: _.indexOf(viewsGroup, view)\n\t\t\t};\n\t\t}).filter(function(viewObj) {\n\t\t\treturn viewObj.index >= 0;\n\t\t}).sortBy(function(viewObj) {\n\t\t\treturn -viewObj.index;\n\t\t}).value();\n\n\tif (!viewObjs.length) return this;\n\n\t_(viewObjs).each(function(viewObj) {\n\t\tvar view = viewObj.view;\n\n\t\t// remove item from group\n\t\tsplice.call(self.views[container], viewObj.index, 1);\n\n\t\t// undelegate all nested entity events\n\t\tself.undelegateNestedEvents(view);\n\n\t\t// unset view parent\n\t\tdelete view.parent;\n\t});\n\n\treturn this;\n};\n\n/*\n * @override setElement\n * Original setElement do undelegateEvents/delegateEvents, we remove it\n * because we have special detach/attach methods for this\n */\n\nView.setElement = function(element) {\n\tvar $previousEl = this.$el;\n\n\tthis._setElement(element);\n\n\t// insert html to $el\n\tif ($previousEl && this.$container) {\n\t\t$previousEl.replaceWith(this.$el);\n\t}\n\n\treturn this;\n};\n\n/*\n * @override delegateEvents\n */\n\nView.delegateEvents = function(events) {\n\tevents = events || _.result(this, 'events');\n\tif (!events) return this;\n\tevents = _(events).omit(nestedEventTypes);\n\treturn backbone.View.prototype.delegateEvents.call(this, events);\n};\n\nView.delegateNestedEvents = function(type, key, entities) {\n\tvar self = this;\n\tif (!_.isArray(entities)) entities = [entities];\n\tvar listeners = this._nestedEventsHash[type][key];\n\tif (listeners) {\n\t\t_(listeners).each(function(listener) {\n\t\t\t_(entities).each(function(entity) {\n\t\t\t\tself.listenTo(entity, listener.eventName, listener.handler);\n\t\t\t});\n\t\t});\n\t}\n\treturn this;\n};\n\nView.undelegateNestedEvents = function(entities) {\n\tvar self = this;\n\tif (!_.isArray(entities)) entities = [entities];\n\t_(entities).each(function(entity) {\n\t\tself.stopListening(entity);\n\t});\n\treturn this;\n};\n\nView._prepareNestedEvents = function(events) {\n\tvar self = this;\n\n\t// Hash for nested views events fast search\n\tthis._nestedEventsHash = {};\n\t_(nestedEventTypes).each(function(type) {\n\t\tself._nestedEventsHash[type] = {};\n\t});\n\n\tevents = events || _.result(this, 'events');\n\tif (!events) return;\n\n\t// bind all prefixed events to view then call native delegate events\n\t_(nestedEventTypes).each(function(type) {\n\t\tvar typeEventsHash = self._nestedEventsHash[type];\n\n\t\tif (!_(events).has(type) || !_.isObject(events[type])) return;\n\n\t\t_(events[type]).each(function(method, key) {\n\t\t\tif (!_.isFunction(method)) method = self[method];\n\t\t\tif (!method) return;\n\t\t\tvar match = key.match(delegateEventSplitter);\n\t\t\tvar eventName = match[1];\n\t\t\tvar entityKeys = match[2].replace(/ *, */g, ',').split(',');\n\t\t\tmethod = _.bind(method, self);\n\n\t\t\t// fill _nestedEventsHash\n\t\t\t_(entityKeys).each(function(entityKey) {\n\t\t\t\ttypeEventsHash[entityKey] = typeEventsHash[entityKey] || [];\n\t\t\t\ttypeEventsHash[entityKey].push({\n\t\t\t\t\teventName: eventName,\n\t\t\t\t\thandler: method\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t});\n};\n\n/*\n * Wrap all non-array view groups to arrays with one element\n */\n\nView._normalizeViews = function() {\n\tvar self = this;\n\n\t_(this.views).each(function(views, container) {\n\t\tif (!_.isArray(views)) {\n\t\t\tself.views[container] = [views];\n\t\t}\n\t});\n};\n\nView.attachViews = function() {\n\t// iterate by each nested views groups\n\t_(this.views).each(function(viewsGroup) {\n\t\t// return if views group is empty\n\t\tif (!viewsGroup.length) return;\n\n\t\t// call attach method for each nested view from views group\n\t\t_(viewsGroup).each(function(view) {\n\t\t\t// recursive attach all nested views\n\t\t\tview.attachViews();\n\n\t\t\t// attach current view\n\t\t\tview.attach();\n\t\t});\n\t});\n\n\t// return this for chaining\n\treturn this;\n};\n\n/*\n * afterAttach is empty by default.\n * It called after attach call\n * Override it to add some specific logic for DOM manipulations.\n */\n\nView.afterAttach = function() {\n\treturn this;\n};\n\n/*\n * Detach all previous views and attach new view to current view $el\n */\n\nView.attach = function() {\n\t// return if current view is already attached\n\tif (this.attached) return this;\n\n\t// detach previous view\n\tvar previousView = this.$el.data('esencia-view');\n\tif (previousView) previousView.detach();\n\n\t// attach current view and set attr\n\tthis.$el.data('esencia-view', this).attr('esencia-view', this.cid);\n\n\t// enable all DOM events\n\tthis.delegateEvents();\n\n\tthis.attached = true;\n\n\t// do some user afterAttach actions\n\tconsole.log('>>>      attach: %o %o', this, this.$el)\n\tthis.afterAttach();\n\n\treturn this;\n};\n\nView.detachViews = function() {\n\t// iterate by each views groups\n\t_(this.views).each(function(viewsGroup) {\n\t\t// return if views group is empty\n\t\tif (!viewsGroup.length) return;\n\n\t\t// call detach method for each nested view from views group\n\t\t_(viewsGroup).each(function(view) {\n\t\t\t// recursive detach all nested views\n\t\t\tview.detachViews();\n\n\t\t\t// detach current view\n\t\t\tview.detach();\n\t\t});\n\t});\n\n\t// return this for chaining\n\treturn this;\n};\n\n/*\n * beforeDetach is empty by default.\n * It called before detach calls\n * Override it to add some specific logic before view detach from dom.\n */\n\nView.beforeDetach = function() {\n\treturn this;\n};\n\n/*\n * Detach view from current view $el\n */\n\nView.detach = function() {\n\t// return if current view is not already attached\n\tif (!this.attached) return this;\n\n\t// do some user beforeDetach actions\n\tconsole.log('>>>      detach: %o %o', this, this.$el)\n\tthis.beforeDetach();\n\n\t// remove attr and data from $el\n\tthis.$el.removeData('esencia-view').removeAttr('esencia-view');\n\n\t// disable all DOM events\n\tthis.undelegateEvents();\n\n\tthis.attached = false;\n\n\t// return this for chaining\n\treturn this;\n};\n\nView.remove = function() {\n\t// remove current view from parent view container\n\tif (this.parent) {\n\t\tthis.parent.removeView(this, this.container);\n\t}\n\n\t// detach all nested views first\n\tthis.detachViews();\n\n\t// detach current view\n\tthis.detach();\n\n\t// remove DOM element\n\treturn backbone.View.prototype.remove.call(this);\n};\n\n/*\n * Get view, that attached to closest element with attr `esencia-view`\n *\n * @param {String | $} selector\n */\n\nView.getClosestView = function(selector) {\n\tvar $selector = $(selector);\n\n\tif (!$selector.is('[esencia-view]')) {\n\t\t$selector = $selector.closest('[esencia-view]');\n\t}\n\n\treturn $selector.length ? $selector.data('esencia-view') : null;\n};\n\nmodule.exports = backbone.View.extend(View);\n"]}