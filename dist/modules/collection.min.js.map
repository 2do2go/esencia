{"version":3,"sources":["collection.js","lib/collection.js"],"names":["factory","define","amd","exports","module","require","this","Esencia","Collection","_","Backbone","__external__","__external_Backbone","_require","id","cache","modules","call","backbone","baseMethods","execMethodType","sync","method","model","options","contains","prototype","params","type","dataType","contentType","processData","url","result","urlError","charAt","length","data","isObject","JSON","stringify","xhr","ajax","extend","trigger","exec","clone","collection","success","resp","error","Error"],"mappings":"CAAC,SAAUA,GACe,kBAAXC,SAAyBA,OAAOC,IACvCD,QACI,aACA,YACDD,GACuB,gBAAZG,SACdC,OAAOD,QAAUH,EAAQK,QAAQ,cAAeA,QAAQ,aAExDC,KAAKC,QAAQC,WAAaR,EAAQS,EAAGC,WAE3C,SAAUC,EAAcC,GAEtB,QAASC,GAASC,GACd,GAAIV,GAASS,EAASE,MAAMD,EAC5B,KAAKV,EAAQ,CACT,GAAID,KACJC,GAASS,EAASE,MAAMD,IACpBA,GAAIA,EACJX,QAASA,GAEbU,EAASG,QAAQF,GAAIG,KAAKd,EAASC,EAAQD,GAE/C,MAAOC,GAAOD,QAqElB,MAnEAU,GAASE,SACTF,EAASG,SACL,SAAUZ,EAAQD,GC3B1B,YAEA,IAAIM,GAAII,EAAQ,GACZK,EAAWL,EAAQ,GAEnBL,KAGAW,GAAe,SAAU,SAAU,QAAS,SAAU,QAEtDC,EAAiB,KAMrBZ,GAAWa,KAAO,SAASC,EAAQC,EAAOC,GAEzC,GAAKf,EAAEgB,SAASN,EAAaG,GA2B5B,MAAOJ,GAASV,WAAWkB,UAAUL,KAAKJ,KAAKX,KAAMgB,EAAQC,EAAOC,EA1BpEA,GAAUA,KAEV,IAAIG,IACHC,KAAMR,EACNS,SAAU,OACVC,YAAa,mBACbC,aAAa,EAId,KAAKP,EAAQQ,IAAK,CACjB,GAAIA,GAAMvB,EAAEwB,OAAOV,EAAO,QAAUW,GACpCP,GAAOK,IAAMA,GAAsC,MAA/BA,EAAIG,OAAOH,EAAII,OAAS,GAAa,GAAK,KAAOd,EAIlEE,EAAQa,MAAQ5B,EAAE6B,SAASd,EAAQa,QACtCb,EAAQa,KAAOE,KAAKC,UAAUhB,EAAQa,MAIvC,IAAII,GAAMjB,EAAQiB,IAAMvB,EAASwB,KAAKjC,EAAEkC,OAAOhB,EAAQH,GAEvD,OADAD,GAAMqB,QAAQ,UAAWrB,EAAOkB,EAAKjB,GAC9BiB,GAeTjC,EAAWqC,KAAO,SAASvB,EAAQE,GAClCA,EAAUA,EAAUf,EAAEqC,MAAMtB,KAE5B,IAAIuB,GAAazC,KACb0C,EAAUxB,EAAQwB,OACtBxB,GAAQwB,QAAU,SAASC,GACtBD,GAASA,EAAQD,EAAYE,EAAMzB,GACvCuB,EAAWH,QAAQ,QAAUtB,EAAQyB,EAAYE,EAAMzB,GAGxD,IAAI0B,GAAQ1B,EAAQ0B,KAMpB,OALA1B,GAAQ0B,MAAQ,SAASD,GACpBC,GAAOA,EAAMH,EAAYE,EAAMzB,GACnCuB,EAAWH,QAAQ,QAASG,EAAYE,EAAMzB,IAGxClB,KAAKe,KAAKC,EAAQhB,KAAMkB,GAIhC,IAAIU,GAAW,WACd,KAAM,IAAIiB,OAAM,kDAGjB/C,GAAOD,QAAUe,EAASV,WAAWmC,OAAOnC,IDIpC,SAAUJ,EAAQD,GACdC,EAAOD,QAAUS,GAErB,SAAUR,EAAQD,GACdC,EAAOD,QAAUQ,IAGlBE,EAAS","file":"collection.min.js","sourcesContent":["(function (factory) {\n    if (typeof define === 'function' && define.amd) {\n        define([\n            'underscore',\n            'backbone'\n        ], factory);\n    } else if (typeof exports === 'object') {\n        module.exports = factory(require('underscore'), require('backbone'));\n    } else {\n        this.Esencia.Collection = factory(_, Backbone);\n    }\n}(function (__external__, __external_Backbone) {\n    var global = this, define;\n    function _require(id) {\n        var module = _require.cache[id];\n        if (!module) {\n            var exports = {};\n            module = _require.cache[id] = {\n                id: id,\n                exports: exports\n            };\n            _require.modules[id].call(exports, module, exports);\n        }\n        return module.exports;\n    }\n    _require.cache = [];\n    _require.modules = [\n        function (module, exports) {\n            'use strict';\n            var _ = _require(2);\n            var backbone = _require(1);\n            var Collection = {};\n            var baseMethods = [\n                    'create',\n                    'update',\n                    'patch',\n                    'delete',\n                    'read'\n                ];\n            var execMethodType = 'PUT';\n            Collection.sync = function (method, model, options) {\n                if (!_.contains(baseMethods, method)) {\n                    options = options || {};\n                    var params = {\n                            type: execMethodType,\n                            dataType: 'json',\n                            contentType: 'application/json',\n                            processData: false\n                        };\n                    if (!options.url) {\n                        var url = _.result(model, 'url') || urlError();\n                        params.url = url + (url.charAt(url.length - 1) === '/' ? '' : '/') + method;\n                    }\n                    if (options.data && _.isObject(options.data)) {\n                        options.data = JSON.stringify(options.data);\n                    }\n                    var xhr = options.xhr = backbone.ajax(_.extend(params, options));\n                    model.trigger('request', model, xhr, options);\n                    return xhr;\n                } else {\n                    return backbone.Collection.prototype.sync.call(this, method, model, options);\n                }\n            };\n            Collection.exec = function (method, options) {\n                options = options ? _.clone(options) : {};\n                var collection = this;\n                var success = options.success;\n                options.success = function (resp) {\n                    if (success)\n                        success(collection, resp, options);\n                    collection.trigger('exec:' + method, collection, resp, options);\n                };\n                var error = options.error;\n                options.error = function (resp) {\n                    if (error)\n                        error(collection, resp, options);\n                    collection.trigger('error', collection, resp, options);\n                };\n                return this.sync(method, this, options);\n            };\n            var urlError = function () {\n                throw new Error('A \"url\" property or function must be specified');\n            };\n            module.exports = backbone.Collection.extend(Collection);\n        },\n        function (module, exports) {\n            module.exports = __external_Backbone;\n        },\n        function (module, exports) {\n            module.exports = __external__;\n        }\n    ];\n    return _require(0);\n}));\n//# sourceMappingURL=collection.js.map\n","'use strict';\n\nvar _ = require('underscore');\nvar backbone = require('backbone');\n\nvar Collection = {};\n\n// base methods map\nvar baseMethods = ['create', 'update', 'patch', 'delete', 'read'];\n\nvar execMethodType = 'PUT';\n\n/*\n * Override `sync` to add exec custom method functionality\n */\n\nCollection.sync = function(method, model, options) {\n\t// if sync is called for custom exec method\n\tif (!_.contains(baseMethods, method)) {\n\t\toptions = options || {};\n\n\t\tvar params = {\n\t\t\ttype: execMethodType,\n\t\t\tdataType: 'json',\n\t\t\tcontentType: 'application/json',\n\t\t\tprocessData: false\n\t\t};\n\n\t\t// Ensure that we have a URL and add method name to it\n\t\tif (!options.url) {\n\t\t\tvar url = _.result(model, 'url') || urlError();\n\t\t\tparams.url = url + (url.charAt(url.length - 1) === '/' ? '' : '/') + method;\n\t\t}\n\n\t\t// stringify data to json\n\t\tif (options.data && _.isObject(options.data)) {\n\t\t\toptions.data = JSON.stringify(options.data);\n\t\t}\n\n\t\t// Make the request, allowing the user to override any Ajax options.\n\t\tvar xhr = options.xhr = backbone.ajax(_.extend(params, options));\n\t\tmodel.trigger('request', model, xhr, options);\n\t\treturn xhr;\n\t} else {\n\t\t// call default backbone.Collection sync for base REST methods\n\t\treturn backbone.Collection.prototype.sync.call(this, method, model, options);\n\t}\n};\n\n/*\n * Exec custom non-REST method on collection\n * It trigger `exec:[method]` event after success collection sync\n *\n * @param {String} method\n * @param {Object} options\n */\n\nCollection.exec = function(method, options) {\n\toptions = options ? _.clone(options) : {};\n\n\tvar collection = this;\n\tvar success = options.success;\n\toptions.success = function(resp) {\n\t\tif (success) success(collection, resp, options);\n\t\tcollection.trigger('exec:' + method, collection, resp, options);\n\t};\n\n\tvar error = options.error;\n\toptions.error = function(resp) {\n\t\tif (error) error(collection, resp, options);\n\t\tcollection.trigger('error', collection, resp, options);\n\t};\n\n\treturn this.sync(method, this, options);\n};\n\n// Throw an error when a URL is needed, and none is supplied.\nvar urlError = function() {\n\tthrow new Error('A \"url\" property or function must be specified');\n};\n\nmodule.exports = backbone.Collection.extend(Collection);\n"],"sourceRoot":"."}